
R6_L24_I2COLEDBMP280FFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c310  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a5c  0800c4e0  0800c4e0  0001c4e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ff3c  0801ff3c  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ff3c  0801ff3c  0002ff3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ff44  0801ff44  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ff44  0801ff44  0002ff44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ff48  0801ff48  0002ff48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801ff4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ea8  200001e4  08020130  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000308c  08020130  0003308c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf1b  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dbf  00000000  00000000  0004d12f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00050ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00052398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002668d  00000000  00000000  00053668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c137  00000000  00000000  00079cf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3f3b  00000000  00000000  00095e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00179d67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006734  00000000  00000000  00179e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002a79  00000000  00000000  00180560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c4c8 	.word	0x0800c4c8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	0800c4c8 	.word	0x0800c4c8

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b96e 	b.w	800103c <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468c      	mov	ip, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f040 8083 	bne.w	8000e8e <__udivmoddi4+0x116>
 8000d88:	428a      	cmp	r2, r1
 8000d8a:	4617      	mov	r7, r2
 8000d8c:	d947      	bls.n	8000e1e <__udivmoddi4+0xa6>
 8000d8e:	fab2 f282 	clz	r2, r2
 8000d92:	b142      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d94:	f1c2 0020 	rsb	r0, r2, #32
 8000d98:	fa24 f000 	lsr.w	r0, r4, r0
 8000d9c:	4091      	lsls	r1, r2
 8000d9e:	4097      	lsls	r7, r2
 8000da0:	ea40 0c01 	orr.w	ip, r0, r1
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbbc f6f8 	udiv	r6, ip, r8
 8000db0:	fa1f fe87 	uxth.w	lr, r7
 8000db4:	fb08 c116 	mls	r1, r8, r6, ip
 8000db8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 8119 	bcs.w	8001000 <__udivmoddi4+0x288>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8116 	bls.w	8001000 <__udivmoddi4+0x288>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	193c      	adds	r4, r7, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8105 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	f240 8102 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000e00:	3802      	subs	r0, #2
 8000e02:	443c      	add	r4, r7
 8000e04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e08:	eba4 040e 	sub.w	r4, r4, lr
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	b902      	cbnz	r2, 8000e22 <__udivmoddi4+0xaa>
 8000e20:	deff      	udf	#255	; 0xff
 8000e22:	fab2 f282 	clz	r2, r2
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d150      	bne.n	8000ecc <__udivmoddi4+0x154>
 8000e2a:	1bcb      	subs	r3, r1, r7
 8000e2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e30:	fa1f f887 	uxth.w	r8, r7
 8000e34:	2601      	movs	r6, #1
 8000e36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e3a:	0c21      	lsrs	r1, r4, #16
 8000e3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e44:	fb08 f30c 	mul.w	r3, r8, ip
 8000e48:	428b      	cmp	r3, r1
 8000e4a:	d907      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000e4c:	1879      	adds	r1, r7, r1
 8000e4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e52:	d202      	bcs.n	8000e5a <__udivmoddi4+0xe2>
 8000e54:	428b      	cmp	r3, r1
 8000e56:	f200 80e9 	bhi.w	800102c <__udivmoddi4+0x2b4>
 8000e5a:	4684      	mov	ip, r0
 8000e5c:	1ac9      	subs	r1, r1, r3
 8000e5e:	b2a3      	uxth	r3, r4
 8000e60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e6c:	fb08 f800 	mul.w	r8, r8, r0
 8000e70:	45a0      	cmp	r8, r4
 8000e72:	d907      	bls.n	8000e84 <__udivmoddi4+0x10c>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e7a:	d202      	bcs.n	8000e82 <__udivmoddi4+0x10a>
 8000e7c:	45a0      	cmp	r8, r4
 8000e7e:	f200 80d9 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e82:	4618      	mov	r0, r3
 8000e84:	eba4 0408 	sub.w	r4, r4, r8
 8000e88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e8c:	e7bf      	b.n	8000e0e <__udivmoddi4+0x96>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d909      	bls.n	8000ea6 <__udivmoddi4+0x12e>
 8000e92:	2d00      	cmp	r5, #0
 8000e94:	f000 80b1 	beq.w	8000ffa <__udivmoddi4+0x282>
 8000e98:	2600      	movs	r6, #0
 8000e9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	4631      	mov	r1, r6
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f683 	clz	r6, r3
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x1cc>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0x140>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80b8 	bhi.w	8001028 <__udivmoddi4+0x2b0>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb61 0103 	sbc.w	r1, r1, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	468c      	mov	ip, r1
 8000ec2:	2d00      	cmp	r5, #0
 8000ec4:	d0a8      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000ec6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eca:	e7a5      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ed4:	4097      	lsls	r7, r2
 8000ed6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ede:	40d9      	lsrs	r1, r3
 8000ee0:	4330      	orrs	r0, r6
 8000ee2:	0c03      	lsrs	r3, r0, #16
 8000ee4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ee8:	fa1f f887 	uxth.w	r8, r7
 8000eec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ef0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ef4:	fb06 f108 	mul.w	r1, r6, r8
 8000ef8:	4299      	cmp	r1, r3
 8000efa:	fa04 f402 	lsl.w	r4, r4, r2
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x19c>
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f06:	f080 808d 	bcs.w	8001024 <__udivmoddi4+0x2ac>
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	f240 808a 	bls.w	8001024 <__udivmoddi4+0x2ac>
 8000f10:	3e02      	subs	r6, #2
 8000f12:	443b      	add	r3, r7
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b281      	uxth	r1, r0
 8000f18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f24:	fb00 f308 	mul.w	r3, r0, r8
 8000f28:	428b      	cmp	r3, r1
 8000f2a:	d907      	bls.n	8000f3c <__udivmoddi4+0x1c4>
 8000f2c:	1879      	adds	r1, r7, r1
 8000f2e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f32:	d273      	bcs.n	800101c <__udivmoddi4+0x2a4>
 8000f34:	428b      	cmp	r3, r1
 8000f36:	d971      	bls.n	800101c <__udivmoddi4+0x2a4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	4439      	add	r1, r7
 8000f3c:	1acb      	subs	r3, r1, r3
 8000f3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f42:	e778      	b.n	8000e36 <__udivmoddi4+0xbe>
 8000f44:	f1c6 0c20 	rsb	ip, r6, #32
 8000f48:	fa03 f406 	lsl.w	r4, r3, r6
 8000f4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f50:	431c      	orrs	r4, r3
 8000f52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f56:	fa01 f306 	lsl.w	r3, r1, r6
 8000f5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f62:	431f      	orrs	r7, r3
 8000f64:	0c3b      	lsrs	r3, r7, #16
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fa1f f884 	uxth.w	r8, r4
 8000f6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f76:	fb09 fa08 	mul.w	sl, r9, r8
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000f80:	fa00 f306 	lsl.w	r3, r0, r6
 8000f84:	d908      	bls.n	8000f98 <__udivmoddi4+0x220>
 8000f86:	1861      	adds	r1, r4, r1
 8000f88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f8c:	d248      	bcs.n	8001020 <__udivmoddi4+0x2a8>
 8000f8e:	458a      	cmp	sl, r1
 8000f90:	d946      	bls.n	8001020 <__udivmoddi4+0x2a8>
 8000f92:	f1a9 0902 	sub.w	r9, r9, #2
 8000f96:	4421      	add	r1, r4
 8000f98:	eba1 010a 	sub.w	r1, r1, sl
 8000f9c:	b2bf      	uxth	r7, r7
 8000f9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fa2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fa6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000faa:	fb00 f808 	mul.w	r8, r0, r8
 8000fae:	45b8      	cmp	r8, r7
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x24a>
 8000fb2:	19e7      	adds	r7, r4, r7
 8000fb4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb8:	d22e      	bcs.n	8001018 <__udivmoddi4+0x2a0>
 8000fba:	45b8      	cmp	r8, r7
 8000fbc:	d92c      	bls.n	8001018 <__udivmoddi4+0x2a0>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	4427      	add	r7, r4
 8000fc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fc6:	eba7 0708 	sub.w	r7, r7, r8
 8000fca:	fba0 8902 	umull	r8, r9, r0, r2
 8000fce:	454f      	cmp	r7, r9
 8000fd0:	46c6      	mov	lr, r8
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	d31a      	bcc.n	800100c <__udivmoddi4+0x294>
 8000fd6:	d017      	beq.n	8001008 <__udivmoddi4+0x290>
 8000fd8:	b15d      	cbz	r5, 8000ff2 <__udivmoddi4+0x27a>
 8000fda:	ebb3 020e 	subs.w	r2, r3, lr
 8000fde:	eb67 0701 	sbc.w	r7, r7, r1
 8000fe2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fe6:	40f2      	lsrs	r2, r6
 8000fe8:	ea4c 0202 	orr.w	r2, ip, r2
 8000fec:	40f7      	lsrs	r7, r6
 8000fee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ff2:	2600      	movs	r6, #0
 8000ff4:	4631      	mov	r1, r6
 8000ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffa:	462e      	mov	r6, r5
 8000ffc:	4628      	mov	r0, r5
 8000ffe:	e70b      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001000:	4606      	mov	r6, r0
 8001002:	e6e9      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001004:	4618      	mov	r0, r3
 8001006:	e6fd      	b.n	8000e04 <__udivmoddi4+0x8c>
 8001008:	4543      	cmp	r3, r8
 800100a:	d2e5      	bcs.n	8000fd8 <__udivmoddi4+0x260>
 800100c:	ebb8 0e02 	subs.w	lr, r8, r2
 8001010:	eb69 0104 	sbc.w	r1, r9, r4
 8001014:	3801      	subs	r0, #1
 8001016:	e7df      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001018:	4608      	mov	r0, r1
 800101a:	e7d2      	b.n	8000fc2 <__udivmoddi4+0x24a>
 800101c:	4660      	mov	r0, ip
 800101e:	e78d      	b.n	8000f3c <__udivmoddi4+0x1c4>
 8001020:	4681      	mov	r9, r0
 8001022:	e7b9      	b.n	8000f98 <__udivmoddi4+0x220>
 8001024:	4666      	mov	r6, ip
 8001026:	e775      	b.n	8000f14 <__udivmoddi4+0x19c>
 8001028:	4630      	mov	r0, r6
 800102a:	e74a      	b.n	8000ec2 <__udivmoddi4+0x14a>
 800102c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001030:	4439      	add	r1, r7
 8001032:	e713      	b.n	8000e5c <__udivmoddi4+0xe4>
 8001034:	3802      	subs	r0, #2
 8001036:	443c      	add	r4, r7
 8001038:	e724      	b.n	8000e84 <__udivmoddi4+0x10c>
 800103a:	bf00      	nop

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	font = font_t;
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <GFX_SetFont+0x1c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000610 	.word	0x20000610

08001060 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af02      	add	r7, sp, #8
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	4611      	mov	r1, r2
 800106c:	461a      	mov	r2, r3
 800106e:	460b      	mov	r3, r1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	4613      	mov	r3, r2
 8001074:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	2b7e      	cmp	r3, #126	; 0x7e
 800107a:	f200 80a3 	bhi.w	80011c4 <GFX_DrawChar+0x164>

	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]
 8001082:	e096      	b.n	80011b2 <GFX_DrawChar+0x152>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2]; // Takie this line, (chr-0x20) = move 20 chars back,
 8001084:	4b51      	ldr	r3, [pc, #324]	; (80011cc <GFX_DrawChar+0x16c>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	3b20      	subs	r3, #32
 800108c:	494f      	ldr	r1, [pc, #316]	; (80011cc <GFX_DrawChar+0x16c>)
 800108e:	6809      	ldr	r1, [r1, #0]
 8001090:	3101      	adds	r1, #1
 8001092:	7809      	ldrb	r1, [r1, #0]
 8001094:	fb01 f103 	mul.w	r1, r1, r3
 8001098:	7dfb      	ldrb	r3, [r7, #23]
 800109a:	440b      	add	r3, r1
 800109c:	3302      	adds	r3, #2
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 80010a4:	2300      	movs	r3, #0
 80010a6:	757b      	strb	r3, [r7, #21]
 80010a8:	e078      	b.n	800119c <GFX_DrawChar+0x13c>
        {
            if(line & 1) // Check last pixel in line
 80010aa:	7dbb      	ldrb	r3, [r7, #22]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d032      	beq.n	800111a <GFX_DrawChar+0xba>
            {
            	if(size == 1)
 80010b4:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <GFX_DrawChar+0x170>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d113      	bne.n	80010e4 <GFX_DrawChar+0x84>
            		GFX_DrawPixel(x+i, y+j, color); // Draw this pixel
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	4413      	add	r3, r2
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	b218      	sxth	r0, r3
 80010ca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4413      	add	r3, r2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	b21b      	sxth	r3, r3
 80010da:	79ba      	ldrb	r2, [r7, #6]
 80010dc:	4619      	mov	r1, r3
 80010de:	f000 f9d9 	bl	8001494 <SSD1306_DrawPixel>
 80010e2:	e052      	b.n	800118a <GFX_DrawChar+0x12a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color); // Or bigger pixel
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	4a3a      	ldr	r2, [pc, #232]	; (80011d0 <GFX_DrawChar+0x170>)
 80010e8:	7812      	ldrb	r2, [r2, #0]
 80010ea:	fb02 f203 	mul.w	r2, r2, r3
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	18d0      	adds	r0, r2, r3
 80010f2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010f6:	4a36      	ldr	r2, [pc, #216]	; (80011d0 <GFX_DrawChar+0x170>)
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	fb02 f203 	mul.w	r2, r2, r3
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	18d1      	adds	r1, r2, r3
 8001102:	4b33      	ldr	r3, [pc, #204]	; (80011d0 <GFX_DrawChar+0x170>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b29a      	uxth	r2, r3
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <GFX_DrawChar+0x170>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b29c      	uxth	r4, r3
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	9300      	str	r3, [sp, #0]
 8001112:	4623      	mov	r3, r4
 8001114:	f000 f960 	bl	80013d8 <GFX_DrawFillRectangle>
 8001118:	e037      	b.n	800118a <GFX_DrawChar+0x12a>
            }
            else if(background == 0)
 800111a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111e:	2b00      	cmp	r3, #0
 8001120:	d133      	bne.n	800118a <GFX_DrawChar+0x12a>
            {
            	if(size == 1)
 8001122:	4b2b      	ldr	r3, [pc, #172]	; (80011d0 <GFX_DrawChar+0x170>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d114      	bne.n	8001154 <GFX_DrawChar+0xf4>
					GFX_DrawPixel(x+i, y+j, background); // Draw black BG
 800112a:	7dfb      	ldrb	r3, [r7, #23]
 800112c:	b29a      	uxth	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	b29b      	uxth	r3, r3
 8001132:	4413      	add	r3, r2
 8001134:	b29b      	uxth	r3, r3
 8001136:	b218      	sxth	r0, r3
 8001138:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800113c:	b29a      	uxth	r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4413      	add	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21b      	sxth	r3, r3
 8001148:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800114c:	4619      	mov	r1, r3
 800114e:	f000 f9a1 	bl	8001494 <SSD1306_DrawPixel>
 8001152:	e01a      	b.n	800118a <GFX_DrawChar+0x12a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background); // Or bigger
 8001154:	7dfb      	ldrb	r3, [r7, #23]
 8001156:	4a1e      	ldr	r2, [pc, #120]	; (80011d0 <GFX_DrawChar+0x170>)
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	fb02 f203 	mul.w	r2, r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	18d0      	adds	r0, r2, r3
 8001162:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001166:	4a1a      	ldr	r2, [pc, #104]	; (80011d0 <GFX_DrawChar+0x170>)
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	fb02 f203 	mul.w	r2, r2, r3
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	18d1      	adds	r1, r2, r3
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <GFX_DrawChar+0x170>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	b29a      	uxth	r2, r3
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <GFX_DrawChar+0x170>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29c      	uxth	r4, r3
 800117e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	4623      	mov	r3, r4
 8001186:	f000 f927 	bl	80013d8 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1) // For each pixel in column
 800118a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	3301      	adds	r3, #1
 8001192:	b2db      	uxtb	r3, r3
 8001194:	757b      	strb	r3, [r7, #21]
 8001196:	7dbb      	ldrb	r3, [r7, #22]
 8001198:	085b      	lsrs	r3, r3, #1
 800119a:	75bb      	strb	r3, [r7, #22]
 800119c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <GFX_DrawChar+0x16c>)
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	7812      	ldrb	r2, [r2, #0]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	f6ff af7f 	blt.w	80010aa <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ ) // Each column (Width)
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	3301      	adds	r3, #1
 80011b0:	75fb      	strb	r3, [r7, #23]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <GFX_DrawChar+0x16c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	3301      	adds	r3, #1
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	7dfa      	ldrb	r2, [r7, #23]
 80011bc:	429a      	cmp	r2, r3
 80011be:	f4ff af61 	bcc.w	8001084 <GFX_DrawChar+0x24>
 80011c2:	e000      	b.n	80011c6 <GFX_DrawChar+0x166>
	if(chr > 0x7E) return; // chr > '~'
 80011c4:	bf00      	nop
            }
        }
    }
}
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd90      	pop	{r4, r7, pc}
 80011cc:	20000610 	.word	0x20000610
 80011d0:	20000000 	.word	0x20000000

080011d4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af02      	add	r7, sp, #8
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
 80011e0:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	617b      	str	r3, [r7, #20]

	char znak;
	znak = *str;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	74fb      	strb	r3, [r7, #19]

	while(*str++)
 80011ec:	e03e      	b.n	800126c <GFX_DrawString+0x98>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background); // Draw current char
 80011ee:	78f9      	ldrb	r1, [r7, #3]
 80011f0:	7cfa      	ldrb	r2, [r7, #19]
 80011f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	460b      	mov	r3, r1
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ff2f 	bl	8001060 <GFX_DrawChar>

		x_tmp += ((uint8_t)font[1] * size) + 1; // Move X drawing pointer do char width + 1 (space)
 8001202:	4b20      	ldr	r3, [pc, #128]	; (8001284 <GFX_DrawString+0xb0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <GFX_DrawString+0xb4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	fb03 f302 	mul.w	r3, r3, r2
 8001214:	3301      	adds	r3, #1
 8001216:	697a      	ldr	r2, [r7, #20]
 8001218:	4413      	add	r3, r2
 800121a:	617b      	str	r3, [r7, #20]

		if(background == 0) // Draw black space if needed
 800121c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d120      	bne.n	8001266 <GFX_DrawString+0x92>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 8001224:	2300      	movs	r3, #0
 8001226:	74bb      	strb	r3, [r7, #18]
 8001228:	e012      	b.n	8001250 <GFX_DrawString+0x7c>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b218      	sxth	r0, r3
 8001234:	7cbb      	ldrb	r3, [r7, #18]
 8001236:	b29a      	uxth	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	b29b      	uxth	r3, r3
 800123c:	4413      	add	r3, r2
 800123e:	b29b      	uxth	r3, r3
 8001240:	b21b      	sxth	r3, r3
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	f000 f925 	bl	8001494 <SSD1306_DrawPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800124a:	7cbb      	ldrb	r3, [r7, #18]
 800124c:	3301      	adds	r3, #1
 800124e:	74bb      	strb	r3, [r7, #18]
 8001250:	7cba      	ldrb	r2, [r7, #18]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <GFX_DrawString+0xb0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <GFX_DrawString+0xb4>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	fb03 f301 	mul.w	r3, r3, r1
 8001262:	429a      	cmp	r2, r3
 8001264:	dbe1      	blt.n	800122a <GFX_DrawString+0x56>
			}
		}

		znak = *str; // Next char
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1ba      	bne.n	80011ee <GFX_DrawString+0x1a>
	}
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000610 	.word	0x20000610
 8001288:	20000000 	.word	0x20000000

0800128c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08c      	sub	sp, #48	; 0x30
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80012a4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1acb      	subs	r3, r1, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bfb8      	it	lt
 80012b2:	425b      	neglt	r3, r3
 80012b4:	429a      	cmp	r2, r3
 80012b6:	bfcc      	ite	gt
 80012b8:	2301      	movgt	r3, #1
 80012ba:	2300      	movle	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 80012c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d00b      	beq.n	80012e0 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	623b      	str	r3, [r7, #32]
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dd0b      	ble.n	8001300 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	b29a      	uxth	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	b29b      	uxth	r3, r3
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b29b      	uxth	r3, r3
 800130c:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	bfb8      	it	lt
 8001318:	425b      	neglt	r3, r3
 800131a:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 800131c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001320:	0fda      	lsrs	r2, r3, #31
 8001322:	4413      	add	r3, r2
 8001324:	105b      	asrs	r3, r3, #1
 8001326:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	429a      	cmp	r2, r3
 800132e:	da02      	bge.n	8001336 <GFX_WriteLine+0xaa>
	        ystep = 1;
 8001330:	2301      	movs	r3, #1
 8001332:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001334:	e030      	b.n	8001398 <GFX_WriteLine+0x10c>
	    } else {
	        ystep = -1;
 8001336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 800133c:	e02c      	b.n	8001398 <GFX_WriteLine+0x10c>
	        if (steep) {
 800133e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <GFX_WriteLine+0xce>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	b21b      	sxth	r3, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	b211      	sxth	r1, r2
 800134e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f89e 	bl	8001494 <SSD1306_DrawPixel>
 8001358:	e008      	b.n	800136c <GFX_WriteLine+0xe0>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	b211      	sxth	r1, r2
 8001362:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001366:	4618      	mov	r0, r3
 8001368:	f000 f894 	bl	8001494 <SSD1306_DrawPixel>
	        }
	        err -= dy;
 800136c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800136e:	8abb      	ldrh	r3, [r7, #20]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	b29b      	uxth	r3, r3
 8001374:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 8001376:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800137a:	2b00      	cmp	r3, #0
 800137c:	da09      	bge.n	8001392 <GFX_WriteLine+0x106>
	            y_start += ystep;
 800137e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	4413      	add	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001388:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800138a:	8afb      	ldrh	r3, [r7, #22]
 800138c:	4413      	add	r3, r2
 800138e:	b29b      	uxth	r3, r3
 8001390:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3301      	adds	r3, #1
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	ddce      	ble.n	800133e <GFX_WriteLine+0xb2>
	        }
	    }
}
 80013a0:	bf00      	nop
 80013a2:	bf00      	nop
 80013a4:	3730      	adds	r7, #48	; 0x30
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af02      	add	r7, sp, #8
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 80013b8:	68ba      	ldr	r2, [r7, #8]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4413      	add	r3, r2
 80013be:	1e5a      	subs	r2, r3, #1
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ff5e 	bl	800128c <GFX_WriteLine>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	460b      	mov	r3, r1
 80013e8:	80fb      	strh	r3, [r7, #6]
 80013ea:	4613      	mov	r3, r2
 80013ec:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80013f4:	88ba      	ldrh	r2, [r7, #4]
 80013f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffd4 	bl	80013aa <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	88fa      	ldrh	r2, [r7, #6]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbef      	blt.n	80013f4 <GFX_DrawFillRectangle+0x1c>
    }

}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <SSD1306_Command>:
static I2C_HandleTypeDef *oled_i2c;

static uint8_t buffer[SSD1306_BUFFER_SIZE];

static void SSD1306_Command(uint8_t Command)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af04      	add	r7, sp, #16
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	// dajemy memwrite bo traktujemy komende albo data jako rejestr (0x00 lub 0x40 bodajze)
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS<<1, 0x00, 1, &Command, 1, SSD1306_TIMEOUT);
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <SSD1306_Command+0x30>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001432:	9302      	str	r3, [sp, #8]
 8001434:	2301      	movs	r3, #1
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	1dfb      	adds	r3, r7, #7
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	2301      	movs	r3, #1
 800143e:	2200      	movs	r2, #0
 8001440:	2178      	movs	r1, #120	; 0x78
 8001442:	f003 f897 	bl	8004574 <HAL_I2C_Mem_Write>
	//oled, adres przesuniety o 1 bo hal tak przyjmuje, komendy pod 0x00, rejestry sa jedno bajtowe, komenda, 1 bajt, timeout
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000200 	.word	0x20000200

08001454 <SSD1306_Data>:

static void SSD1306_Data(uint8_t *Data, uint16_t Size)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af02      	add	r7, sp, #8
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	807b      	strh	r3, [r7, #2]
#ifdef SSD1306_USE_DMA

	if(oled_i2c->hdmatx->State == HAL_DMA_STATE_READY)
 8001460:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <SSD1306_Data+0x3c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001466:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800146a:	b2db      	uxtb	r3, r3
 800146c:	2b01      	cmp	r3, #1
 800146e:	d10a      	bne.n	8001486 <SSD1306_Data+0x32>
	{
		HAL_I2C_Mem_Write_DMA(oled_i2c, SSD1306_ADDRESS<<1, 0x40, 1, Data, Size);
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <SSD1306_Data+0x3c>)
 8001472:	6818      	ldr	r0, [r3, #0]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	9301      	str	r3, [sp, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	2301      	movs	r3, #1
 800147e:	2240      	movs	r2, #64	; 0x40
 8001480:	2178      	movs	r1, #120	; 0x78
 8001482:	f003 fb97 	bl	8004bb4 <HAL_I2C_Mem_Write_DMA>
	}

#else
	HAL_I2C_Mem_Write(oled_i2c, SSD1306_ADDRESS<<1, 0x40, 1, Data, Size, SSD1306_TIMEOUT);
#endif
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000200 	.word	0x20000200

08001494 <SSD1306_DrawPixel>:

//
// Functions
//
void SSD1306_DrawPixel(int16_t x, int16_t y, uint8_t Color)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
 800149e:	460b      	mov	r3, r1
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	70fb      	strb	r3, [r7, #3]
  if ((x < 0) || (x >= SSD1306_LCDWIDTH) || (y < 0) || (y >= SSD1306_LCDHEIGHT))
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db79      	blt.n	80015a2 <SSD1306_DrawPixel+0x10e>
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	2b7f      	cmp	r3, #127	; 0x7f
 80014b4:	dc75      	bgt.n	80015a2 <SSD1306_DrawPixel+0x10e>
 80014b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db71      	blt.n	80015a2 <SSD1306_DrawPixel+0x10e>
 80014be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c2:	2b3f      	cmp	r3, #63	; 0x3f
 80014c4:	dc6d      	bgt.n	80015a2 <SSD1306_DrawPixel+0x10e>
	  return;

    switch (Color)
 80014c6:	78fb      	ldrb	r3, [r7, #3]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d049      	beq.n	8001560 <SSD1306_DrawPixel+0xcc>
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	dc69      	bgt.n	80015a4 <SSD1306_DrawPixel+0x110>
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d022      	beq.n	800151a <SSD1306_DrawPixel+0x86>
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d165      	bne.n	80015a4 <SSD1306_DrawPixel+0x110>
    {
    case SSD1306_WHITE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] |= (1 << (y & 7));
 80014d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da00      	bge.n	80014e6 <SSD1306_DrawPixel+0x52>
 80014e4:	3307      	adds	r3, #7
 80014e6:	10db      	asrs	r3, r3, #3
 80014e8:	b218      	sxth	r0, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	01db      	lsls	r3, r3, #7
 80014ee:	4413      	add	r3, r2
 80014f0:	4a2f      	ldr	r2, [pc, #188]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 80014f2:	5cd3      	ldrb	r3, [r2, r3]
 80014f4:	b25a      	sxtb	r2, r3
 80014f6:	88bb      	ldrh	r3, [r7, #4]
 80014f8:	f003 0307 	and.w	r3, r3, #7
 80014fc:	2101      	movs	r1, #1
 80014fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	4313      	orrs	r3, r2
 8001506:	b259      	sxtb	r1, r3
 8001508:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800150c:	4603      	mov	r3, r0
 800150e:	01db      	lsls	r3, r3, #7
 8001510:	4413      	add	r3, r2
 8001512:	b2c9      	uxtb	r1, r1
 8001514:	4a26      	ldr	r2, [pc, #152]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 8001516:	54d1      	strb	r1, [r2, r3]
      break;
 8001518:	e044      	b.n	80015a4 <SSD1306_DrawPixel+0x110>
    case SSD1306_BLACK:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] &= ~(1 << (y & 7));
 800151a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800151e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da00      	bge.n	8001528 <SSD1306_DrawPixel+0x94>
 8001526:	3307      	adds	r3, #7
 8001528:	10db      	asrs	r3, r3, #3
 800152a:	b218      	sxth	r0, r3
 800152c:	4603      	mov	r3, r0
 800152e:	01db      	lsls	r3, r3, #7
 8001530:	4413      	add	r3, r2
 8001532:	4a1f      	ldr	r2, [pc, #124]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 8001534:	5cd3      	ldrb	r3, [r2, r3]
 8001536:	b25a      	sxtb	r2, r3
 8001538:	88bb      	ldrh	r3, [r7, #4]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	2101      	movs	r1, #1
 8001540:	fa01 f303 	lsl.w	r3, r1, r3
 8001544:	b25b      	sxtb	r3, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	b25b      	sxtb	r3, r3
 800154a:	4013      	ands	r3, r2
 800154c:	b259      	sxtb	r1, r3
 800154e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001552:	4603      	mov	r3, r0
 8001554:	01db      	lsls	r3, r3, #7
 8001556:	4413      	add	r3, r2
 8001558:	b2c9      	uxtb	r1, r1
 800155a:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 800155c:	54d1      	strb	r1, [r2, r3]
      break;
 800155e:	e021      	b.n	80015a4 <SSD1306_DrawPixel+0x110>
    case SSD1306_INVERSE:
      buffer[x + (y / 8) * SSD1306_LCDWIDTH] ^= (1 << (y & 7));
 8001560:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001564:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	da00      	bge.n	800156e <SSD1306_DrawPixel+0xda>
 800156c:	3307      	adds	r3, #7
 800156e:	10db      	asrs	r3, r3, #3
 8001570:	b218      	sxth	r0, r3
 8001572:	4603      	mov	r3, r0
 8001574:	01db      	lsls	r3, r3, #7
 8001576:	4413      	add	r3, r2
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 800157a:	5cd3      	ldrb	r3, [r2, r3]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	88bb      	ldrh	r3, [r7, #4]
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	2101      	movs	r1, #1
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	b25b      	sxtb	r3, r3
 800158c:	4053      	eors	r3, r2
 800158e:	b259      	sxtb	r1, r3
 8001590:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001594:	4603      	mov	r3, r0
 8001596:	01db      	lsls	r3, r3, #7
 8001598:	4413      	add	r3, r2
 800159a:	b2c9      	uxtb	r1, r1
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <SSD1306_DrawPixel+0x11c>)
 800159e:	54d1      	strb	r1, [r2, r3]
      break;
 80015a0:	e000      	b.n	80015a4 <SSD1306_DrawPixel+0x110>
	  return;
 80015a2:	bf00      	nop
    }
}
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000204 	.word	0x20000204

080015b4 <SSD1306_Clear>:

void SSD1306_Clear(uint8_t Color)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
	switch(Color)
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d008      	beq.n	80015d6 <SSD1306_Clear+0x22>
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10d      	bne.n	80015e4 <SSD1306_Clear+0x30>
	{
	case SSD1306_WHITE:
		memset(buffer, 0xFF, SSD1306_BUFFER_SIZE);
 80015c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015cc:	21ff      	movs	r1, #255	; 0xff
 80015ce:	4807      	ldr	r0, [pc, #28]	; (80015ec <SSD1306_Clear+0x38>)
 80015d0:	f007 ff2e 	bl	8009430 <memset>
		break;
 80015d4:	e006      	b.n	80015e4 <SSD1306_Clear+0x30>
	case SSD1306_BLACK:
		memset(buffer, 0x00, SSD1306_BUFFER_SIZE);
 80015d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015da:	2100      	movs	r1, #0
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <SSD1306_Clear+0x38>)
 80015de:	f007 ff27 	bl	8009430 <memset>
		break;
 80015e2:	bf00      	nop
	}
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000204 	.word	0x20000204

080015f0 <SSD1306_Display>:
void SSD1306_Display(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
	SSD1306_Command(SSD1306_PAGEADDR);
 80015f4:	2022      	movs	r0, #34	; 0x22
 80015f6:	f7ff ff13 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0); // Page start address
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff ff10 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0xFF); // Page end (not really, but works here)
 8001600:	20ff      	movs	r0, #255	; 0xff
 8001602:	f7ff ff0d 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_COLUMNADDR);
 8001606:	2021      	movs	r0, #33	; 0x21
 8001608:	f7ff ff0a 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0); // Column start address
 800160c:	2000      	movs	r0, #0
 800160e:	f7ff ff07 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_LCDWIDTH - 1); // Column end address
 8001612:	207f      	movs	r0, #127	; 0x7f
 8001614:	f7ff ff04 	bl	8001420 <SSD1306_Command>
	// to powyzej to sekwencja startowa ustawiajaca wskaznik na poczatek

	SSD1306_Data(buffer, SSD1306_BUFFER_SIZE);
 8001618:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <SSD1306_Display+0x38>)
 800161e:	f7ff ff19 	bl	8001454 <SSD1306_Data>

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000204 	.word	0x20000204

0800162c <SSD1306_Init>:

void SSD1306_Init(I2C_HandleTypeDef *i2c)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
	oled_i2c = i2c;
 8001634:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <SSD1306_Init+0xb4>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]

	SSD1306_Command(SSD1306_DISPLAYOFF); // 0xAE
 800163a:	20ae      	movs	r0, #174	; 0xae
 800163c:	f7ff fef0 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETDISPLAYCLOCKDIV); // 0xD5
 8001640:	20d5      	movs	r0, #213	; 0xd5
 8001642:	f7ff feed 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x80); // the suggested ratio 0x80
 8001646:	2080      	movs	r0, #128	; 0x80
 8001648:	f7ff feea 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETMULTIPLEX); // 0xA8
 800164c:	20a8      	movs	r0, #168	; 0xa8
 800164e:	f7ff fee7 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_LCDHEIGHT - 1);
 8001652:	203f      	movs	r0, #63	; 0x3f
 8001654:	f7ff fee4 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETDISPLAYOFFSET); // 0xD3
 8001658:	20d3      	movs	r0, #211	; 0xd3
 800165a:	f7ff fee1 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x00); // no offset
 800165e:	2000      	movs	r0, #0
 8001660:	f7ff fede 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETSTARTLINE | 0x0); // line #0
 8001664:	2040      	movs	r0, #64	; 0x40
 8001666:	f7ff fedb 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_CHARGEPUMP); // 0x8D
 800166a:	208d      	movs	r0, #141	; 0x8d
 800166c:	f7ff fed8 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x14); //bo chcemy uzywac pompy a nie zewnetrznego zasilania
 8001670:	2014      	movs	r0, #20
 8001672:	f7ff fed5 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_MEMORYMODE); // 0x20
 8001676:	2020      	movs	r0, #32
 8001678:	f7ff fed2 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x00); // 0x0 act like ks0108
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff fecf 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_SEGREMAP | 0x1);
 8001682:	20a1      	movs	r0, #161	; 0xa1
 8001684:	f7ff fecc 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_COMSCANDEC);
 8001688:	20c8      	movs	r0, #200	; 0xc8
 800168a:	f7ff fec9 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETCOMPINS);
 800168e:	20da      	movs	r0, #218	; 0xda
 8001690:	f7ff fec6 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x12);
 8001694:	2012      	movs	r0, #18
 8001696:	f7ff fec3 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_SETCONTRAST);
 800169a:	2081      	movs	r0, #129	; 0x81
 800169c:	f7ff fec0 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0xFF); // maksymalny kontrast
 80016a0:	20ff      	movs	r0, #255	; 0xff
 80016a2:	f7ff febd 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETPRECHARGE); // 0xd9
 80016a6:	20d9      	movs	r0, #217	; 0xd9
 80016a8:	f7ff feba 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0xF1);
 80016ac:	20f1      	movs	r0, #241	; 0xf1
 80016ae:	f7ff feb7 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_SETVCOMDETECT); // 0xDB
 80016b2:	20db      	movs	r0, #219	; 0xdb
 80016b4:	f7ff feb4 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(0x40);
 80016b8:	2040      	movs	r0, #64	; 0x40
 80016ba:	f7ff feb1 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_DISPLAYALLON_RESUME); // 0xA4
 80016be:	20a4      	movs	r0, #164	; 0xa4
 80016c0:	f7ff feae 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_NORMALDISPLAY);       // 0xA6
 80016c4:	20a6      	movs	r0, #166	; 0xa6
 80016c6:	f7ff feab 	bl	8001420 <SSD1306_Command>
	SSD1306_Command(SSD1306_DEACTIVATE_SCROLL);
 80016ca:	202e      	movs	r0, #46	; 0x2e
 80016cc:	f7ff fea8 	bl	8001420 <SSD1306_Command>

	SSD1306_Command(SSD1306_DISPLAYON); // Main screen turn on
 80016d0:	20af      	movs	r0, #175	; 0xaf
 80016d2:	f7ff fea5 	bl	8001420 <SSD1306_Command>
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000200 	.word	0x20000200

080016e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ea:	463b      	mov	r3, r7
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <MX_ADC1_Init+0x9c>)
 80016f8:	4a22      	ldr	r2, [pc, #136]	; (8001784 <MX_ADC1_Init+0xa0>)
 80016fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016fc:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MX_ADC1_Init+0x9c>)
 80016fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001702:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800170a:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MX_ADC1_Init+0x9c>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001712:	2200      	movs	r2, #0
 8001714:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001724:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001726:	4b16      	ldr	r3, [pc, #88]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001728:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001730:	2200      	movs	r2, #0
 8001732:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001736:	2201      	movs	r2, #1
 8001738:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_ADC1_Init+0x9c>)
 800173c:	2201      	movs	r2, #1
 800173e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001742:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_ADC1_Init+0x9c>)
 8001744:	2201      	movs	r2, #1
 8001746:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_ADC1_Init+0x9c>)
 800174a:	f001 f9f7 	bl	8002b3c <HAL_ADC_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001754:	f000 ff20 	bl	8002598 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001758:	2300      	movs	r3, #0
 800175a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800175c:	2301      	movs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001764:	463b      	mov	r3, r7
 8001766:	4619      	mov	r1, r3
 8001768:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_ADC1_Init+0x9c>)
 800176a:	f001 fc99 	bl	80030a0 <HAL_ADC_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001774:	f000 ff10 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000614 	.word	0x20000614
 8001784:	40012000 	.word	0x40012000

08001788 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2f      	ldr	r2, [pc, #188]	; (8001864 <HAL_ADC_MspInit+0xdc>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d157      	bne.n	800185a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b2e      	ldr	r3, [pc, #184]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a2d      	ldr	r2, [pc, #180]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b27      	ldr	r3, [pc, #156]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_ADC_MspInit+0xe0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017e2:	2301      	movs	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017e6:	2303      	movs	r3, #3
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	481d      	ldr	r0, [pc, #116]	; (800186c <HAL_ADC_MspInit+0xe4>)
 80017f6:	f002 fbcb 	bl	8003f90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 80017fc:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <HAL_ADC_MspInit+0xec>)
 80017fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001818:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800181a:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 800181c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001820:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001822:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001828:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 800182c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001830:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001838:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 800183a:	2200      	movs	r2, #0
 800183c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800183e:	480c      	ldr	r0, [pc, #48]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001840:	f001 fffa 	bl	8003838 <HAL_DMA_Init>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800184a:	f000 fea5 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001852:	639a      	str	r2, [r3, #56]	; 0x38
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_ADC_MspInit+0xe8>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40012000 	.word	0x40012000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000
 8001870:	2000065c 	.word	0x2000065c
 8001874:	40026410 	.word	0x40026410

08001878 <Read8>:

//
// Read 8 bits from BMP280 from Register
//
uint8_t Read8(BMP280_t *bmp, uint8_t Register)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af04      	add	r7, sp, #16
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	791b      	ldrb	r3, [r3, #4]
 800188c:	b29b      	uxth	r3, r3
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	b299      	uxth	r1, r3
 8001892:	78fb      	ldrb	r3, [r7, #3]
 8001894:	b29a      	uxth	r2, r3
 8001896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2301      	movs	r3, #1
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	f107 030f 	add.w	r3, r7, #15
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	f002 ff5e 	bl	8004768 <HAL_I2C_Mem_Read>

	return Value;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <Write8>:

//
// Write 8 bits to BMP280 to Register
//
void Write8(BMP280_t *bmp, uint8_t Register, uint8_t Value)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af04      	add	r7, sp, #16
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	460b      	mov	r3, r1
 80018c0:	70fb      	strb	r3, [r7, #3]
 80018c2:	4613      	mov	r3, r2
 80018c4:	70bb      	strb	r3, [r7, #2]
	HAL_I2C_Mem_Write(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, &Value, 1, BMP280_I2C_TIMEOUT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	b299      	uxth	r1, r3
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2301      	movs	r3, #1
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	1cbb      	adds	r3, r7, #2
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	f002 fe44 	bl	8004574 <HAL_I2C_Mem_Write>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <Read16>:

//
// Read 16 bits from BMP280 from Register
//
uint16_t Read16(BMP280_t *bmp, uint8_t Register)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af04      	add	r7, sp, #16
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	460b      	mov	r3, r1
 80018fe:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 2, BMP280_I2C_TIMEOUT);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	791b      	ldrb	r3, [r3, #4]
 8001908:	b29b      	uxth	r3, r3
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	b299      	uxth	r1, r3
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	b29a      	uxth	r2, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	9302      	str	r3, [sp, #8]
 8001918:	2302      	movs	r3, #2
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2301      	movs	r3, #1
 8001924:	f002 ff20 	bl	8004768 <HAL_I2C_Mem_Read>

	return ((Value[1] << 8) | Value[0]);
 8001928:	7b7b      	ldrb	r3, [r7, #13]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b21a      	sxth	r2, r3
 800192e:	7b3b      	ldrb	r3, [r7, #12]
 8001930:	b21b      	sxth	r3, r3
 8001932:	4313      	orrs	r3, r2
 8001934:	b21b      	sxth	r3, r3
 8001936:	b29b      	uxth	r3, r3
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <Read24>:

//
// Read 24 bits from BMP280 from Register
//
uint32_t Read24(BMP280_t *bmp, uint8_t Register)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[3];

	HAL_I2C_Mem_Read(bmp->bmp_i2c, ((bmp->Address)<<1), Register, 1, Value, 3, BMP280_I2C_TIMEOUT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6818      	ldr	r0, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	791b      	ldrb	r3, [r3, #4]
 8001954:	b29b      	uxth	r3, r3
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	b299      	uxth	r1, r3
 800195a:	78fb      	ldrb	r3, [r7, #3]
 800195c:	b29a      	uxth	r2, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2303      	movs	r3, #3
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2301      	movs	r3, #1
 8001970:	f002 fefa 	bl	8004768 <HAL_I2C_Mem_Read>

	return ((Value[0] << 16) | (Value[1] << 8) | Value[2]);
 8001974:	7b3b      	ldrb	r3, [r7, #12]
 8001976:	041a      	lsls	r2, r3, #16
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	4313      	orrs	r3, r2
 800197e:	7bba      	ldrb	r2, [r7, #14]
 8001980:	4313      	orrs	r3, r2
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <BMP280_SetMode>:

//
// Set mode - Forced or Normal - in Control register
//
void BMP280_SetMode(BMP280_t *bmp, uint8_t Mode)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b084      	sub	sp, #16
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
 8001992:	460b      	mov	r3, r1
 8001994:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(Mode > 3) Mode = 3;
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	2b03      	cmp	r3, #3
 800199a:	d901      	bls.n	80019a0 <BMP280_SetMode+0x16>
 800199c:	2303      	movs	r3, #3
 800199e:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80019a0:	21f4      	movs	r1, #244	; 0xf4
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff68 	bl	8001878 <Read8>
 80019a8:	4603      	mov	r3, r0
 80019aa:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xFC; // Tmp (xxxx xx00)
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	f023 0303 	bic.w	r3, r3, #3
 80019b2:	73fb      	strb	r3, [r7, #15]
	Tmp |= Mode & 0x03;
 80019b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	b25a      	sxtb	r2, r3
 80019be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 80019c8:	7bfb      	ldrb	r3, [r7, #15]
 80019ca:	461a      	mov	r2, r3
 80019cc:	21f4      	movs	r1, #244	; 0xf4
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff71 	bl	80018b6 <Write8>
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <BMP280_SetPressureOversampling>:

//
// Set pressure oversampling in Control register
//
void BMP280_SetPressureOversampling(BMP280_t *bmp, uint8_t POversampling)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(POversampling > 5) POversampling = 5;
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	2b05      	cmp	r3, #5
 80019ec:	d901      	bls.n	80019f2 <BMP280_SetPressureOversampling+0x16>
 80019ee:	2305      	movs	r3, #5
 80019f0:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 80019f2:	21f4      	movs	r1, #244	; 0xf4
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff3f 	bl	8001878 <Read8>
 80019fa:	4603      	mov	r3, r0
 80019fc:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0xE3; // Tmp (xxx0 00xx)
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
 8001a00:	f023 031c 	bic.w	r3, r3, #28
 8001a04:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((POversampling << 2) & 0x1C);  // (0001 1100)
 8001a06:	78fb      	ldrb	r3, [r7, #3]
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	f003 031c 	and.w	r3, r3, #28
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	21f4      	movs	r1, #244	; 0xf4
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff ff47 	bl	80018b6 <Write8>
}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <BMP280_SetTemperatureOversampling>:

//
// Set temperature oversampling in Control register
//
void BMP280_SetTemperatureOversampling(BMP280_t *bmp, uint8_t TOversampling)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
	uint8_t Tmp;

	if(TOversampling > 5) TOversampling = 5;
 8001a3c:	78fb      	ldrb	r3, [r7, #3]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d901      	bls.n	8001a46 <BMP280_SetTemperatureOversampling+0x16>
 8001a42:	2305      	movs	r3, #5
 8001a44:	70fb      	strb	r3, [r7, #3]

	Tmp = Read8(bmp, BMP280_CONTROL);
 8001a46:	21f4      	movs	r1, #244	; 0xf4
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ff15 	bl	8001878 <Read8>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	73fb      	strb	r3, [r7, #15]

	Tmp = Tmp & 0x1F; // Tmp (000x xxxx)
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	73fb      	strb	r3, [r7, #15]
	Tmp |= ((TOversampling << 5) & 0xE0) ;  // (1110 0000)
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	015b      	lsls	r3, r3, #5
 8001a5e:	b25a      	sxtb	r2, r3
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	b25b      	sxtb	r3, r3
 8001a68:	73fb      	strb	r3, [r7, #15]

	Write8(bmp, BMP280_CONTROL, Tmp);
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	21f4      	movs	r1, #244	; 0xf4
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f7ff ff20 	bl	80018b6 <Write8>
}
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <BMP280_ReadTemperatureRaw>:

//
// Read Raw temperature data from BMP280
//
int32_t BMP280_ReadTemperatureRaw(BMP280_t *bmp)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b084      	sub	sp, #16
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_TEMPDATA);
 8001a86:	21fa      	movs	r1, #250	; 0xfa
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff59 	bl	8001940 <Read24>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	111b      	asrs	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001a98:	68fb      	ldr	r3, [r7, #12]
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <BMP280_ReadPressureRaw>:

//
// Read Raw pressure data from BMP280
//
int32_t BMP280_ReadPressureRaw(BMP280_t *bmp)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	int32_t Tmp;

	Tmp = (int32_t)Read24(bmp, BMP280_PRESSUREDATA);
 8001aaa:	21f7      	movs	r1, #247	; 0xf7
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff47 	bl	8001940 <Read24>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60fb      	str	r3, [r7, #12]

	Tmp >>= 4; // Move 4 left due to such storing (Datasheet).
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	111b      	asrs	r3, r3, #4
 8001aba:	60fb      	str	r3, [r7, #12]

	return Tmp;
 8001abc:	68fb      	ldr	r3, [r7, #12]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <BMP280_ReadTemperature>:
//
// Read and calculate temperature
// Whole procedure is taken from BMP280 Datasheet
//
float BMP280_ReadTemperature(BMP280_t *bmp)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;

	int32_t adc_T;

	adc_T = BMP280_ReadTemperatureRaw(bmp);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ffd4 	bl	8001a7e <BMP280_ReadTemperatureRaw>
 8001ad6:	6178      	str	r0, [r7, #20]

	var1 = ((((adc_T>>3) - ((int32_t)(bmp->t1)<<1))) * ((int32_t)(bmp->t2))) >> 11;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	10da      	asrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	8b5b      	ldrh	r3, [r3, #26]
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	12db      	asrs	r3, r3, #11
 8001af0:	613b      	str	r3, [r7, #16]

	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	111b      	asrs	r3, r3, #4
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	8b52      	ldrh	r2, [r2, #26]
 8001afa:	1a9b      	subs	r3, r3, r2
 8001afc:	697a      	ldr	r2, [r7, #20]
 8001afe:	1112      	asrs	r2, r2, #4
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	8b49      	ldrh	r1, [r1, #26]
 8001b04:	1a52      	subs	r2, r2, r1
 8001b06:	fb02 f303 	mul.w	r3, r2, r3
 8001b0a:	131b      	asrs	r3, r3, #12
	((int32_t)(bmp->t3))) >> 14;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
	var2 = (((((adc_T>>4) - ((int32_t)(bmp->t1))) * ((adc_T>>4) - ((int32_t)(bmp->t1)))) >> 12) *
 8001b12:	fb02 f303 	mul.w	r3, r2, r3
 8001b16:	139b      	asrs	r3, r3, #14
 8001b18:	60fb      	str	r3, [r7, #12]

	bmp->t_fine = var1 + var2;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	441a      	add	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	621a      	str	r2, [r3, #32]

	T = ((bmp->t_fine) * 5 + 128) >> 8;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1a      	ldr	r2, [r3, #32]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4413      	add	r3, r2
 8001b2e:	3380      	adds	r3, #128	; 0x80
 8001b30:	121b      	asrs	r3, r3, #8
 8001b32:	60bb      	str	r3, [r7, #8]

	return (float)(T/100.0);
 8001b34:	68b8      	ldr	r0, [r7, #8]
 8001b36:	f7fe fd75 	bl	8000624 <__aeabi_i2d>
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <BMP280_ReadTemperature+0x98>)
 8001b40:	f7fe ff04 	bl	800094c <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f8ac 	bl	8000ca8 <__aeabi_d2f>
 8001b50:	4603      	mov	r3, r0
 8001b52:	ee07 3a90 	vmov	s15, r3
}
 8001b56:	eeb0 0a67 	vmov.f32	s0, s15
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40590000 	.word	0x40590000

08001b64 <BMP280_ReadPressureAndTemperature>:
//
// Read and calculate temperature & pressure
// Whole procedure is taken from BMP280 Datasheet
//
uint8_t BMP280_ReadPressureAndTemperature(BMP280_t *bmp, float *Pressure, float *Temperature)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b088      	sub	sp, #32
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	// Have to read temperature first
	*Temperature = BMP280_ReadTemperature(bmp);
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff ffa9 	bl	8001ac8 <BMP280_ReadTemperature>
 8001b76:	eef0 7a40 	vmov.f32	s15, s0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	edc3 7a00 	vstr	s15, [r3]

	int32_t var1, var2;
	uint32_t p;

	var1 = (((int32_t)(bmp->t_fine))>>1) - (int32_t)64000;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	105b      	asrs	r3, r3, #1
 8001b86:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8001b8a:	61bb      	str	r3, [r7, #24]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((int32_t)(bmp->p6));
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	109b      	asrs	r3, r3, #2
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	1092      	asrs	r2, r2, #2
 8001b94:	fb02 f303 	mul.w	r3, r2, r3
 8001b98:	12db      	asrs	r3, r3, #11
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	617b      	str	r3, [r7, #20]
	var2 = var2 + ((var1*((int32_t)(bmp->p5)))<<1);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001bac:	461a      	mov	r2, r3
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	fb03 f302 	mul.w	r3, r3, r2
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4413      	add	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
	var2 = (var2>>2)+(((int32_t)(bmp->p4))<<16);
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	109a      	asrs	r2, r3, #2
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
	var1 = ((((bmp->p3) * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((int32_t)(bmp->p2)) * var1)>>1))>>18;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	109b      	asrs	r3, r3, #2
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	1092      	asrs	r2, r2, #2
 8001bdc:	fb02 f303 	mul.w	r3, r2, r3
 8001be0:	135b      	asrs	r3, r3, #13
 8001be2:	fb03 f301 	mul.w	r3, r3, r1
 8001be6:	10da      	asrs	r2, r3, #3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fb03 f301 	mul.w	r3, r3, r1
 8001bf6:	105b      	asrs	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	149b      	asrs	r3, r3, #18
 8001bfc:	61bb      	str	r3, [r7, #24]
	var1 =((((32768+var1))*((int32_t)(bmp->p1)))>>15);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	8b92      	ldrh	r2, [r2, #28]
 8001c08:	fb02 f303 	mul.w	r3, r2, r3
 8001c0c:	13db      	asrs	r3, r3, #15
 8001c0e:	61bb      	str	r3, [r7, #24]

	if (var1 == 0)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <BMP280_ReadPressureAndTemperature+0xb6>
	{
		return 1; // avoid exception caused by division by zero
 8001c16:	2301      	movs	r3, #1
 8001c18:	e054      	b.n	8001cc4 <BMP280_ReadPressureAndTemperature+0x160>
	}

	// Raw pressure from BMP's ADC
	int32_t adc_P = BMP280_ReadPressureRaw(bmp);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff ff41 	bl	8001aa2 <BMP280_ReadPressureRaw>
 8001c20:	6138      	str	r0, [r7, #16]

	p = (((int32_t)(((int32_t)1048576)-adc_P)-(var2>>12)))*3125;
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	f5c3 1280 	rsb	r2, r3, #1048576	; 0x100000
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	131b      	asrs	r3, r3, #12
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f640 4235 	movw	r2, #3125	; 0xc35
 8001c32:	fb02 f303 	mul.w	r3, r2, r3
 8001c36:	61fb      	str	r3, [r7, #28]
	if (p < 0x80000000)
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	db06      	blt.n	8001c4c <BMP280_ReadPressureAndTemperature+0xe8>
	{
		p = (p << 1) / ((uint32_t)var1);
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	005a      	lsls	r2, r3, #1
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	e005      	b.n	8001c58 <BMP280_ReadPressureAndTemperature+0xf4>
	}
	else
	{
		p = (p / (uint32_t)var1) * 2;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	69fa      	ldr	r2, [r7, #28]
 8001c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	61fb      	str	r3, [r7, #28]
	}
	var1 = (((int32_t)(bmp->p9)) * ((int32_t)(((p>>3) * (p>>3))>>13)))>>12;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08db      	lsrs	r3, r3, #3
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	fb02 f303 	mul.w	r3, r2, r3
 8001c6c:	0b5b      	lsrs	r3, r3, #13
 8001c6e:	fb03 f301 	mul.w	r3, r3, r1
 8001c72:	131b      	asrs	r3, r3, #12
 8001c74:	61bb      	str	r3, [r7, #24]
	var2 = (((int32_t)(p>>2)) * ((int32_t)(bmp->p8)))>>13;
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c82:	fb03 f302 	mul.w	r3, r3, r2
 8001c86:	135b      	asrs	r3, r3, #13
 8001c88:	617b      	str	r3, [r7, #20]

	p = (uint32_t)((int32_t)p + ((var1 + var2 + (bmp->p7)) >> 4));
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	4413      	add	r3, r2
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001c96:	4413      	add	r3, r2
 8001c98:	111a      	asrs	r2, r3, #4
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	61fb      	str	r3, [r7, #28]

	// Convert Pa to hPa
	*Pressure = (float)(p/100.0);
 8001ca0:	69f8      	ldr	r0, [r7, #28]
 8001ca2:	f7fe fcaf 	bl	8000604 <__aeabi_ui2d>
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <BMP280_ReadPressureAndTemperature+0x168>)
 8001cac:	f7fe fe4e 	bl	800094c <__aeabi_ddiv>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe fff6 	bl	8000ca8 <__aeabi_d2f>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	601a      	str	r2, [r3, #0]

	return 0;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3720      	adds	r7, #32
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40590000 	.word	0x40590000

08001cd0 <BMP280_Init>:

//
// Init
//
uint8_t BMP280_Init(BMP280_t *bmp, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	71fb      	strb	r3, [r7, #7]
	uint8_t ChipID;

	// Save I2C handler and address
	bmp->bmp_i2c = i2c;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	601a      	str	r2, [r3, #0]
	bmp->Address = Address;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	711a      	strb	r2, [r3, #4]

	//Read Chip ID
	ChipID = Read8(bmp, BMP280_CHIPID);
 8001cea:	21d0      	movs	r1, #208	; 0xd0
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fdc3 	bl	8001878 <Read8>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	75fb      	strb	r3, [r7, #23]

	// Check if ID is correct
	if(ChipID != 0x58)
 8001cf6:	7dfb      	ldrb	r3, [r7, #23]
 8001cf8:	2b58      	cmp	r3, #88	; 0x58
 8001cfa:	d001      	beq.n	8001d00 <BMP280_Init+0x30>
	{
		return 1;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e06c      	b.n	8001dda <BMP280_Init+0x10a>
	}

	// Read all coefficients
	bmp->t1 = Read16(bmp, BMP280_DIG_T1);
 8001d00:	2188      	movs	r1, #136	; 0x88
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff fdf6 	bl	80018f4 <Read16>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	835a      	strh	r2, [r3, #26]
	bmp->t2 = Read16(bmp, BMP280_DIG_T2);
 8001d10:	218a      	movs	r1, #138	; 0x8a
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	f7ff fdee 	bl	80018f4 <Read16>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	80da      	strh	r2, [r3, #6]
	bmp->t3 = Read16(bmp, BMP280_DIG_T3);
 8001d20:	218c      	movs	r1, #140	; 0x8c
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f7ff fde6 	bl	80018f4 <Read16>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	811a      	strh	r2, [r3, #8]

	bmp->p1 = Read16(bmp, BMP280_DIG_P1);
 8001d30:	218e      	movs	r1, #142	; 0x8e
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fdde 	bl	80018f4 <Read16>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	839a      	strh	r2, [r3, #28]
	bmp->p2 = Read16(bmp, BMP280_DIG_P2);
 8001d40:	2190      	movs	r1, #144	; 0x90
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fdd6 	bl	80018f4 <Read16>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b21a      	sxth	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	815a      	strh	r2, [r3, #10]
	bmp->p3 = Read16(bmp, BMP280_DIG_P3);
 8001d50:	2192      	movs	r1, #146	; 0x92
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f7ff fdce 	bl	80018f4 <Read16>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	819a      	strh	r2, [r3, #12]
	bmp->p4 = Read16(bmp, BMP280_DIG_P4);
 8001d60:	2194      	movs	r1, #148	; 0x94
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7ff fdc6 	bl	80018f4 <Read16>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	b21a      	sxth	r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	81da      	strh	r2, [r3, #14]
	bmp->p5 = Read16(bmp, BMP280_DIG_P5);
 8001d70:	2196      	movs	r1, #150	; 0x96
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f7ff fdbe 	bl	80018f4 <Read16>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b21a      	sxth	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	821a      	strh	r2, [r3, #16]
	bmp->p6 = Read16(bmp, BMP280_DIG_P6);
 8001d80:	2198      	movs	r1, #152	; 0x98
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fdb6 	bl	80018f4 <Read16>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	825a      	strh	r2, [r3, #18]
	bmp->p7 = Read16(bmp, BMP280_DIG_P7);
 8001d90:	219a      	movs	r1, #154	; 0x9a
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f7ff fdae 	bl	80018f4 <Read16>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	b21a      	sxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	829a      	strh	r2, [r3, #20]
	bmp->p8 = Read16(bmp, BMP280_DIG_P8);
 8001da0:	219c      	movs	r1, #156	; 0x9c
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f7ff fda6 	bl	80018f4 <Read16>
 8001da8:	4603      	mov	r3, r0
 8001daa:	b21a      	sxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	82da      	strh	r2, [r3, #22]
	bmp->p9 = Read16(bmp, BMP280_DIG_P9);
 8001db0:	219e      	movs	r1, #158	; 0x9e
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7ff fd9e 	bl	80018f4 <Read16>
 8001db8:	4603      	mov	r3, r0
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	831a      	strh	r2, [r3, #24]

	// Set base settings
	BMP280_SetTemperatureOversampling(bmp, BMP280_TEMPERATURE_20BIT);
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	68f8      	ldr	r0, [r7, #12]
 8001dc4:	f7ff fe34 	bl	8001a30 <BMP280_SetTemperatureOversampling>
	BMP280_SetPressureOversampling(bmp, BMP280_ULTRAHIGHRES);
 8001dc8:	2105      	movs	r1, #5
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fe06 	bl	80019dc <BMP280_SetPressureOversampling>
	BMP280_SetMode(bmp, BMP280_NORMALMODE);
 8001dd0:	2103      	movs	r1, #3
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fdd9 	bl	800198a <BMP280_SetMode>

	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a0f      	ldr	r2, [pc, #60]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a08      	ldr	r2, [pc, #32]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <MX_DMA_Init+0x4c>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a2c      	ldr	r2, [pc, #176]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_GPIO_Init+0xd0>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	607b      	str	r3, [r7, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2120      	movs	r1, #32
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <MX_GPIO_Init+0xd4>)
 8001ec0:	f002 f9fa 	bl	80042b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001eca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4619      	mov	r1, r3
 8001eda:	480c      	ldr	r0, [pc, #48]	; (8001f0c <MX_GPIO_Init+0xd8>)
 8001edc:	f002 f858 	bl	8003f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <MX_GPIO_Init+0xd4>)
 8001ef8:	f002 f84a 	bl	8003f90 <HAL_GPIO_Init>

}
 8001efc:	bf00      	nop
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020800 	.word	0x40020800

08001f10 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f16:	4a13      	ldr	r2, [pc, #76]	; (8001f64 <MX_I2C1_Init+0x54>)
 8001f18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f1c:	4a12      	ldr	r2, [pc, #72]	; (8001f68 <MX_I2C1_Init+0x58>)
 8001f1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f20:	4b0f      	ldr	r3, [pc, #60]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f40:	4b07      	ldr	r3, [pc, #28]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f4c:	4804      	ldr	r0, [pc, #16]	; (8001f60 <MX_I2C1_Init+0x50>)
 8001f4e:	f002 f9cd 	bl	80042ec <HAL_I2C_Init>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f58:	f000 fb1e 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000071c 	.word	0x2000071c
 8001f64:	40005400 	.word	0x40005400
 8001f68:	00061a80 	.word	0x00061a80

08001f6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a30      	ldr	r2, [pc, #192]	; (800204c <HAL_I2C_MspInit+0xe0>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d15a      	bne.n	8002044 <HAL_I2C_MspInit+0xd8>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001faa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb0:	2312      	movs	r3, #18
 8001fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4823      	ldr	r0, [pc, #140]	; (8002054 <HAL_I2C_MspInit+0xe8>)
 8001fc8:	f001 ffe2 	bl	8003f90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	4a1e      	ldr	r2, [pc, #120]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fda:	6413      	str	r3, [r2, #64]	; 0x40
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <HAL_I2C_MspInit+0xe4>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001fe8:	4b1b      	ldr	r3, [pc, #108]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8001fea:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_I2C_MspInit+0xf0>)
 8001fec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8001ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ff4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffc:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002008:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_I2C_MspInit+0xec>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002010:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002016:	4b10      	ldr	r3, [pc, #64]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_I2C_MspInit+0xec>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002024:	2200      	movs	r2, #0
 8002026:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002028:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_I2C_MspInit+0xec>)
 800202a:	f001 fc05 	bl	8003838 <HAL_DMA_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002034:	f000 fab0 	bl	8002598 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a07      	ldr	r2, [pc, #28]	; (8002058 <HAL_I2C_MspInit+0xec>)
 800203c:	635a      	str	r2, [r3, #52]	; 0x34
 800203e:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_I2C_MspInit+0xec>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002044:	bf00      	nop
 8002046:	3728      	adds	r7, #40	; 0x28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40005400 	.word	0x40005400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020400 	.word	0x40020400
 8002058:	200006bc 	.word	0x200006bc
 800205c:	400260a0 	.word	0x400260a0

08002060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002066:	f000 fcf7 	bl	8002a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800206a:	f000 f8eb 	bl	8002244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206e:	f7ff fee1 	bl	8001e34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002072:	f7ff feb7 	bl	8001de4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002076:	f000 fc53 	bl	8002920 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800207a:	f7ff ff49 	bl	8001f10 <MX_I2C1_Init>
  MX_ADC1_Init();
 800207e:	f7ff fb31 	bl	80016e4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002082:	f000 fbe1 	bl	8002848 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002086:	f000 f94b 	bl	8002320 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Init(&Bmp280, &hi2c1, 0x76);
 800208a:	2276      	movs	r2, #118	; 0x76
 800208c:	495c      	ldr	r1, [pc, #368]	; (8002200 <main+0x1a0>)
 800208e:	485d      	ldr	r0, [pc, #372]	; (8002204 <main+0x1a4>)
 8002090:	f7ff fe1e 	bl	8001cd0 <BMP280_Init>
  SSD1306_Init(&hi2c1);
 8002094:	485a      	ldr	r0, [pc, #360]	; (8002200 <main+0x1a0>)
 8002096:	f7ff fac9 	bl	800162c <SSD1306_Init>

  GFX_SetFont(font_8x5);
 800209a:	485b      	ldr	r0, [pc, #364]	; (8002208 <main+0x1a8>)
 800209c:	f7fe ffd0 	bl	8001040 <GFX_SetFont>
  SSD1306_Clear(SSD1306_BLACK);
 80020a0:	2000      	movs	r0, #0
 80020a2:	f7ff fa87 	bl	80015b4 <SSD1306_Clear>
  SSD1306_Display();
 80020a6:	f7ff faa3 	bl	80015f0 <SSD1306_Display>

  HAL_TIM_Base_Start(&htim2);
 80020aa:	4858      	ldr	r0, [pc, #352]	; (800220c <main+0x1ac>)
 80020ac:	f005 fcc6 	bl	8007a3c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&AdcMicrophone, FFT_SAMPLES);
 80020b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b4:	4956      	ldr	r1, [pc, #344]	; (8002210 <main+0x1b0>)
 80020b6:	4857      	ldr	r0, [pc, #348]	; (8002214 <main+0x1b4>)
 80020b8:	f000 fec4 	bl	8002e44 <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&FFTHandler, FFT_SAMPLES);	// funkcja inicjalizujaca, dostepna na stronie tam tez opisane
 80020bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020c0:	4855      	ldr	r0, [pc, #340]	; (8002218 <main+0x1b8>)
 80020c2:	f006 f9b7 	bl	8008434 <arm_rfft_fast_init_f32>

  SoftTimerBmp = HAL_GetTick();
 80020c6:	f000 fd2d 	bl	8002b24 <HAL_GetTick>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4a53      	ldr	r2, [pc, #332]	; (800221c <main+0x1bc>)
 80020ce:	6013      	str	r3, [r2, #0]
  SoftTimerOled = HAL_GetTick();
 80020d0:	f000 fd28 	bl	8002b24 <HAL_GetTick>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <main+0x1c0>)
 80020d8:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // FFT
	  if(SamplesReady == 1)
 80020da:	4b52      	ldr	r3, [pc, #328]	; (8002224 <main+0x1c4>)
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d11c      	bne.n	800211e <main+0xbe>
	  {
		  SamplesReady = 0;
 80020e4:	4b4f      	ldr	r3, [pc, #316]	; (8002224 <main+0x1c4>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]

		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)		// przepisujemy zebrane dane do innego bufora zeby probki caly czas mogly byc
 80020ea:	2300      	movs	r3, #0
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	e010      	b.n	8002112 <main+0xb2>
		  {												// zbierane w tle a tutaj na tych bedziemy sobie dzialac
			  FFTInBuffer[i] = (float)AdcMicrophone[i];
 80020f0:	4a47      	ldr	r2, [pc, #284]	; (8002210 <main+0x1b0>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002100:	4a49      	ldr	r2, [pc, #292]	; (8002228 <main+0x1c8>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	edc3 7a00 	vstr	s15, [r3]
		  for(uint32_t i = 0; i < FFT_SAMPLES; i++)		// przepisujemy zebrane dane do innego bufora zeby probki caly czas mogly byc
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3301      	adds	r3, #1
 8002110:	607b      	str	r3, [r7, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002118:	d3ea      	bcc.n	80020f0 <main+0x90>
		  }
		  CalculateFFT();
 800211a:	f000 f957 	bl	80023cc <CalculateFFT>
	  }

	  // BMP
	  if((HAL_GetTick() - SoftTimerBmp) > 10)
 800211e:	f000 fd01 	bl	8002b24 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <main+0x1bc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b0a      	cmp	r3, #10
 800212c:	d910      	bls.n	8002150 <main+0xf0>
	  {
		  SoftTimerBmp = HAL_GetTick();
 800212e:	f000 fcf9 	bl	8002b24 <HAL_GetTick>
 8002132:	4603      	mov	r3, r0
 8002134:	4a39      	ldr	r2, [pc, #228]	; (800221c <main+0x1bc>)
 8002136:	6013      	str	r3, [r2, #0]

		  if(Bmp280.bmp_i2c->State == HAL_I2C_STATE_READY)
 8002138:	4b32      	ldr	r3, [pc, #200]	; (8002204 <main+0x1a4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	d104      	bne.n	8002150 <main+0xf0>
		  {
			  BMP280_ReadPressureAndTemperature(&Bmp280, &Pressure, &Temperature);
 8002146:	4a39      	ldr	r2, [pc, #228]	; (800222c <main+0x1cc>)
 8002148:	4939      	ldr	r1, [pc, #228]	; (8002230 <main+0x1d0>)
 800214a:	482e      	ldr	r0, [pc, #184]	; (8002204 <main+0x1a4>)
 800214c:	f7ff fd0a 	bl	8001b64 <BMP280_ReadPressureAndTemperature>
		  }
	  }

	  //OLED
	  if((HAL_GetTick() - SoftTimerOled) > 100)
 8002150:	f000 fce8 	bl	8002b24 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	4b32      	ldr	r3, [pc, #200]	; (8002220 <main+0x1c0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d9bc      	bls.n	80020da <main+0x7a>
	  {
		  SoftTimerOled = HAL_GetTick();
 8002160:	f000 fce0 	bl	8002b24 <HAL_GetTick>
 8002164:	4603      	mov	r3, r0
 8002166:	4a2e      	ldr	r2, [pc, #184]	; (8002220 <main+0x1c0>)
 8002168:	6013      	str	r3, [r2, #0]

		  SSD1306_Clear(SSD1306_BLACK);
 800216a:	2000      	movs	r0, #0
 800216c:	f7ff fa22 	bl	80015b4 <SSD1306_Clear>

		  sprintf(Message, "Pressure: %.2f", Pressure);
 8002170:	4b2f      	ldr	r3, [pc, #188]	; (8002230 <main+0x1d0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4618      	mov	r0, r3
 8002176:	f7fe fa67 	bl	8000648 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	492d      	ldr	r1, [pc, #180]	; (8002234 <main+0x1d4>)
 8002180:	482d      	ldr	r0, [pc, #180]	; (8002238 <main+0x1d8>)
 8002182:	f007 fdc7 	bl	8009d14 <siprintf>
		  GFX_DrawString(0, 0, Message, SSD1306_WHITE, 0);
 8002186:	2300      	movs	r3, #0
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	4a2a      	ldr	r2, [pc, #168]	; (8002238 <main+0x1d8>)
 800218e:	2100      	movs	r1, #0
 8002190:	2000      	movs	r0, #0
 8002192:	f7ff f81f 	bl	80011d4 <GFX_DrawString>
		  sprintf(Message, "Temperature: %.2f", Temperature);
 8002196:	4b25      	ldr	r3, [pc, #148]	; (800222c <main+0x1cc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fa54 	bl	8000648 <__aeabi_f2d>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4925      	ldr	r1, [pc, #148]	; (800223c <main+0x1dc>)
 80021a6:	4824      	ldr	r0, [pc, #144]	; (8002238 <main+0x1d8>)
 80021a8:	f007 fdb4 	bl	8009d14 <siprintf>
		  GFX_DrawString(0, 10, Message, SSD1306_WHITE, 0);
 80021ac:	2300      	movs	r3, #0
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2301      	movs	r3, #1
 80021b2:	4a21      	ldr	r2, [pc, #132]	; (8002238 <main+0x1d8>)
 80021b4:	210a      	movs	r1, #10
 80021b6:	2000      	movs	r0, #0
 80021b8:	f7ff f80c 	bl	80011d4 <GFX_DrawString>

			  // FFT
			  for(uint8_t i = 0; i < 10; i++) // Each frequency
 80021bc:	2300      	movs	r3, #0
 80021be:	70fb      	strb	r3, [r7, #3]
 80021c0:	e018      	b.n	80021f4 <main+0x194>
			  {
				  GFX_DrawFillRectangle(10+(i*11), 64-OutFreqArray[i], 10, OutFreqArray[i], SSD1306_WHITE);
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	f103 000a 	add.w	r0, r3, #10
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	4a1a      	ldr	r2, [pc, #104]	; (8002240 <main+0x1e0>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	4a18      	ldr	r2, [pc, #96]	; (8002240 <main+0x1e0>)
 80021e0:	5cd3      	ldrb	r3, [r2, r3]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2201      	movs	r2, #1
 80021e6:	9200      	str	r2, [sp, #0]
 80021e8:	220a      	movs	r2, #10
 80021ea:	f7ff f8f5 	bl	80013d8 <GFX_DrawFillRectangle>
			  for(uint8_t i = 0; i < 10; i++) // Each frequency
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	3301      	adds	r3, #1
 80021f2:	70fb      	strb	r3, [r7, #3]
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d9e3      	bls.n	80021c2 <main+0x162>
			  }

		  SSD1306_Display();
 80021fa:	f7ff f9f9 	bl	80015f0 <SSD1306_Display>
	  if(SamplesReady == 1)
 80021fe:	e76c      	b.n	80020da <main+0x7a>
 8002200:	2000071c 	.word	0x2000071c
 8002204:	20002fb4 	.word	0x20002fb4
 8002208:	0800c504 	.word	0x0800c504
 800220c:	20002fec 	.word	0x20002fec
 8002210:	2000178c 	.word	0x2000178c
 8002214:	20000614 	.word	0x20000614
 8002218:	20001774 	.word	0x20001774
 800221c:	20002fd8 	.word	0x20002fd8
 8002220:	20001fac 	.word	0x20001fac
 8002224:	20001fb0 	.word	0x20001fb0
 8002228:	20001fb4 	.word	0x20001fb4
 800222c:	20000770 	.word	0x20000770
 8002230:	20002fdc 	.word	0x20002fdc
 8002234:	0800c4e0 	.word	0x0800c4e0
 8002238:	20001f8c 	.word	0x20001f8c
 800223c:	0800c4f0 	.word	0x0800c4f0
 8002240:	20002fe0 	.word	0x20002fe0

08002244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b094      	sub	sp, #80	; 0x50
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 031c 	add.w	r3, r7, #28
 800224e:	2234      	movs	r2, #52	; 0x34
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f007 f8ec 	bl	8009430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <SystemClock_Config+0xd4>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	4a29      	ldr	r2, [pc, #164]	; (8002318 <SystemClock_Config+0xd4>)
 8002272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	; 0x40
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <SystemClock_Config+0xd4>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <SystemClock_Config+0xd8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002290:	4a22      	ldr	r2, [pc, #136]	; (800231c <SystemClock_Config+0xd8>)
 8002292:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <SystemClock_Config+0xd8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a0:	603b      	str	r3, [r7, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a8:	2301      	movs	r3, #1
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022ac:	2310      	movs	r3, #16
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022b0:	2302      	movs	r3, #2
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80022b8:	2310      	movs	r3, #16
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80022bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80022c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80022c2:	2304      	movs	r3, #4
 80022c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022c6:	2302      	movs	r3, #2
 80022c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022ca:	2302      	movs	r3, #2
 80022cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ce:	f107 031c 	add.w	r3, r7, #28
 80022d2:	4618      	mov	r0, r3
 80022d4:	f005 f8c4 	bl	8007460 <HAL_RCC_OscConfig>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80022de:	f000 f95b 	bl	8002598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e2:	230f      	movs	r3, #15
 80022e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e6:	2302      	movs	r3, #2
 80022e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	2102      	movs	r1, #2
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 fde2 	bl	8006ec8 <HAL_RCC_ClockConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800230a:	f000 f945 	bl	8002598 <Error_Handler>
  }
}
 800230e:	bf00      	nop
 8002310:	3750      	adds	r7, #80	; 0x50
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	40007000 	.word	0x40007000

08002320 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	2100      	movs	r1, #0
 8002328:	201f      	movs	r0, #31
 800232a:	f001 fa4e 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800232e:	201f      	movs	r0, #31
 8002330:	f001 fa67 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002334:	2200      	movs	r2, #0
 8002336:	2100      	movs	r1, #0
 8002338:	2011      	movs	r0, #17
 800233a:	f001 fa46 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800233e:	2011      	movs	r0, #17
 8002340:	f001 fa5f 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002344:	2200      	movs	r2, #0
 8002346:	2100      	movs	r1, #0
 8002348:	2038      	movs	r0, #56	; 0x38
 800234a:	f001 fa3e 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800234e:	2038      	movs	r0, #56	; 0x38
 8002350:	f001 fa57 	bl	8003802 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002354:	2200      	movs	r2, #0
 8002356:	2100      	movs	r1, #0
 8002358:	2012      	movs	r0, #18
 800235a:	f001 fa36 	bl	80037ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 800235e:	2012      	movs	r0, #18
 8002360:	f001 fa4f 	bl	8003802 <HAL_NVIC_EnableIRQ>
}
 8002364:	bf00      	nop
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a05      	ldr	r2, [pc, #20]	; (800238c <HAL_ADC_ConvCpltCallback+0x24>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d102      	bne.n	8002380 <HAL_ADC_ConvCpltCallback+0x18>
	{
		SamplesReady = 1;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <HAL_ADC_ConvCpltCallback+0x28>)
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
	}
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40012000 	.word	0x40012000
 8002390:	20001fb0 	.word	0x20001fb0

08002394 <complexABS>:
float complexABS(float real, float compl)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	ed87 0a01 	vstr	s0, [r7, #4]
 800239e:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real*real+compl*compl);
 80023a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80023a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023aa:	edd7 7a00 	vldr	s15, [r7]
 80023ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	f009 ff0d 	bl	800c1d8 <sqrtf>
 80023be:	eef0 7a40 	vmov.f32	s15, s0
}
 80023c2:	eeb0 0a67 	vmov.f32	s0, s15
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <CalculateFFT>:


void CalculateFFT(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	f5ad 5d80 	sub.w	sp, sp, #4096	; 0x1000
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
	arm_rfft_fast_f32(&FFTHandler, FFTInBuffer, FFTOutBuffer, 0);	// transformata mimo ze przyjmuje liczby rzeczywiste to na wyjsciu
 80023d6:	2300      	movs	r3, #0
 80023d8:	4a6b      	ldr	r2, [pc, #428]	; (8002588 <CalculateFFT+0x1bc>)
 80023da:	496c      	ldr	r1, [pc, #432]	; (800258c <CalculateFFT+0x1c0>)
 80023dc:	486c      	ldr	r0, [pc, #432]	; (8002590 <CalculateFFT+0x1c4>)
 80023de:	f006 f8ad 	bl	800853c <arm_rfft_fast_f32>
																	// daje liczby zespolone, dlatego trzeba to przeliczyc
	// to ponizej to wziete skads z neta, przeliczenie dla probek dzwiekowych tej transformaty na liczby rzeczywiste + decybele
	int Freqs[FFT_SAMPLES];
	int FreqPoint = 0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023e8:	f102 020c 	add.w	r2, r2, #12
 80023ec:	6013      	str	r3, [r2, #0]
	int Offset = 50; // variable noise floor offset
 80023ee:	2332      	movs	r3, #50	; 0x32
 80023f0:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80023f4:	f102 0204 	add.w	r2, r2, #4
 80023f8:	6013      	str	r3, [r2, #0]

	// calculate abs values and linear-to-dB
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 80023fa:	2300      	movs	r3, #0
 80023fc:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002400:	f102 0208 	add.w	r2, r2, #8
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	e067      	b.n	80024d8 <CalculateFFT+0x10c>
	{
		Freqs[FreqPoint] = (int)(20*log10f(complexABS(FFTOutBuffer[i], FFTOutBuffer[i+1]))) - Offset;
 8002408:	4a5f      	ldr	r2, [pc, #380]	; (8002588 <CalculateFFT+0x1bc>)
 800240a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800240e:	f103 0308 	add.w	r3, r3, #8
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002420:	f103 0308 	add.w	r3, r3, #8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	4a57      	ldr	r2, [pc, #348]	; (8002588 <CalculateFFT+0x1bc>)
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	ed93 7a00 	vldr	s14, [r3]
 8002432:	eef0 0a47 	vmov.f32	s1, s14
 8002436:	eeb0 0a67 	vmov.f32	s0, s15
 800243a:	f7ff ffab 	bl	8002394 <complexABS>
 800243e:	eef0 7a40 	vmov.f32	s15, s0
 8002442:	eeb0 0a67 	vmov.f32	s0, s15
 8002446:	f009 fe91 	bl	800c16c <log10f>
 800244a:	eef0 7a40 	vmov.f32	s15, s0
 800244e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800245a:	ee17 2a90 	vmov	r2, s15
 800245e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8002462:	f103 0304 	add.w	r3, r3, #4
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1ad1      	subs	r1, r2, r3
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	3b0c      	subs	r3, #12
 8002470:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002474:	f102 020c 	add.w	r2, r2, #12
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		if(Freqs[FreqPoint] < 0)
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	3b0c      	subs	r3, #12
 8002484:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002488:	f102 020c 	add.w	r2, r2, #12
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002492:	2b00      	cmp	r3, #0
 8002494:	da0a      	bge.n	80024ac <CalculateFFT+0xe0>
		{
			Freqs[FreqPoint] = 0;
 8002496:	f107 0310 	add.w	r3, r7, #16
 800249a:	3b0c      	subs	r3, #12
 800249c:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80024a0:	f102 020c 	add.w	r2, r2, #12
 80024a4:	6812      	ldr	r2, [r2, #0]
 80024a6:	2100      	movs	r1, #0
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		}
		FreqPoint++;
 80024ac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80024b0:	f103 030c 	add.w	r3, r3, #12
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80024bc:	f102 020c 	add.w	r2, r2, #12
 80024c0:	6013      	str	r3, [r2, #0]
	for (int i = 0; i < FFT_SAMPLES; i = i+2)
 80024c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80024c6:	f103 0308 	add.w	r3, r3, #8
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3302      	adds	r3, #2
 80024ce:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80024d2:	f102 0208 	add.w	r2, r2, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80024dc:	f103 0308 	add.w	r3, r3, #8
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e6:	db8f      	blt.n	8002408 <CalculateFFT+0x3c>
	}
	OutFreqArray[0] = (uint8_t)Freqs[1]; // 22 Hz
 80024e8:	f107 0310 	add.w	r3, r7, #16
 80024ec:	3b0c      	subs	r3, #12
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <CalculateFFT+0x1c8>)
 80024f4:	701a      	strb	r2, [r3, #0]
	OutFreqArray[1] = (uint8_t)Freqs[2]; // 63 Hz
 80024f6:	f107 0310 	add.w	r3, r7, #16
 80024fa:	3b0c      	subs	r3, #12
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <CalculateFFT+0x1c8>)
 8002502:	705a      	strb	r2, [r3, #1]
	OutFreqArray[2] = (uint8_t)Freqs[3]; // 125 Hz
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	3b0c      	subs	r3, #12
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <CalculateFFT+0x1c8>)
 8002510:	709a      	strb	r2, [r3, #2]
	OutFreqArray[3] = (uint8_t)Freqs[6]; // 250 Hz
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	3b0c      	subs	r3, #12
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <CalculateFFT+0x1c8>)
 800251e:	70da      	strb	r2, [r3, #3]
	OutFreqArray[4] = (uint8_t)Freqs[12]; // 500 Hz
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	3b0c      	subs	r3, #12
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	b2da      	uxtb	r2, r3
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <CalculateFFT+0x1c8>)
 800252c:	711a      	strb	r2, [r3, #4]
	OutFreqArray[5] = (uint8_t)Freqs[23]; // 1000 Hz
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	3b0c      	subs	r3, #12
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b16      	ldr	r3, [pc, #88]	; (8002594 <CalculateFFT+0x1c8>)
 800253a:	715a      	strb	r2, [r3, #5]
	OutFreqArray[6] = (uint8_t)Freqs[51]; // 2200 Hz
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	3b0c      	subs	r3, #12
 8002542:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b12      	ldr	r3, [pc, #72]	; (8002594 <CalculateFFT+0x1c8>)
 800254a:	719a      	strb	r2, [r3, #6]
	OutFreqArray[7] = (uint8_t)Freqs[104]; // 4500 Hz
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	3b0c      	subs	r3, #12
 8002552:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <CalculateFFT+0x1c8>)
 800255a:	71da      	strb	r2, [r3, #7]
	OutFreqArray[8] = (uint8_t)Freqs[207]; // 9000 Hz
 800255c:	f107 0310 	add.w	r3, r7, #16
 8002560:	3b0c      	subs	r3, #12
 8002562:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <CalculateFFT+0x1c8>)
 800256a:	721a      	strb	r2, [r3, #8]
	OutFreqArray[9] = (uint8_t)Freqs[344]; // 15000 Hz
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	3b0c      	subs	r3, #12
 8002572:	f8d3 3560 	ldr.w	r3, [r3, #1376]	; 0x560
 8002576:	b2da      	uxtb	r2, r3
 8002578:	4b06      	ldr	r3, [pc, #24]	; (8002594 <CalculateFFT+0x1c8>)
 800257a:	725a      	strb	r2, [r3, #9]
}
 800257c:	bf00      	nop
 800257e:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000774 	.word	0x20000774
 800258c:	20001fb4 	.word	0x20001fb4
 8002590:	20001774 	.word	0x20001774
 8002594:	20002fe0 	.word	0x20002fe0

08002598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800259c:	b672      	cpsid	i
}
 800259e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025a0:	e7fe      	b.n	80025a0 <Error_Handler+0x8>
	...

080025a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	4b10      	ldr	r3, [pc, #64]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a0f      	ldr	r2, [pc, #60]	; (80025f0 <HAL_MspInit+0x4c>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b0d      	ldr	r3, [pc, #52]	; (80025f0 <HAL_MspInit+0x4c>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	607b      	str	r3, [r7, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	603b      	str	r3, [r7, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_MspInit+0x4c>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	4a08      	ldr	r2, [pc, #32]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6413      	str	r3, [r2, #64]	; 0x40
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_MspInit+0x4c>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	603b      	str	r3, [r7, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80025e2:	2007      	movs	r0, #7
 80025e4:	f001 f8e6 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e8:	bf00      	nop
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <NMI_Handler+0x4>

080025fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <HardFault_Handler+0x4>

08002600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <MemManage_Handler+0x4>

08002606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <BusFault_Handler+0x4>

0800260c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <UsageFault_Handler+0x4>

08002612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002640:	f000 fa5c 	bl	8002afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}

08002648 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA1_Stream6_IRQHandler+0x10>)
 800264e:	f001 fa1b 	bl	8003a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200006bc 	.word	0x200006bc

0800265c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <ADC_IRQHandler+0x10>)
 8002662:	f000 faae 	bl	8002bc2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000614 	.word	0x20000614

08002670 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <I2C1_EV_IRQHandler+0x10>)
 8002676:	f002 fbff 	bl	8004e78 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	2000071c 	.word	0x2000071c

08002684 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA2_Stream0_IRQHandler+0x10>)
 800268a:	f001 f9fd 	bl	8003a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000065c 	.word	0x2000065c

08002698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
	return 1;
 800269c:	2301      	movs	r3, #1
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_kill>:

int _kill(int pid, int sig)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80026b2:	f006 fe93 	bl	80093dc <__errno>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2216      	movs	r2, #22
 80026ba:	601a      	str	r2, [r3, #0]
	return -1;
 80026bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <_exit>:

void _exit (int status)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ffe7 	bl	80026a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80026da:	e7fe      	b.n	80026da <_exit+0x12>

080026dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	e00a      	b.n	8002704 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026ee:	f3af 8000 	nop.w
 80026f2:	4601      	mov	r1, r0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	60ba      	str	r2, [r7, #8]
 80026fa:	b2ca      	uxtb	r2, r1
 80026fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	3301      	adds	r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	dbf0      	blt.n	80026ee <_read+0x12>
	}

return len;
 800270c:	687b      	ldr	r3, [r7, #4]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	2300      	movs	r3, #0
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	e009      	b.n	800273c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	60ba      	str	r2, [r7, #8]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3301      	adds	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	dbf1      	blt.n	8002728 <_write+0x12>
	}
	return len;
 8002744:	687b      	ldr	r3, [r7, #4]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <_close>:

int _close(int file)
{
 800274e:	b480      	push	{r7}
 8002750:	b083      	sub	sp, #12
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
	return -1;
 8002756:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275a:	4618      	mov	r0, r3
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002776:	605a      	str	r2, [r3, #4]
	return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <_isatty>:

int _isatty(int file)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	return 1;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
	return 0;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3714      	adds	r7, #20
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <_sbrk+0x5c>)
 80027c2:	4b15      	ldr	r3, [pc, #84]	; (8002818 <_sbrk+0x60>)
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027cc:	4b13      	ldr	r3, [pc, #76]	; (800281c <_sbrk+0x64>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027d4:	4b11      	ldr	r3, [pc, #68]	; (800281c <_sbrk+0x64>)
 80027d6:	4a12      	ldr	r2, [pc, #72]	; (8002820 <_sbrk+0x68>)
 80027d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <_sbrk+0x64>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d207      	bcs.n	80027f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e8:	f006 fdf8 	bl	80093dc <__errno>
 80027ec:	4603      	mov	r3, r0
 80027ee:	220c      	movs	r2, #12
 80027f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027f2:	f04f 33ff 	mov.w	r3, #4294967295
 80027f6:	e009      	b.n	800280c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <_sbrk+0x64>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027fe:	4b07      	ldr	r3, [pc, #28]	; (800281c <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	4a05      	ldr	r2, [pc, #20]	; (800281c <_sbrk+0x64>)
 8002808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800280a:	68fb      	ldr	r3, [r7, #12]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20020000 	.word	0x20020000
 8002818:	00000400 	.word	0x00000400
 800281c:	20000604 	.word	0x20000604
 8002820:	20003090 	.word	0x20003090

08002824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <SystemInit+0x20>)
 800282a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <SystemInit+0x20>)
 8002830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	e000ed00 	.word	0xe000ed00

08002848 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	f107 0308 	add.w	r3, r7, #8
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002864:	4b1d      	ldr	r3, [pc, #116]	; (80028dc <MX_TIM2_Init+0x94>)
 8002866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800286a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <MX_TIM2_Init+0x94>)
 800286e:	2202      	movs	r2, #2
 8002870:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <MX_TIM2_Init+0x94>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 634;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <MX_TIM2_Init+0x94>)
 800287a:	f240 227a 	movw	r2, #634	; 0x27a
 800287e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002880:	4b16      	ldr	r3, [pc, #88]	; (80028dc <MX_TIM2_Init+0x94>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <MX_TIM2_Init+0x94>)
 8002888:	2200      	movs	r2, #0
 800288a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800288c:	4813      	ldr	r0, [pc, #76]	; (80028dc <MX_TIM2_Init+0x94>)
 800288e:	f005 f885 	bl	800799c <HAL_TIM_Base_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002898:	f7ff fe7e 	bl	8002598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a2:	f107 0308 	add.w	r3, r7, #8
 80028a6:	4619      	mov	r1, r3
 80028a8:	480c      	ldr	r0, [pc, #48]	; (80028dc <MX_TIM2_Init+0x94>)
 80028aa:	f005 f92f 	bl	8007b0c <HAL_TIM_ConfigClockSource>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80028b4:	f7ff fe70 	bl	8002598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80028b8:	2320      	movs	r3, #32
 80028ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c0:	463b      	mov	r3, r7
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	; (80028dc <MX_TIM2_Init+0x94>)
 80028c6:	f005 fb23 	bl	8007f10 <HAL_TIMEx_MasterConfigSynchronization>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80028d0:	f7ff fe62 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20002fec 	.word	0x20002fec

080028e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f0:	d10d      	bne.n	800290e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	4a08      	ldr	r2, [pc, #32]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 80028fc:	f043 0301 	orr.w	r3, r3, #1
 8002900:	6413      	str	r3, [r2, #64]	; 0x40
 8002902:	4b06      	ldr	r3, [pc, #24]	; (800291c <HAL_TIM_Base_MspInit+0x3c>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800290e:	bf00      	nop
 8002910:	3714      	adds	r7, #20
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	40023800 	.word	0x40023800

08002920 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002924:	4b11      	ldr	r3, [pc, #68]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002926:	4a12      	ldr	r2, [pc, #72]	; (8002970 <MX_USART2_UART_Init+0x50>)
 8002928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <MX_USART2_UART_Init+0x4c>)
 800292c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002932:	4b0e      	ldr	r3, [pc, #56]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_USART2_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002940:	2200      	movs	r2, #0
 8002942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002944:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002946:	220c      	movs	r2, #12
 8002948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800294a:	4b08      	ldr	r3, [pc, #32]	; (800296c <MX_USART2_UART_Init+0x4c>)
 800294c:	2200      	movs	r2, #0
 800294e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002956:	4805      	ldr	r0, [pc, #20]	; (800296c <MX_USART2_UART_Init+0x4c>)
 8002958:	f005 fb56 	bl	8008008 <HAL_UART_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002962:	f7ff fe19 	bl	8002598 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	20003034 	.word	0x20003034
 8002970:	40004400 	.word	0x40004400

08002974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b08a      	sub	sp, #40	; 0x28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800297c:	f107 0314 	add.w	r3, r7, #20
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	605a      	str	r2, [r3, #4]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	60da      	str	r2, [r3, #12]
 800298a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <HAL_UART_MspInit+0x84>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d12b      	bne.n	80029ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	4b18      	ldr	r3, [pc, #96]	; (80029fc <HAL_UART_MspInit+0x88>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4a17      	ldr	r2, [pc, #92]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a4:	6413      	str	r3, [r2, #64]	; 0x40
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_UART_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029ce:	230c      	movs	r3, #12
 80029d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029da:	2303      	movs	r3, #3
 80029dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029de:	2307      	movs	r3, #7
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e2:	f107 0314 	add.w	r3, r7, #20
 80029e6:	4619      	mov	r1, r3
 80029e8:	4805      	ldr	r0, [pc, #20]	; (8002a00 <HAL_UART_MspInit+0x8c>)
 80029ea:	f001 fad1 	bl	8003f90 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80029ee:	bf00      	nop
 80029f0:	3728      	adds	r7, #40	; 0x28
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40004400 	.word	0x40004400
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40020000 	.word	0x40020000

08002a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a08:	480d      	ldr	r0, [pc, #52]	; (8002a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002a0a:	490e      	ldr	r1, [pc, #56]	; (8002a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002a0c:	4a0e      	ldr	r2, [pc, #56]	; (8002a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a10:	e002      	b.n	8002a18 <LoopCopyDataInit>

08002a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a16:	3304      	adds	r3, #4

08002a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a1c:	d3f9      	bcc.n	8002a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a1e:	4a0b      	ldr	r2, [pc, #44]	; (8002a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002a20:	4c0b      	ldr	r4, [pc, #44]	; (8002a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a24:	e001      	b.n	8002a2a <LoopFillZerobss>

08002a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a28:	3204      	adds	r2, #4

08002a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a2c:	d3fb      	bcc.n	8002a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002a2e:	f7ff fef9 	bl	8002824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a32:	f006 fcd9 	bl	80093e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a36:	f7ff fb13 	bl	8002060 <main>
  bx  lr    
 8002a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a44:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a48:	0801ff4c 	.word	0x0801ff4c
  ldr r2, =_sbss
 8002a4c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a50:	2000308c 	.word	0x2000308c

08002a54 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a54:	e7fe      	b.n	8002a54 <CAN1_RX0_IRQHandler>
	...

08002a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a5c:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_Init+0x40>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_Init+0x40>)
 8002a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_Init+0x40>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_Init+0x40>)
 8002a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_Init+0x40>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_Init+0x40>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a80:	2003      	movs	r0, #3
 8002a82:	f000 fe97 	bl	80037b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f000 f808 	bl	8002a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a8c:	f7ff fd8a 	bl	80025a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023c00 	.word	0x40023c00

08002a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_InitTick+0x54>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_InitTick+0x58>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 feaf 	bl	800381e <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00e      	b.n	8002ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0f      	cmp	r3, #15
 8002ace:	d80a      	bhi.n	8002ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad8:	f000 fe77 	bl	80037ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002adc:	4a06      	ldr	r2, [pc, #24]	; (8002af8 <HAL_InitTick+0x5c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000004 	.word	0x20000004
 8002af4:	2000000c 	.word	0x2000000c
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_IncTick+0x20>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	461a      	mov	r2, r3
 8002b06:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <HAL_IncTick+0x24>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <HAL_IncTick+0x24>)
 8002b0e:	6013      	str	r3, [r2, #0]
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	20003078 	.word	0x20003078

08002b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return uwTick;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_GetTick+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20003078 	.word	0x20003078

08002b3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d101      	bne.n	8002b52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e033      	b.n	8002bba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d109      	bne.n	8002b6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe fe14 	bl	8001788 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d118      	bne.n	8002bac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b82:	f023 0302 	bic.w	r3, r3, #2
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fbb8 	bl	8003304 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	f023 0303 	bic.w	r3, r3, #3
 8002ba2:	f043 0201 	orr.w	r2, r3, #1
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40
 8002baa:	e001      	b.n	8002bb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d049      	beq.n	8002c98 <HAL_ADC_IRQHandler+0xd6>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d046      	beq.n	8002c98 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d105      	bne.n	8002c22 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d12b      	bne.n	8002c88 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d127      	bne.n	8002c88 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d006      	beq.n	8002c54 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d119      	bne.n	8002c88 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0220 	bic.w	r2, r2, #32
 8002c62:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d105      	bne.n	8002c88 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f043 0201 	orr.w	r2, r3, #1
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7ff fb6d 	bl	8002368 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f06f 0212 	mvn.w	r2, #18
 8002c96:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b04      	cmp	r3, #4
 8002ca4:	bf0c      	ite	eq
 8002ca6:	2301      	moveq	r3, #1
 8002ca8:	2300      	movne	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d057      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x1b8>
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d054      	beq.n	8002d7a <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d105      	bne.n	8002ce8 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d139      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d006      	beq.n	8002d12 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12b      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d124      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d11d      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d119      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d44:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d105      	bne.n	8002d6a <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fc48 	bl	8003600 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f06f 020c 	mvn.w	r2, #12
 8002d78:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d9a:	2b40      	cmp	r3, #64	; 0x40
 8002d9c:	bf0c      	ite	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	2300      	movne	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d017      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x21a>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d014      	beq.n	8002ddc <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d10d      	bne.n	8002ddc <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f953 	bl	8003078 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f06f 0201 	mvn.w	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b20      	cmp	r3, #32
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e00:	bf0c      	ite	eq
 8002e02:	2301      	moveq	r3, #1
 8002e04:	2300      	movne	r3, #0
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d015      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x27a>
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d012      	beq.n	8002e3c <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e1a:	f043 0202 	orr.w	r2, r3, #2
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0220 	mvn.w	r2, #32
 8002e2a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f92d 	bl	800308c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f06f 0220 	mvn.w	r2, #32
 8002e3a:	601a      	str	r2, [r3, #0]
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_Start_DMA+0x1e>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e0e9      	b.n	8003036 <HAL_ADC_Start_DMA+0x1f2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d018      	beq.n	8002eaa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e88:	4b6d      	ldr	r3, [pc, #436]	; (8003040 <HAL_ADC_Start_DMA+0x1fc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a6d      	ldr	r2, [pc, #436]	; (8003044 <HAL_ADC_Start_DMA+0x200>)
 8002e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e92:	0c9a      	lsrs	r2, r3, #18
 8002e94:	4613      	mov	r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	4413      	add	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e9c:	e002      	b.n	8002ea4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f9      	bne.n	8002e9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d107      	bne.n	8002eca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 80a1 	bne.w	800301c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f18:	d106      	bne.n	8002f28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f023 0206 	bic.w	r2, r3, #6
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
 8002f26:	e002      	b.n	8002f2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f36:	4b44      	ldr	r3, [pc, #272]	; (8003048 <HAL_ADC_Start_DMA+0x204>)
 8002f38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3e:	4a43      	ldr	r2, [pc, #268]	; (800304c <HAL_ADC_Start_DMA+0x208>)
 8002f40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	4a42      	ldr	r2, [pc, #264]	; (8003050 <HAL_ADC_Start_DMA+0x20c>)
 8002f48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4e:	4a41      	ldr	r2, [pc, #260]	; (8003054 <HAL_ADC_Start_DMA+0x210>)
 8002f50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	334c      	adds	r3, #76	; 0x4c
 8002f86:	4619      	mov	r1, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f000 fd02 	bl	8003994 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 031f 	and.w	r3, r3, #31
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d12a      	bne.n	8002ff2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2d      	ldr	r2, [pc, #180]	; (8003058 <HAL_ADC_Start_DMA+0x214>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d015      	beq.n	8002fd2 <HAL_ADC_Start_DMA+0x18e>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2c      	ldr	r2, [pc, #176]	; (800305c <HAL_ADC_Start_DMA+0x218>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d105      	bne.n	8002fbc <HAL_ADC_Start_DMA+0x178>
 8002fb0:	4b25      	ldr	r3, [pc, #148]	; (8003048 <HAL_ADC_Start_DMA+0x204>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a27      	ldr	r2, [pc, #156]	; (8003060 <HAL_ADC_Start_DMA+0x21c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d136      	bne.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
 8002fc6:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_ADC_Start_DMA+0x204>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d130      	bne.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d129      	bne.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fee:	609a      	str	r2, [r3, #8]
 8002ff0:	e020      	b.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a18      	ldr	r2, [pc, #96]	; (8003058 <HAL_ADC_Start_DMA+0x214>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d11b      	bne.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d114      	bne.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	e00b      	b.n	8003034 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0210 	orr.w	r2, r3, #16
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f043 0201 	orr.w	r2, r3, #1
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000004 	.word	0x20000004
 8003044:	431bde83 	.word	0x431bde83
 8003048:	40012300 	.word	0x40012300
 800304c:	080034fd 	.word	0x080034fd
 8003050:	080035b7 	.word	0x080035b7
 8003054:	080035d3 	.word	0x080035d3
 8003058:	40012000 	.word	0x40012000
 800305c:	40012100 	.word	0x40012100
 8003060:	40012200 	.word	0x40012200

08003064 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1c>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e113      	b.n	80032e4 <HAL_ADC_ConfigChannel+0x244>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d925      	bls.n	8003118 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	3b1e      	subs	r3, #30
 80030e2:	2207      	movs	r2, #7
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43da      	mvns	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	400a      	ands	r2, r1
 80030f0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68d9      	ldr	r1, [r3, #12]
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	b29b      	uxth	r3, r3
 8003102:	4618      	mov	r0, r3
 8003104:	4603      	mov	r3, r0
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4403      	add	r3, r0
 800310a:	3b1e      	subs	r3, #30
 800310c:	409a      	lsls	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	e022      	b.n	800315e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6919      	ldr	r1, [r3, #16]
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	4613      	mov	r3, r2
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	4413      	add	r3, r2
 800312c:	2207      	movs	r2, #7
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	400a      	ands	r2, r1
 800313a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6919      	ldr	r1, [r3, #16]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4618      	mov	r0, r3
 800314e:	4603      	mov	r3, r0
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4403      	add	r3, r0
 8003154:	409a      	lsls	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d824      	bhi.n	80031b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685a      	ldr	r2, [r3, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3b05      	subs	r3, #5
 8003178:	221f      	movs	r2, #31
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	43da      	mvns	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	400a      	ands	r2, r1
 8003186:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	b29b      	uxth	r3, r3
 8003194:	4618      	mov	r0, r3
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	4413      	add	r3, r2
 80031a0:	3b05      	subs	r3, #5
 80031a2:	fa00 f203 	lsl.w	r2, r0, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	635a      	str	r2, [r3, #52]	; 0x34
 80031ae:	e04c      	b.n	800324a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b0c      	cmp	r3, #12
 80031b6:	d824      	bhi.n	8003202 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	3b23      	subs	r3, #35	; 0x23
 80031ca:	221f      	movs	r2, #31
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43da      	mvns	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	400a      	ands	r2, r1
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	4618      	mov	r0, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	3b23      	subs	r3, #35	; 0x23
 80031f4:	fa00 f203 	lsl.w	r2, r0, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
 8003200:	e023      	b.n	800324a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	3b41      	subs	r3, #65	; 0x41
 8003214:	221f      	movs	r2, #31
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43da      	mvns	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	400a      	ands	r2, r1
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	3b41      	subs	r3, #65	; 0x41
 800323e:	fa00 f203 	lsl.w	r2, r0, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <HAL_ADC_ConfigChannel+0x250>)
 800324c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a28      	ldr	r2, [pc, #160]	; (80032f4 <HAL_ADC_ConfigChannel+0x254>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d10f      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1d8>
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b12      	cmp	r3, #18
 800325e:	d10b      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_ADC_ConfigChannel+0x254>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d12b      	bne.n	80032da <HAL_ADC_ConfigChannel+0x23a>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1c      	ldr	r2, [pc, #112]	; (80032f8 <HAL_ADC_ConfigChannel+0x258>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d003      	beq.n	8003294 <HAL_ADC_ConfigChannel+0x1f4>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b11      	cmp	r3, #17
 8003292:	d122      	bne.n	80032da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_ADC_ConfigChannel+0x258>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d111      	bne.n	80032da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <HAL_ADC_ConfigChannel+0x25c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_ADC_ConfigChannel+0x260>)
 80032bc:	fba2 2303 	umull	r2, r3, r2, r3
 80032c0:	0c9a      	lsrs	r2, r3, #18
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032cc:	e002      	b.n	80032d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f9      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	40012300 	.word	0x40012300
 80032f4:	40012000 	.word	0x40012000
 80032f8:	10000012 	.word	0x10000012
 80032fc:	20000004 	.word	0x20000004
 8003300:	431bde83 	.word	0x431bde83

08003304 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800330c:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <ADC_Init+0x1f0>)
 800330e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003338:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	021a      	lsls	r2, r3, #8
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800335c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800337e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6899      	ldr	r1, [r3, #8]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68da      	ldr	r2, [r3, #12]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003396:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <ADC_Init+0x1f4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689a      	ldr	r2, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6899      	ldr	r1, [r3, #8]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	430a      	orrs	r2, r1
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e00f      	b.n	8003402 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003400:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0202 	bic.w	r2, r2, #2
 8003410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6899      	ldr	r1, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7e1b      	ldrb	r3, [r3, #24]
 800341c:	005a      	lsls	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3020 	ldrb.w	r3, [r3, #32]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01b      	beq.n	8003468 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800344e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6859      	ldr	r1, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	3b01      	subs	r3, #1
 800345c:	035a      	lsls	r2, r3, #13
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	e007      	b.n	8003478 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003476:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003486:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	3b01      	subs	r3, #1
 8003494:	051a      	lsls	r2, r3, #20
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6899      	ldr	r1, [r3, #8]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ba:	025a      	lsls	r2, r3, #9
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6899      	ldr	r1, [r3, #8]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	029a      	lsls	r2, r3, #10
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
}
 80034e8:	bf00      	nop
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	40012300 	.word	0x40012300
 80034f8:	0f000001 	.word	0x0f000001

080034fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003508:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003512:	2b00      	cmp	r3, #0
 8003514:	d13c      	bne.n	8003590 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d12b      	bne.n	8003588 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003534:	2b00      	cmp	r3, #0
 8003536:	d127      	bne.n	8003588 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003550:	2b00      	cmp	r3, #0
 8003552:	d119      	bne.n	8003588 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0220 	bic.w	r2, r2, #32
 8003562:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d105      	bne.n	8003588 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7fe feed 	bl	8002368 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800358e:	e00e      	b.n	80035ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7ff fd75 	bl	800308c <HAL_ADC_ErrorCallback>
}
 80035a2:	e004      	b.n	80035ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
}
 80035ae:	bf00      	nop
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f7ff fd4d 	bl	8003064 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b084      	sub	sp, #16
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2240      	movs	r2, #64	; 0x40
 80035e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff fd4a 	bl	800308c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003630:	4013      	ands	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800363c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003646:	4a04      	ldr	r2, [pc, #16]	; (8003658 <__NVIC_SetPriorityGrouping+0x44>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	60d3      	str	r3, [r2, #12]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003660:	4b04      	ldr	r3, [pc, #16]	; (8003674 <__NVIC_GetPriorityGrouping+0x18>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	0a1b      	lsrs	r3, r3, #8
 8003666:	f003 0307 	and.w	r3, r3, #7
}
 800366a:	4618      	mov	r0, r3
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003686:	2b00      	cmp	r3, #0
 8003688:	db0b      	blt.n	80036a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368a:	79fb      	ldrb	r3, [r7, #7]
 800368c:	f003 021f 	and.w	r2, r3, #31
 8003690:	4907      	ldr	r1, [pc, #28]	; (80036b0 <__NVIC_EnableIRQ+0x38>)
 8003692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003696:	095b      	lsrs	r3, r3, #5
 8003698:	2001      	movs	r0, #1
 800369a:	fa00 f202 	lsl.w	r2, r0, r2
 800369e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	e000e100 	.word	0xe000e100

080036b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	6039      	str	r1, [r7, #0]
 80036be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db0a      	blt.n	80036de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	490c      	ldr	r1, [pc, #48]	; (8003700 <__NVIC_SetPriority+0x4c>)
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	0112      	lsls	r2, r2, #4
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	440b      	add	r3, r1
 80036d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036dc:	e00a      	b.n	80036f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	4908      	ldr	r1, [pc, #32]	; (8003704 <__NVIC_SetPriority+0x50>)
 80036e4:	79fb      	ldrb	r3, [r7, #7]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3b04      	subs	r3, #4
 80036ec:	0112      	lsls	r2, r2, #4
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	440b      	add	r3, r1
 80036f2:	761a      	strb	r2, [r3, #24]
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	e000e100 	.word	0xe000e100
 8003704:	e000ed00 	.word	0xe000ed00

08003708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f1c3 0307 	rsb	r3, r3, #7
 8003722:	2b04      	cmp	r3, #4
 8003724:	bf28      	it	cs
 8003726:	2304      	movcs	r3, #4
 8003728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3304      	adds	r3, #4
 800372e:	2b06      	cmp	r3, #6
 8003730:	d902      	bls.n	8003738 <NVIC_EncodePriority+0x30>
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	3b03      	subs	r3, #3
 8003736:	e000      	b.n	800373a <NVIC_EncodePriority+0x32>
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	43da      	mvns	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	401a      	ands	r2, r3
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003750:	f04f 31ff 	mov.w	r1, #4294967295
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	43d9      	mvns	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003760:	4313      	orrs	r3, r2
         );
}
 8003762:	4618      	mov	r0, r3
 8003764:	3724      	adds	r7, #36	; 0x24
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3b01      	subs	r3, #1
 800377c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003780:	d301      	bcc.n	8003786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003786:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <SysTick_Config+0x40>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3b01      	subs	r3, #1
 800378c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800378e:	210f      	movs	r1, #15
 8003790:	f04f 30ff 	mov.w	r0, #4294967295
 8003794:	f7ff ff8e 	bl	80036b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <SysTick_Config+0x40>)
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800379e:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <SysTick_Config+0x40>)
 80037a0:	2207      	movs	r2, #7
 80037a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	e000e010 	.word	0xe000e010

080037b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ff29 	bl	8003614 <__NVIC_SetPriorityGrouping>
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b086      	sub	sp, #24
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4603      	mov	r3, r0
 80037d2:	60b9      	str	r1, [r7, #8]
 80037d4:	607a      	str	r2, [r7, #4]
 80037d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037dc:	f7ff ff3e 	bl	800365c <__NVIC_GetPriorityGrouping>
 80037e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7ff ff8e 	bl	8003708 <NVIC_EncodePriority>
 80037ec:	4602      	mov	r2, r0
 80037ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff ff5d 	bl	80036b4 <__NVIC_SetPriority>
}
 80037fa:	bf00      	nop
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	4603      	mov	r3, r0
 800380a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800380c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff ff31 	bl	8003678 <__NVIC_EnableIRQ>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7ff ffa2 	bl	8003770 <SysTick_Config>
 800382c:	4603      	mov	r3, r0
}
 800382e:	4618      	mov	r0, r3
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
	...

08003838 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003844:	f7ff f96e 	bl	8002b24 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e099      	b.n	8003988 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003874:	e00f      	b.n	8003896 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003876:	f7ff f955 	bl	8002b24 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b05      	cmp	r3, #5
 8003882:	d908      	bls.n	8003896 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2220      	movs	r2, #32
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2203      	movs	r2, #3
 800388e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e078      	b.n	8003988 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e8      	bne.n	8003876 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4b38      	ldr	r3, [pc, #224]	; (8003990 <HAL_DMA_Init+0x158>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d107      	bne.n	8003900 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	4313      	orrs	r3, r2
 80038fa:	697a      	ldr	r2, [r7, #20]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f023 0307 	bic.w	r3, r3, #7
 8003916:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	2b04      	cmp	r3, #4
 8003928:	d117      	bne.n	800395a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00e      	beq.n	800395a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 faab 	bl	8003e98 <DMA_CheckFifoParam>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2240      	movs	r2, #64	; 0x40
 800394c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003956:	2301      	movs	r3, #1
 8003958:	e016      	b.n	8003988 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa62 	bl	8003e2c <DMA_CalcBaseAndBitshift>
 8003968:	4603      	mov	r3, r0
 800396a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003970:	223f      	movs	r2, #63	; 0x3f
 8003972:	409a      	lsls	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	f010803f 	.word	0xf010803f

08003994 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_DMA_Start_IT+0x26>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e040      	b.n	8003a3c <HAL_DMA_Start_IT+0xa8>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d12f      	bne.n	8003a2e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2202      	movs	r2, #2
 80039d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f000 f9f4 	bl	8003dd0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	223f      	movs	r2, #63	; 0x3f
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f042 0216 	orr.w	r2, r2, #22
 8003a02:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d007      	beq.n	8003a1c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f042 0208 	orr.w	r2, r2, #8
 8003a1a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f042 0201 	orr.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e005      	b.n	8003a3a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
 8003a38:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d004      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2280      	movs	r2, #128	; 0x80
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00c      	b.n	8003a7c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2205      	movs	r2, #5
 8003a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a94:	4b92      	ldr	r3, [pc, #584]	; (8003ce0 <HAL_DMA_IRQHandler+0x258>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a92      	ldr	r2, [pc, #584]	; (8003ce4 <HAL_DMA_IRQHandler+0x25c>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab2:	2208      	movs	r2, #8
 8003ab4:	409a      	lsls	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d01a      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d013      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f022 0204 	bic.w	r2, r2, #4
 8003ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2208      	movs	r2, #8
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aec:	f043 0201 	orr.w	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af8:	2201      	movs	r2, #1
 8003afa:	409a      	lsls	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d012      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	2201      	movs	r2, #1
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	f043 0202 	orr.w	r2, r3, #2
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2e:	2204      	movs	r2, #4
 8003b30:	409a      	lsls	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d012      	beq.n	8003b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00b      	beq.n	8003b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	409a      	lsls	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b58:	f043 0204 	orr.w	r2, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b64:	2210      	movs	r2, #16
 8003b66:	409a      	lsls	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d043      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d03c      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b82:	2210      	movs	r2, #16
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d024      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	4798      	blx	r3
 8003bb6:	e01f      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	4798      	blx	r3
 8003bc8:	e016      	b.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d107      	bne.n	8003be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f022 0208 	bic.w	r2, r2, #8
 8003be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d003      	beq.n	8003bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 808e 	beq.w	8003d26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8086 	beq.w	8003d26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	2220      	movs	r2, #32
 8003c20:	409a      	lsls	r2, r3
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d136      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f022 0216 	bic.w	r2, r2, #22
 8003c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d103      	bne.n	8003c62 <HAL_DMA_IRQHandler+0x1da>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0208 	bic.w	r2, r2, #8
 8003c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c76:	223f      	movs	r2, #63	; 0x3f
 8003c78:	409a      	lsls	r2, r3
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d07d      	beq.n	8003d92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
        }
        return;
 8003c9e:	e078      	b.n	8003d92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01c      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d108      	bne.n	8003cce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d030      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4798      	blx	r3
 8003ccc:	e02b      	b.n	8003d26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d027      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	4798      	blx	r3
 8003cde:	e022      	b.n	8003d26 <HAL_DMA_IRQHandler+0x29e>
 8003ce0:	20000004 	.word	0x20000004
 8003ce4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10f      	bne.n	8003d16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0210 	bic.w	r2, r2, #16
 8003d04:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d032      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d022      	beq.n	8003d80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2205      	movs	r2, #5
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0201 	bic.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	3301      	adds	r3, #1
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d307      	bcc.n	8003d6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f2      	bne.n	8003d52 <HAL_DMA_IRQHandler+0x2ca>
 8003d6c:	e000      	b.n	8003d70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d6e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	4798      	blx	r3
 8003d90:	e000      	b.n	8003d94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d92:	bf00      	nop
    }
  }
}
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop

08003d9c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003daa:	b2db      	uxtb	r3, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
 8003ddc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003dec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d108      	bne.n	8003e10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e0e:	e007      	b.n	8003e20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	60da      	str	r2, [r3, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr

08003e2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	3b10      	subs	r3, #16
 8003e3c:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <DMA_CalcBaseAndBitshift+0x64>)
 8003e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e42:	091b      	lsrs	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e46:	4a13      	ldr	r2, [pc, #76]	; (8003e94 <DMA_CalcBaseAndBitshift+0x68>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d909      	bls.n	8003e6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	1d1a      	adds	r2, r3, #4
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58
 8003e6c:	e007      	b.n	8003e7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e76:	f023 0303 	bic.w	r3, r3, #3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	aaaaaaab 	.word	0xaaaaaaab
 8003e94:	0800c6fc 	.word	0x0800c6fc

08003e98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d11f      	bne.n	8003ef2 <DMA_CheckFifoParam+0x5a>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d856      	bhi.n	8003f66 <DMA_CheckFifoParam+0xce>
 8003eb8:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <DMA_CheckFifoParam+0x28>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee3 	.word	0x08003ee3
 8003ec8:	08003ed1 	.word	0x08003ed1
 8003ecc:	08003f67 	.word	0x08003f67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d046      	beq.n	8003f6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ee0:	e043      	b.n	8003f6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eea:	d140      	bne.n	8003f6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef0:	e03d      	b.n	8003f6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	d121      	bne.n	8003f40 <DMA_CheckFifoParam+0xa8>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d837      	bhi.n	8003f72 <DMA_CheckFifoParam+0xda>
 8003f02:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <DMA_CheckFifoParam+0x70>)
 8003f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f1f 	.word	0x08003f1f
 8003f10:	08003f19 	.word	0x08003f19
 8003f14:	08003f31 	.word	0x08003f31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f1c:	e030      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d025      	beq.n	8003f76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f2e:	e022      	b.n	8003f76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f3e:	e01c      	b.n	8003f7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d903      	bls.n	8003f4e <DMA_CheckFifoParam+0xb6>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d003      	beq.n	8003f54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f4c:	e018      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	73fb      	strb	r3, [r7, #15]
      break;
 8003f52:	e015      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00e      	beq.n	8003f7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e00b      	b.n	8003f7e <DMA_CheckFifoParam+0xe6>
      break;
 8003f66:	bf00      	nop
 8003f68:	e00a      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6a:	bf00      	nop
 8003f6c:	e008      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e006      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f72:	bf00      	nop
 8003f74:	e004      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <DMA_CheckFifoParam+0xe8>
      break;
 8003f7e:	bf00      	nop
    }
  } 
  
  return status; 
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop

08003f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	; 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e165      	b.n	8004278 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	f040 8154 	bne.w	8004272 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f003 0303 	and.w	r3, r3, #3
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d005      	beq.n	8003fe2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d130      	bne.n	8004044 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	2203      	movs	r2, #3
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	fa02 f303 	lsl.w	r3, r2, r3
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004018:	2201      	movs	r2, #1
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43db      	mvns	r3, r3
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	4013      	ands	r3, r2
 8004026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f003 0201 	and.w	r2, r3, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4313      	orrs	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f003 0303 	and.w	r3, r3, #3
 800404c:	2b03      	cmp	r3, #3
 800404e:	d017      	beq.n	8004080 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	2203      	movs	r2, #3
 800405c:	fa02 f303 	lsl.w	r3, r2, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	4013      	ands	r3, r2
 8004066:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d123      	bne.n	80040d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	08da      	lsrs	r2, r3, #3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3208      	adds	r2, #8
 8004094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004098:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	f003 0307 	and.w	r3, r3, #7
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	220f      	movs	r2, #15
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	43db      	mvns	r3, r3
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4013      	ands	r3, r2
 80040ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	691a      	ldr	r2, [r3, #16]
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	fa02 f303 	lsl.w	r3, r2, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	08da      	lsrs	r2, r3, #3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3208      	adds	r2, #8
 80040ce:	69b9      	ldr	r1, [r7, #24]
 80040d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	2203      	movs	r2, #3
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 80ae 	beq.w	8004272 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]
 800411a:	4b5d      	ldr	r3, [pc, #372]	; (8004290 <HAL_GPIO_Init+0x300>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	4a5c      	ldr	r2, [pc, #368]	; (8004290 <HAL_GPIO_Init+0x300>)
 8004120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004124:	6453      	str	r3, [r2, #68]	; 0x44
 8004126:	4b5a      	ldr	r3, [pc, #360]	; (8004290 <HAL_GPIO_Init+0x300>)
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004132:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_GPIO_Init+0x304>)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	3302      	adds	r3, #2
 800413a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	f003 0303 	and.w	r3, r3, #3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	220f      	movs	r2, #15
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4f      	ldr	r2, [pc, #316]	; (8004298 <HAL_GPIO_Init+0x308>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d025      	beq.n	80041aa <HAL_GPIO_Init+0x21a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4e      	ldr	r2, [pc, #312]	; (800429c <HAL_GPIO_Init+0x30c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01f      	beq.n	80041a6 <HAL_GPIO_Init+0x216>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a4d      	ldr	r2, [pc, #308]	; (80042a0 <HAL_GPIO_Init+0x310>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d019      	beq.n	80041a2 <HAL_GPIO_Init+0x212>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a4c      	ldr	r2, [pc, #304]	; (80042a4 <HAL_GPIO_Init+0x314>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <HAL_GPIO_Init+0x20e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a4b      	ldr	r2, [pc, #300]	; (80042a8 <HAL_GPIO_Init+0x318>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00d      	beq.n	800419a <HAL_GPIO_Init+0x20a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a4a      	ldr	r2, [pc, #296]	; (80042ac <HAL_GPIO_Init+0x31c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d007      	beq.n	8004196 <HAL_GPIO_Init+0x206>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a49      	ldr	r2, [pc, #292]	; (80042b0 <HAL_GPIO_Init+0x320>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d101      	bne.n	8004192 <HAL_GPIO_Init+0x202>
 800418e:	2306      	movs	r3, #6
 8004190:	e00c      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 8004192:	2307      	movs	r3, #7
 8004194:	e00a      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 8004196:	2305      	movs	r3, #5
 8004198:	e008      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 800419a:	2304      	movs	r3, #4
 800419c:	e006      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 800419e:	2303      	movs	r3, #3
 80041a0:	e004      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e002      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_GPIO_Init+0x21c>
 80041aa:	2300      	movs	r3, #0
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	f002 0203 	and.w	r2, r2, #3
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	4093      	lsls	r3, r2
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041bc:	4935      	ldr	r1, [pc, #212]	; (8004294 <HAL_GPIO_Init+0x304>)
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	089b      	lsrs	r3, r3, #2
 80041c2:	3302      	adds	r3, #2
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ca:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_GPIO_Init+0x324>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041ee:	4a31      	ldr	r2, [pc, #196]	; (80042b4 <HAL_GPIO_Init+0x324>)
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041f4:	4b2f      	ldr	r3, [pc, #188]	; (80042b4 <HAL_GPIO_Init+0x324>)
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4313      	orrs	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004218:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <HAL_GPIO_Init+0x324>)
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <HAL_GPIO_Init+0x324>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	43db      	mvns	r3, r3
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4013      	ands	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800423a:	69ba      	ldr	r2, [r7, #24]
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4313      	orrs	r3, r2
 8004240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004242:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_GPIO_Init+0x324>)
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004248:	4b1a      	ldr	r3, [pc, #104]	; (80042b4 <HAL_GPIO_Init+0x324>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	43db      	mvns	r3, r3
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4013      	ands	r3, r2
 8004256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800426c:	4a11      	ldr	r2, [pc, #68]	; (80042b4 <HAL_GPIO_Init+0x324>)
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	3301      	adds	r3, #1
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	f67f ae96 	bls.w	8003fac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	40013800 	.word	0x40013800
 8004298:	40020000 	.word	0x40020000
 800429c:	40020400 	.word	0x40020400
 80042a0:	40020800 	.word	0x40020800
 80042a4:	40020c00 	.word	0x40020c00
 80042a8:	40021000 	.word	0x40021000
 80042ac:	40021400 	.word	0x40021400
 80042b0:	40021800 	.word	0x40021800
 80042b4:	40013c00 	.word	0x40013c00

080042b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	460b      	mov	r3, r1
 80042c2:	807b      	strh	r3, [r7, #2]
 80042c4:	4613      	mov	r3, r2
 80042c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042c8:	787b      	ldrb	r3, [r7, #1]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ce:	887a      	ldrh	r2, [r7, #2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042d4:	e003      	b.n	80042de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042d6:	887b      	ldrh	r3, [r7, #2]
 80042d8:	041a      	lsls	r2, r3, #16
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	619a      	str	r2, [r3, #24]
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
	...

080042ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e12b      	b.n	8004556 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f7fd fe2a 	bl	8001f6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2224      	movs	r2, #36	; 0x24
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800433e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004350:	f002 feac 	bl	80070ac <HAL_RCC_GetPCLK1Freq>
 8004354:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	4a81      	ldr	r2, [pc, #516]	; (8004560 <HAL_I2C_Init+0x274>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d807      	bhi.n	8004370 <HAL_I2C_Init+0x84>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a80      	ldr	r2, [pc, #512]	; (8004564 <HAL_I2C_Init+0x278>)
 8004364:	4293      	cmp	r3, r2
 8004366:	bf94      	ite	ls
 8004368:	2301      	movls	r3, #1
 800436a:	2300      	movhi	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e006      	b.n	800437e <HAL_I2C_Init+0x92>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4a7d      	ldr	r2, [pc, #500]	; (8004568 <HAL_I2C_Init+0x27c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	bf94      	ite	ls
 8004378:	2301      	movls	r3, #1
 800437a:	2300      	movhi	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e0e7      	b.n	8004556 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4a78      	ldr	r2, [pc, #480]	; (800456c <HAL_I2C_Init+0x280>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	0c9b      	lsrs	r3, r3, #18
 8004390:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	4a6a      	ldr	r2, [pc, #424]	; (8004560 <HAL_I2C_Init+0x274>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d802      	bhi.n	80043c0 <HAL_I2C_Init+0xd4>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	3301      	adds	r3, #1
 80043be:	e009      	b.n	80043d4 <HAL_I2C_Init+0xe8>
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80043c6:	fb02 f303 	mul.w	r3, r2, r3
 80043ca:	4a69      	ldr	r2, [pc, #420]	; (8004570 <HAL_I2C_Init+0x284>)
 80043cc:	fba2 2303 	umull	r2, r3, r2, r3
 80043d0:	099b      	lsrs	r3, r3, #6
 80043d2:	3301      	adds	r3, #1
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	430b      	orrs	r3, r1
 80043da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80043e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	495c      	ldr	r1, [pc, #368]	; (8004560 <HAL_I2C_Init+0x274>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d819      	bhi.n	8004428 <HAL_I2C_Init+0x13c>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1e59      	subs	r1, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004402:	1c59      	adds	r1, r3, #1
 8004404:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004408:	400b      	ands	r3, r1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00a      	beq.n	8004424 <HAL_I2C_Init+0x138>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1e59      	subs	r1, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fbb1 f3f3 	udiv	r3, r1, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	e051      	b.n	80044c8 <HAL_I2C_Init+0x1dc>
 8004424:	2304      	movs	r3, #4
 8004426:	e04f      	b.n	80044c8 <HAL_I2C_Init+0x1dc>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d111      	bne.n	8004454 <HAL_I2C_Init+0x168>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	440b      	add	r3, r1
 800443e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004442:	3301      	adds	r3, #1
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf0c      	ite	eq
 800444c:	2301      	moveq	r3, #1
 800444e:	2300      	movne	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	e012      	b.n	800447a <HAL_I2C_Init+0x18e>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e58      	subs	r0, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6859      	ldr	r1, [r3, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	440b      	add	r3, r1
 8004462:	0099      	lsls	r1, r3, #2
 8004464:	440b      	add	r3, r1
 8004466:	fbb0 f3f3 	udiv	r3, r0, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <HAL_I2C_Init+0x196>
 800447e:	2301      	movs	r3, #1
 8004480:	e022      	b.n	80044c8 <HAL_I2C_Init+0x1dc>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10e      	bne.n	80044a8 <HAL_I2C_Init+0x1bc>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	1e58      	subs	r0, r3, #1
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6859      	ldr	r1, [r3, #4]
 8004492:	460b      	mov	r3, r1
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	440b      	add	r3, r1
 8004498:	fbb0 f3f3 	udiv	r3, r0, r3
 800449c:	3301      	adds	r3, #1
 800449e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044a6:	e00f      	b.n	80044c8 <HAL_I2C_Init+0x1dc>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1e58      	subs	r0, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6859      	ldr	r1, [r3, #4]
 80044b0:	460b      	mov	r3, r1
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	440b      	add	r3, r1
 80044b6:	0099      	lsls	r1, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	6809      	ldr	r1, [r1, #0]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69da      	ldr	r2, [r3, #28]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	6911      	ldr	r1, [r2, #16]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68d2      	ldr	r2, [r2, #12]
 8004502:	4311      	orrs	r1, r2
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6812      	ldr	r2, [r2, #0]
 8004508:	430b      	orrs	r3, r1
 800450a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f042 0201 	orr.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	000186a0 	.word	0x000186a0
 8004564:	001e847f 	.word	0x001e847f
 8004568:	003d08ff 	.word	0x003d08ff
 800456c:	431bde83 	.word	0x431bde83
 8004570:	10624dd3 	.word	0x10624dd3

08004574 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b088      	sub	sp, #32
 8004578:	af02      	add	r7, sp, #8
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	461a      	mov	r2, r3
 8004582:	4603      	mov	r3, r0
 8004584:	817b      	strh	r3, [r7, #10]
 8004586:	460b      	mov	r3, r1
 8004588:	813b      	strh	r3, [r7, #8]
 800458a:	4613      	mov	r3, r2
 800458c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800458e:	f7fe fac9 	bl	8002b24 <HAL_GetTick>
 8004592:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b20      	cmp	r3, #32
 800459e:	f040 80d9 	bne.w	8004754 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	2319      	movs	r3, #25
 80045a8:	2201      	movs	r2, #1
 80045aa:	496d      	ldr	r1, [pc, #436]	; (8004760 <HAL_I2C_Mem_Write+0x1ec>)
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f002 fa61 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80045b8:	2302      	movs	r3, #2
 80045ba:	e0cc      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Mem_Write+0x56>
 80045c6:	2302      	movs	r3, #2
 80045c8:	e0c5      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d007      	beq.n	80045f0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0201 	orr.w	r2, r2, #1
 80045ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2221      	movs	r2, #33	; 0x21
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	; 0x40
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004626:	b29a      	uxth	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a4d      	ldr	r2, [pc, #308]	; (8004764 <HAL_I2C_Mem_Write+0x1f0>)
 8004630:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004632:	88f8      	ldrh	r0, [r7, #6]
 8004634:	893a      	ldrh	r2, [r7, #8]
 8004636:	8979      	ldrh	r1, [r7, #10]
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	4603      	mov	r3, r0
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f001 fede 	bl	8006404 <I2C_RequestMemoryWrite>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d052      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e081      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f002 fae2 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00d      	beq.n	800467e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	2b04      	cmp	r3, #4
 8004668:	d107      	bne.n	800467a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004678:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06b      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d11b      	bne.n	80046f4 <HAL_I2C_Mem_Write+0x180>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d017      	beq.n	80046f4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	781a      	ldrb	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1aa      	bne.n	8004652 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f002 face 	bl	8006ca2 <I2C_WaitOnBTFFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004710:	2b04      	cmp	r3, #4
 8004712:	d107      	bne.n	8004724 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004722:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e016      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004736:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	00100002 	.word	0x00100002
 8004764:	ffff0000 	.word	0xffff0000

08004768 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af02      	add	r7, sp, #8
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4603      	mov	r3, r0
 8004778:	817b      	strh	r3, [r7, #10]
 800477a:	460b      	mov	r3, r1
 800477c:	813b      	strh	r3, [r7, #8]
 800477e:	4613      	mov	r3, r2
 8004780:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004782:	f7fe f9cf 	bl	8002b24 <HAL_GetTick>
 8004786:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b20      	cmp	r3, #32
 8004792:	f040 8208 	bne.w	8004ba6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	2319      	movs	r3, #25
 800479c:	2201      	movs	r2, #1
 800479e:	497b      	ldr	r1, [pc, #492]	; (800498c <HAL_I2C_Mem_Read+0x224>)
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f002 f967 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80047ac:	2302      	movs	r3, #2
 80047ae:	e1fb      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d101      	bne.n	80047be <HAL_I2C_Mem_Read+0x56>
 80047ba:	2302      	movs	r3, #2
 80047bc:	e1f4      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0301 	and.w	r3, r3, #1
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d007      	beq.n	80047e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2222      	movs	r2, #34	; 0x22
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2240      	movs	r2, #64	; 0x40
 8004800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4a5b      	ldr	r2, [pc, #364]	; (8004990 <HAL_I2C_Mem_Read+0x228>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004826:	88f8      	ldrh	r0, [r7, #6]
 8004828:	893a      	ldrh	r2, [r7, #8]
 800482a:	8979      	ldrh	r1, [r7, #10]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	9301      	str	r3, [sp, #4]
 8004830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4603      	mov	r3, r0
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f001 fe7a 	bl	8006530 <I2C_RequestMemoryRead>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e1b0      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484a:	2b00      	cmp	r3, #0
 800484c:	d113      	bne.n	8004876 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	623b      	str	r3, [r7, #32]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	623b      	str	r3, [r7, #32]
 8004862:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e184      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487a:	2b01      	cmp	r3, #1
 800487c:	d11b      	bne.n	80048b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800488c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	2300      	movs	r3, #0
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	61fb      	str	r3, [r7, #28]
 80048a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e164      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d11b      	bne.n	80048f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048de:	2300      	movs	r3, #0
 80048e0:	61bb      	str	r3, [r7, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695b      	ldr	r3, [r3, #20]
 80048e8:	61bb      	str	r3, [r7, #24]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	e144      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048f6:	2300      	movs	r3, #0
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800490c:	e138      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	2b03      	cmp	r3, #3
 8004914:	f200 80f1 	bhi.w	8004afa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491c:	2b01      	cmp	r3, #1
 800491e:	d123      	bne.n	8004968 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004922:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f002 fa2f 	bl	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e139      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004950:	3b01      	subs	r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004966:	e10b      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800496c:	2b02      	cmp	r3, #2
 800496e:	d14e      	bne.n	8004a0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	2200      	movs	r2, #0
 8004978:	4906      	ldr	r1, [pc, #24]	; (8004994 <HAL_I2C_Mem_Read+0x22c>)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f002 f87a 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e10e      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
 800498a:	bf00      	nop
 800498c:	00100002 	.word	0x00100002
 8004990:	ffff0000 	.word	0xffff0000
 8004994:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	691a      	ldr	r2, [r3, #16]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	b2d2      	uxtb	r2, r2
 80049e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f6:	3b01      	subs	r3, #1
 80049f8:	b29a      	uxth	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a0c:	e0b8      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	4966      	ldr	r1, [pc, #408]	; (8004bb0 <HAL_I2C_Mem_Read+0x448>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f002 f82b 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0bf      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	494f      	ldr	r1, [pc, #316]	; (8004bb0 <HAL_I2C_Mem_Read+0x448>)
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f001 fffd 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e091      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	1c5a      	adds	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	1c5a      	adds	r2, r3, #1
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004af8:	e042      	b.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f002 f942 	bl	8006d88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e04c      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	1c5a      	adds	r2, r3, #1
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d118      	bne.n	8004b80 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f47f aec2 	bne.w	800490e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	; 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	00010004 	.word	0x00010004

08004bb4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	817b      	strh	r3, [r7, #10]
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	813b      	strh	r3, [r7, #8]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bd2:	f7fd ffa7 	bl	8002b24 <HAL_GetTick>
 8004bd6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b20      	cmp	r3, #32
 8004be2:	f040 813a 	bne.w	8004e5a <HAL_I2C_Mem_Write_DMA+0x2a6>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004be6:	4b9f      	ldr	r3, [pc, #636]	; (8004e64 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	08db      	lsrs	r3, r3, #3
 8004bec:	4a9e      	ldr	r2, [pc, #632]	; (8004e68 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0a1a      	lsrs	r2, r3, #8
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d116      	bne.n	8004c3a <HAL_I2C_Mem_Write_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f043 0220 	orr.w	r2, r3, #32
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e110      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d0db      	beq.n	8004c00 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d101      	bne.n	8004c56 <HAL_I2C_Mem_Write_DMA+0xa2>
 8004c52:	2302      	movs	r3, #2
 8004c54:	e102      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2201      	movs	r2, #1
 8004c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d007      	beq.n	8004c7c <HAL_I2C_Mem_Write_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c8a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2221      	movs	r2, #33	; 0x21
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8004cac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a6c      	ldr	r2, [pc, #432]	; (8004e6c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004cbe:	897a      	ldrh	r2, [r7, #10]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004cc4:	893a      	ldrh	r2, [r7, #8]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004cca:	88fa      	ldrh	r2, [r7, #6]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 80a9 	beq.w	8004e32 <HAL_I2C_Mem_Write_DMA+0x27e>
    {
      if (hi2c->hdmatx != NULL)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d02a      	beq.n	8004d3e <HAL_I2C_Mem_Write_DMA+0x18a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cec:	4a60      	ldr	r2, [pc, #384]	; (8004e70 <HAL_I2C_Mem_Write_DMA+0x2bc>)
 8004cee:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf4:	4a5f      	ldr	r2, [pc, #380]	; (8004e74 <HAL_I2C_Mem_Write_DMA+0x2c0>)
 8004cf6:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d04:	2200      	movs	r2, #0
 8004d06:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	2200      	movs	r2, #0
 8004d16:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4619      	mov	r1, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	3310      	adds	r3, #16
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d2e:	f7fe fe31 	bl	8003994 <HAL_DMA_Start_IT>
 8004d32:	4603      	mov	r3, r0
 8004d34:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004d36:	7efb      	ldrb	r3, [r7, #27]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d166      	bne.n	8004e0a <HAL_I2C_Mem_Write_DMA+0x256>
 8004d3c:	e013      	b.n	8004d66 <HAL_I2C_Mem_Write_DMA+0x1b2>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07a      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004d66:	88f8      	ldrh	r0, [r7, #6]
 8004d68:	893a      	ldrh	r2, [r7, #8]
 8004d6a:	8979      	ldrh	r1, [r7, #10]
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	9301      	str	r3, [sp, #4]
 8004d70:	2323      	movs	r3, #35	; 0x23
 8004d72:	9300      	str	r3, [sp, #0]
 8004d74:	4603      	mov	r3, r0
 8004d76:	68f8      	ldr	r0, [r7, #12]
 8004d78:	f001 fb44 	bl	8006404 <I2C_RequestMemoryWrite>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d022      	beq.n	8004dc8 <HAL_I2C_Mem_Write_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fe fe5c 	bl	8003a44 <HAL_DMA_Abort_IT>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	2200      	movs	r2, #0
 8004d96:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0201 	bic.w	r2, r2, #1
 8004dc2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e049      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	613b      	str	r3, [r7, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004df4:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e04:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e028      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2220      	movs	r2, #32
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f043 0210 	orr.w	r2, r3, #16
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e014      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_I2C_Mem_Write_DMA+0x2a8>
    }
  }
  else
  {
    return HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
  }
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000004 	.word	0x20000004
 8004e68:	14f8b589 	.word	0x14f8b589
 8004e6c:	ffff0000 	.word	0xffff0000
 8004e70:	08006701 	.word	0x08006701
 8004e74:	080068ab 	.word	0x080068ab

08004e78 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e98:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b10      	cmp	r3, #16
 8004ea6:	d003      	beq.n	8004eb0 <HAL_I2C_EV_IRQHandler+0x38>
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	f040 80c1 	bne.w	8005032 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004ed0:	d003      	beq.n	8004eda <HAL_I2C_EV_IRQHandler+0x62>
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004ed8:	d101      	bne.n	8004ede <HAL_I2C_EV_IRQHandler+0x66>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_I2C_EV_IRQHandler+0x68>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	f000 8132 	beq.w	800514a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00c      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x92>
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	0a5b      	lsrs	r3, r3, #9
 8004ef4:	f003 0301 	and.w	r3, r3, #1
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d006      	beq.n	8004f0a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f001 ffc8 	bl	8006e92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 fcd2 	bl	80058ac <I2C_Master_SB>
 8004f08:	e092      	b.n	8005030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	08db      	lsrs	r3, r3, #3
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xb2>
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	0a5b      	lsrs	r3, r3, #9
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fd48 	bl	80059b8 <I2C_Master_ADD10>
 8004f28:	e082      	b.n	8005030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_I2C_EV_IRQHandler+0xd2>
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	0a5b      	lsrs	r3, r3, #9
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fd62 	bl	8005a0c <I2C_Master_ADDR>
 8004f48:	e072      	b.n	8005030 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d03b      	beq.n	8004fce <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f64:	f000 80f3 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00f      	beq.n	8004f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	0a9b      	lsrs	r3, r3, #10
 8004f78:	f003 0301 	and.w	r3, r3, #1
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d009      	beq.n	8004f94 <HAL_I2C_EV_IRQHandler+0x11c>
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d103      	bne.n	8004f94 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f94c 	bl	800522a <I2C_MasterTransmit_TXE>
 8004f92:	e04d      	b.n	8005030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	089b      	lsrs	r3, r3, #2
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80d6 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	0a5b      	lsrs	r3, r3, #9
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 80cf 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004fb0:	7bbb      	ldrb	r3, [r7, #14]
 8004fb2:	2b21      	cmp	r3, #33	; 0x21
 8004fb4:	d103      	bne.n	8004fbe <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f9d3 	bl	8005362 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fbc:	e0c7      	b.n	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	f040 80c4 	bne.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa41 	bl	800544e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fcc:	e0bf      	b.n	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fdc:	f000 80b7 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	f003 0301 	and.w	r3, r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00f      	beq.n	800500c <HAL_I2C_EV_IRQHandler+0x194>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	0a9b      	lsrs	r3, r3, #10
 8004ff0:	f003 0301 	and.w	r3, r3, #1
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <HAL_I2C_EV_IRQHandler+0x194>
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	089b      	lsrs	r3, r3, #2
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d103      	bne.n	800500c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fab6 	bl	8005576 <I2C_MasterReceive_RXNE>
 800500a:	e011      	b.n	8005030 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	089b      	lsrs	r3, r3, #2
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	2b00      	cmp	r3, #0
 8005016:	f000 809a 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	0a5b      	lsrs	r3, r3, #9
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 8093 	beq.w	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fb55 	bl	80056d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800502e:	e08e      	b.n	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005030:	e08d      	b.n	800514e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	61fb      	str	r3, [r7, #28]
 8005042:	e007      	b.n	8005054 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	085b      	lsrs	r3, r3, #1
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	2b00      	cmp	r3, #0
 800505e:	d012      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x20e>
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	0a5b      	lsrs	r3, r3, #9
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00c      	beq.n	8005086 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800507c:	69b9      	ldr	r1, [r7, #24]
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 ff13 	bl	8005eaa <I2C_Slave_ADDR>
 8005084:	e066      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	091b      	lsrs	r3, r3, #4
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	0a5b      	lsrs	r3, r3, #9
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 ff4e 	bl	8005f40 <I2C_Slave_STOPF>
 80050a4:	e056      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80050a6:	7bbb      	ldrb	r3, [r7, #14]
 80050a8:	2b21      	cmp	r3, #33	; 0x21
 80050aa:	d002      	beq.n	80050b2 <HAL_I2C_EV_IRQHandler+0x23a>
 80050ac:	7bbb      	ldrb	r3, [r7, #14]
 80050ae:	2b29      	cmp	r3, #41	; 0x29
 80050b0:	d125      	bne.n	80050fe <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	09db      	lsrs	r3, r3, #7
 80050b6:	f003 0301 	and.w	r3, r3, #1
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00f      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x266>
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	0a9b      	lsrs	r3, r3, #10
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_I2C_EV_IRQHandler+0x266>
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d103      	bne.n	80050de <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 fe29 	bl	8005d2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050dc:	e039      	b.n	8005152 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d033      	beq.n	8005152 <HAL_I2C_EV_IRQHandler+0x2da>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	0a5b      	lsrs	r3, r3, #9
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d02d      	beq.n	8005152 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fe56 	bl	8005da8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050fc:	e029      	b.n	8005152 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	099b      	lsrs	r3, r3, #6
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00f      	beq.n	800512a <HAL_I2C_EV_IRQHandler+0x2b2>
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	0a9b      	lsrs	r3, r3, #10
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	089b      	lsrs	r3, r3, #2
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b00      	cmp	r3, #0
 8005120:	d103      	bne.n	800512a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fe61 	bl	8005dea <I2C_SlaveReceive_RXNE>
 8005128:	e014      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	089b      	lsrs	r3, r3, #2
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	0a5b      	lsrs	r3, r3, #9
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fe8f 	bl	8005e66 <I2C_SlaveReceive_BTF>
 8005148:	e004      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005152:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800516e:	b480      	push	{r7}
 8005170:	b083      	sub	sp, #12
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005182:	b480      	push	{r7}
 8005184:	b083      	sub	sp, #12
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	460b      	mov	r3, r1
 80051b4:	70fb      	strb	r3, [r7, #3]
 80051b6:	4613      	mov	r3, r2
 80051b8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b083      	sub	sp, #12
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051ce:	bf00      	nop
 80051d0:	370c      	adds	r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051da:	b480      	push	{r7}
 80051dc:	b083      	sub	sp, #12
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80051e2:	bf00      	nop
 80051e4:	370c      	adds	r7, #12
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr

080051ee <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005238:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005240:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005246:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524c:	2b00      	cmp	r3, #0
 800524e:	d150      	bne.n	80052f2 <I2C_MasterTransmit_TXE+0xc8>
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	2b21      	cmp	r3, #33	; 0x21
 8005254:	d14d      	bne.n	80052f2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	2b08      	cmp	r3, #8
 800525a:	d01d      	beq.n	8005298 <I2C_MasterTransmit_TXE+0x6e>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b20      	cmp	r3, #32
 8005260:	d01a      	beq.n	8005298 <I2C_MasterTransmit_TXE+0x6e>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005268:	d016      	beq.n	8005298 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005278:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2211      	movs	r2, #17
 800527e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2220      	movs	r2, #32
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff62 	bl	800515a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005296:	e060      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052a6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d107      	bne.n	80052e2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff ff7d 	bl	80051da <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052e0:	e03b      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7ff ff35 	bl	800515a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052f0:	e033      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b21      	cmp	r3, #33	; 0x21
 80052f6:	d005      	beq.n	8005304 <I2C_MasterTransmit_TXE+0xda>
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	2b40      	cmp	r3, #64	; 0x40
 80052fc:	d12d      	bne.n	800535a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b22      	cmp	r3, #34	; 0x22
 8005302:	d12a      	bne.n	800535a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d108      	bne.n	8005320 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800531e:	e01c      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b40      	cmp	r3, #64	; 0x40
 800532a:	d103      	bne.n	8005334 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f88e 	bl	800544e <I2C_MemoryTransmit_TXE_BTF>
}
 8005332:	e012      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005358:	e7ff      	b.n	800535a <I2C_MasterTransmit_TXE+0x130>
 800535a:	bf00      	nop
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800536e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b21      	cmp	r3, #33	; 0x21
 800537a:	d164      	bne.n	8005446 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d012      	beq.n	80053ac <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053aa:	e04c      	b.n	8005446 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d01d      	beq.n	80053ee <I2C_MasterTransmit_BTF+0x8c>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d01a      	beq.n	80053ee <I2C_MasterTransmit_BTF+0x8c>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053be:	d016      	beq.n	80053ee <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ce:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2211      	movs	r2, #17
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff feb7 	bl	800515a <HAL_I2C_MasterTxCpltCallback>
}
 80053ec:	e02b      	b.n	8005446 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053fc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800540c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b40      	cmp	r3, #64	; 0x40
 8005426:	d107      	bne.n	8005438 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fed2 	bl	80051da <HAL_I2C_MemTxCpltCallback>
}
 8005436:	e006      	b.n	8005446 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fe8a 	bl	800515a <HAL_I2C_MasterTxCpltCallback>
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005462:	2b00      	cmp	r3, #0
 8005464:	d11d      	bne.n	80054a2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546a:	2b01      	cmp	r3, #1
 800546c:	d10b      	bne.n	8005486 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	b2da      	uxtb	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005484:	e073      	b.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548a:	b29b      	uxth	r3, r3
 800548c:	121b      	asrs	r3, r3, #8
 800548e:	b2da      	uxtb	r2, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054a0:	e065      	b.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d10b      	bne.n	80054c2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054c0:	e055      	b.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d151      	bne.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	2b22      	cmp	r3, #34	; 0x22
 80054ce:	d10d      	bne.n	80054ec <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054de:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054ea:	e040      	b.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d015      	beq.n	8005522 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	2b21      	cmp	r3, #33	; 0x21
 80054fa:	d112      	bne.n	8005522 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	781a      	ldrb	r2, [r3, #0]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	1c5a      	adds	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b29a      	uxth	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005520:	e025      	b.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d120      	bne.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
 800552c:	7bfb      	ldrb	r3, [r7, #15]
 800552e:	2b21      	cmp	r3, #33	; 0x21
 8005530:	d11d      	bne.n	800556e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005540:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f7ff fe36 	bl	80051da <HAL_I2C_MemTxCpltCallback>
}
 800556e:	bf00      	nop
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b22      	cmp	r3, #34	; 0x22
 8005588:	f040 80a2 	bne.w	80056d0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005590:	b29b      	uxth	r3, r3
 8005592:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b03      	cmp	r3, #3
 8005598:	d921      	bls.n	80055de <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691a      	ldr	r2, [r3, #16]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	f040 8082 	bne.w	80056d0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055da:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80055dc:	e078      	b.n	80056d0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d074      	beq.n	80056d0 <I2C_MasterReceive_RXNE+0x15a>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d002      	beq.n	80055f2 <I2C_MasterReceive_RXNE+0x7c>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d16e      	bne.n	80056d0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f001 fb96 	bl	8006d24 <I2C_WaitOnSTOPRequestThroughIT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d142      	bne.n	8005684 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800560c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800561c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	691a      	ldr	r2, [r3, #16]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d10a      	bne.n	800566e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7ff fdc1 	bl	80051ee <HAL_I2C_MemRxCpltCallback>
}
 800566c:	e030      	b.n	80056d0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2212      	movs	r2, #18
 800567a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7ff fd76 	bl	800516e <HAL_I2C_MasterRxCpltCallback>
}
 8005682:	e025      	b.n	80056d0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685a      	ldr	r2, [r3, #4]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2220      	movs	r2, #32
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fd99 	bl	8005202 <HAL_I2C_ErrorCallback>
}
 80056d0:	bf00      	nop
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b04      	cmp	r3, #4
 80056ee:	d11b      	bne.n	8005728 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005712:	1c5a      	adds	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571c:	b29b      	uxth	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b29a      	uxth	r2, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005726:	e0bd      	b.n	80058a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b03      	cmp	r3, #3
 8005730:	d129      	bne.n	8005786 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005740:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d00a      	beq.n	800575e <I2C_MasterReceive_BTF+0x86>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d007      	beq.n	800575e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691a      	ldr	r2, [r3, #16]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	b2d2      	uxtb	r2, r2
 800576a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577a:	b29b      	uxth	r3, r3
 800577c:	3b01      	subs	r3, #1
 800577e:	b29a      	uxth	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005784:	e08e      	b.n	80058a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d176      	bne.n	800587e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d002      	beq.n	800579c <I2C_MasterReceive_BTF+0xc4>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2b10      	cmp	r3, #16
 800579a:	d108      	bne.n	80057ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	e019      	b.n	80057e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d002      	beq.n	80057ba <I2C_MasterReceive_BTF+0xe2>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d108      	bne.n	80057cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	e00a      	b.n	80057e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2b10      	cmp	r3, #16
 80057d0:	d007      	beq.n	80057e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	b2d2      	uxtb	r2, r2
 80057ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691a      	ldr	r2, [r3, #16]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800583c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d10a      	bne.n	8005868 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f7ff fcc4 	bl	80051ee <HAL_I2C_MemRxCpltCallback>
}
 8005866:	e01d      	b.n	80058a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2212      	movs	r2, #18
 8005874:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fc79 	bl	800516e <HAL_I2C_MasterRxCpltCallback>
}
 800587c:	e012      	b.n	80058a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d117      	bne.n	80058f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d109      	bne.n	80058dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	461a      	mov	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80058da:	e067      	b.n	80059ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	611a      	str	r2, [r3, #16]
}
 80058ee:	e05d      	b.n	80059ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f8:	d133      	bne.n	8005962 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b21      	cmp	r3, #33	; 0x21
 8005904:	d109      	bne.n	800591a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590a:	b2db      	uxtb	r3, r3
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005916:	611a      	str	r2, [r3, #16]
 8005918:	e008      	b.n	800592c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f043 0301 	orr.w	r3, r3, #1
 8005924:	b2da      	uxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	2b00      	cmp	r3, #0
 8005932:	d004      	beq.n	800593e <I2C_Master_SB+0x92>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800593a:	2b00      	cmp	r3, #0
 800593c:	d108      	bne.n	8005950 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	2b00      	cmp	r3, #0
 8005944:	d032      	beq.n	80059ac <I2C_Master_SB+0x100>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d02d      	beq.n	80059ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800595e:	605a      	str	r2, [r3, #4]
}
 8005960:	e024      	b.n	80059ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005966:	2b00      	cmp	r3, #0
 8005968:	d10e      	bne.n	8005988 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800596e:	b29b      	uxth	r3, r3
 8005970:	11db      	asrs	r3, r3, #7
 8005972:	b2db      	uxtb	r3, r3
 8005974:	f003 0306 	and.w	r3, r3, #6
 8005978:	b2db      	uxtb	r3, r3
 800597a:	f063 030f 	orn	r3, r3, #15
 800597e:	b2da      	uxtb	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	611a      	str	r2, [r3, #16]
}
 8005986:	e011      	b.n	80059ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10d      	bne.n	80059ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	b29b      	uxth	r3, r3
 8005996:	11db      	asrs	r3, r3, #7
 8005998:	b2db      	uxtb	r3, r3
 800599a:	f003 0306 	and.w	r3, r3, #6
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	f063 030e 	orn	r3, r3, #14
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	611a      	str	r2, [r3, #16]
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d004      	beq.n	80059de <I2C_Master_ADD10+0x26>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00c      	beq.n	8005a00 <I2C_Master_ADD10+0x48>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059fe:	605a      	str	r2, [r3, #4]
  }
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b091      	sub	sp, #68	; 0x44
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	2b22      	cmp	r3, #34	; 0x22
 8005a34:	f040 8169 	bne.w	8005d0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <I2C_Master_ADDR+0x54>
 8005a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a44:	2b40      	cmp	r3, #64	; 0x40
 8005a46:	d10b      	bne.n	8005a60 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a48:	2300      	movs	r3, #0
 8005a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	e160      	b.n	8005d22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d11d      	bne.n	8005aa4 <I2C_Master_ADDR+0x98>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a70:	d118      	bne.n	8005aa4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a96:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	651a      	str	r2, [r3, #80]	; 0x50
 8005aa2:	e13e      	b.n	8005d22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d113      	bne.n	8005ad6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aae:	2300      	movs	r3, #0
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	e115      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 808a 	bne.w	8005bf6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae8:	d137      	bne.n	8005b5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b08:	d113      	bne.n	8005b32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695b      	ldr	r3, [r3, #20]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	699b      	ldr	r3, [r3, #24]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b30:	e0e7      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b56:	601a      	str	r2, [r3, #0]
 8005b58:	e0d3      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5c:	2b08      	cmp	r3, #8
 8005b5e:	d02e      	beq.n	8005bbe <I2C_Master_ADDR+0x1b2>
 8005b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d02b      	beq.n	8005bbe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b68:	2b12      	cmp	r3, #18
 8005b6a:	d102      	bne.n	8005b72 <I2C_Master_ADDR+0x166>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d125      	bne.n	8005bbe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d00e      	beq.n	8005b96 <I2C_Master_ADDR+0x18a>
 8005b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d00b      	beq.n	8005b96 <I2C_Master_ADDR+0x18a>
 8005b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d008      	beq.n	8005b96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	e007      	b.n	8005ba6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ba4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	61fb      	str	r3, [r7, #28]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	e0a1      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bcc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bce:	2300      	movs	r3, #0
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	699b      	ldr	r3, [r3, #24]
 8005be0:	61bb      	str	r3, [r7, #24]
 8005be2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	e085      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d14d      	bne.n	8005c9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d016      	beq.n	8005c34 <I2C_Master_ADDR+0x228>
 8005c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d013      	beq.n	8005c34 <I2C_Master_ADDR+0x228>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	2b10      	cmp	r3, #16
 8005c10:	d010      	beq.n	8005c34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e007      	b.n	8005c44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c52:	d117      	bne.n	8005c84 <I2C_Master_ADDR+0x278>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c5a:	d00b      	beq.n	8005c74 <I2C_Master_ADDR+0x268>
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d008      	beq.n	8005c74 <I2C_Master_ADDR+0x268>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d005      	beq.n	8005c74 <I2C_Master_ADDR+0x268>
 8005c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6a:	2b10      	cmp	r3, #16
 8005c6c:	d002      	beq.n	8005c74 <I2C_Master_ADDR+0x268>
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d107      	bne.n	8005c84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	685a      	ldr	r2, [r3, #4]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	617b      	str	r3, [r7, #20]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	e032      	b.n	8005d02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005caa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cba:	d117      	bne.n	8005cec <I2C_Master_ADDR+0x2e0>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cc2:	d00b      	beq.n	8005cdc <I2C_Master_ADDR+0x2d0>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d008      	beq.n	8005cdc <I2C_Master_ADDR+0x2d0>
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d005      	beq.n	8005cdc <I2C_Master_ADDR+0x2d0>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d002      	beq.n	8005cdc <I2C_Master_ADDR+0x2d0>
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d107      	bne.n	8005cec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cec:	2300      	movs	r3, #0
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]
 8005d00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d08:	e00b      	b.n	8005d22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	695b      	ldr	r3, [r3, #20]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	699b      	ldr	r3, [r3, #24]
 8005d1c:	60fb      	str	r3, [r7, #12]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	e7ff      	b.n	8005d22 <I2C_Master_ADDR+0x316>
 8005d22:	bf00      	nop
 8005d24:	3744      	adds	r7, #68	; 0x44
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d02b      	beq.n	8005da0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4c:	781a      	ldrb	r2, [r3, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d114      	bne.n	8005da0 <I2C_SlaveTransmit_TXE+0x72>
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b29      	cmp	r3, #41	; 0x29
 8005d7a:	d111      	bne.n	8005da0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2221      	movs	r2, #33	; 0x21
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2228      	movs	r2, #40	; 0x28
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7ff f9f1 	bl	8005182 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005da0:	bf00      	nop
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d011      	beq.n	8005dde <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	781a      	ldrb	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02c      	beq.n	8005e5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	691a      	ldr	r2, [r3, #16]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	b2d2      	uxtb	r2, r2
 8005e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d114      	bne.n	8005e5e <I2C_SlaveReceive_RXNE+0x74>
 8005e34:	7bfb      	ldrb	r3, [r7, #15]
 8005e36:	2b2a      	cmp	r3, #42	; 0x2a
 8005e38:	d111      	bne.n	8005e5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2222      	movs	r2, #34	; 0x22
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2228      	movs	r2, #40	; 0x28
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff f99c 	bl	8005196 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e5e:	bf00      	nop
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b083      	sub	sp, #12
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d012      	beq.n	8005e9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ec4:	2b28      	cmp	r3, #40	; 0x28
 8005ec6:	d127      	bne.n	8005f18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ed6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	f003 0301 	and.w	r3, r3, #1
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d103      	bne.n	8005efc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	81bb      	strh	r3, [r7, #12]
 8005efa:	e002      	b.n	8005f02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f0a:	89ba      	ldrh	r2, [r7, #12]
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f7ff f94a 	bl	80051aa <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f16:	e00e      	b.n	8005f36 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	60bb      	str	r3, [r7, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f36:	bf00      	nop
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b084      	sub	sp, #16
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f60:	2300      	movs	r3, #0
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	60bb      	str	r3, [r7, #8]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	601a      	str	r2, [r3, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9c:	d172      	bne.n	8006084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
 8005fa0:	2b22      	cmp	r3, #34	; 0x22
 8005fa2:	d002      	beq.n	8005faa <I2C_Slave_STOPF+0x6a>
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005fa8:	d135      	bne.n	8006016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd feda 	bl	8003d9c <HAL_DMA_GetState>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d049      	beq.n	8006082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	4a69      	ldr	r2, [pc, #420]	; (8006198 <I2C_Slave_STOPF+0x258>)
 8005ff4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fd fd22 	bl	8003a44 <HAL_DMA_Abort_IT>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d03d      	beq.n	8006082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006010:	4610      	mov	r0, r2
 8006012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006014:	e035      	b.n	8006082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	b29a      	uxth	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006028:	b29b      	uxth	r3, r3
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604e:	4618      	mov	r0, r3
 8006050:	f7fd fea4 	bl	8003d9c <HAL_DMA_GetState>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d014      	beq.n	8006084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	4a4e      	ldr	r2, [pc, #312]	; (8006198 <I2C_Slave_STOPF+0x258>)
 8006060:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006066:	4618      	mov	r0, r3
 8006068:	f7fd fcec 	bl	8003a44 <HAL_DMA_Abort_IT>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d008      	beq.n	8006084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800607c:	4610      	mov	r0, r2
 800607e:	4798      	blx	r3
 8006080:	e000      	b.n	8006084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006088:	b29b      	uxth	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d03e      	beq.n	800610c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	f003 0304 	and.w	r3, r3, #4
 8006098:	2b04      	cmp	r3, #4
 800609a:	d112      	bne.n	80060c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691a      	ldr	r2, [r3, #16]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	1c5a      	adds	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	3b01      	subs	r3, #1
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	695b      	ldr	r3, [r3, #20]
 80060c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060cc:	2b40      	cmp	r3, #64	; 0x40
 80060ce:	d112      	bne.n	80060f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	3b01      	subs	r3, #1
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006104:	f043 0204 	orr.w	r2, r3, #4
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f843 	bl	80061a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800611a:	e039      	b.n	8006190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800611c:	7bfb      	ldrb	r3, [r7, #15]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d109      	bne.n	8006136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2228      	movs	r2, #40	; 0x28
 800612c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7ff f830 	bl	8005196 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b28      	cmp	r3, #40	; 0x28
 8006140:	d111      	bne.n	8006166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a15      	ldr	r2, [pc, #84]	; (800619c <I2C_Slave_STOPF+0x25c>)
 8006146:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7ff f831 	bl	80051c6 <HAL_I2C_ListenCpltCallback>
}
 8006164:	e014      	b.n	8006190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616a:	2b22      	cmp	r3, #34	; 0x22
 800616c:	d002      	beq.n	8006174 <I2C_Slave_STOPF+0x234>
 800616e:	7bfb      	ldrb	r3, [r7, #15]
 8006170:	2b22      	cmp	r3, #34	; 0x22
 8006172:	d10d      	bne.n	8006190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2200      	movs	r2, #0
 8006178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2220      	movs	r2, #32
 800617e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7ff f803 	bl	8005196 <HAL_I2C_SlaveRxCpltCallback>
}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	08006925 	.word	0x08006925
 800619c:	ffff0000 	.word	0xffff0000

080061a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80061b8:	7bbb      	ldrb	r3, [r7, #14]
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d002      	beq.n	80061c4 <I2C_ITError+0x24>
 80061be:	7bbb      	ldrb	r3, [r7, #14]
 80061c0:	2b40      	cmp	r3, #64	; 0x40
 80061c2:	d10a      	bne.n	80061da <I2C_ITError+0x3a>
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	2b22      	cmp	r3, #34	; 0x22
 80061c8:	d107      	bne.n	80061da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061e0:	2b28      	cmp	r3, #40	; 0x28
 80061e2:	d107      	bne.n	80061f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2228      	movs	r2, #40	; 0x28
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061f2:	e015      	b.n	8006220 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d00a      	beq.n	800621a <I2C_ITError+0x7a>
 8006204:	7bfb      	ldrb	r3, [r7, #15]
 8006206:	2b60      	cmp	r3, #96	; 0x60
 8006208:	d007      	beq.n	800621a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800622a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800622e:	d162      	bne.n	80062f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800623e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b01      	cmp	r3, #1
 800624c:	d020      	beq.n	8006290 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	4a6a      	ldr	r2, [pc, #424]	; (80063fc <I2C_ITError+0x25c>)
 8006254:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd fbf2 	bl	8003a44 <HAL_DMA_Abort_IT>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8089 	beq.w	800637a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0201 	bic.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2220      	movs	r2, #32
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800628a:	4610      	mov	r0, r2
 800628c:	4798      	blx	r3
 800628e:	e074      	b.n	800637a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	4a59      	ldr	r2, [pc, #356]	; (80063fc <I2C_ITError+0x25c>)
 8006296:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800629c:	4618      	mov	r0, r3
 800629e:	f7fd fbd1 	bl	8003a44 <HAL_DMA_Abort_IT>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d068      	beq.n	800637a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b2:	2b40      	cmp	r3, #64	; 0x40
 80062b4:	d10b      	bne.n	80062ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0201 	bic.w	r2, r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2220      	movs	r2, #32
 80062e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062f0:	4610      	mov	r0, r2
 80062f2:	4798      	blx	r3
 80062f4:	e041      	b.n	800637a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b60      	cmp	r3, #96	; 0x60
 8006300:	d125      	bne.n	800634e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d10b      	bne.n	8006336 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0201 	bic.w	r2, r2, #1
 8006344:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7fe ff65 	bl	8005216 <HAL_I2C_AbortCpltCallback>
 800634c:	e015      	b.n	800637a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d10b      	bne.n	8006374 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	691a      	ldr	r2, [r3, #16]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f7fe ff44 	bl	8005202 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10e      	bne.n	80063a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006390:	2b00      	cmp	r3, #0
 8006392:	d109      	bne.n	80063a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800639a:	2b00      	cmp	r3, #0
 800639c:	d104      	bne.n	80063a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c4:	f003 0304 	and.w	r3, r3, #4
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d113      	bne.n	80063f4 <I2C_ITError+0x254>
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b28      	cmp	r3, #40	; 0x28
 80063d0:	d110      	bne.n	80063f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a0a      	ldr	r2, [pc, #40]	; (8006400 <I2C_ITError+0x260>)
 80063d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fe fee9 	bl	80051c6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	08006925 	.word	0x08006925
 8006400:	ffff0000 	.word	0xffff0000

08006404 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af02      	add	r7, sp, #8
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	461a      	mov	r2, r3
 8006412:	4603      	mov	r3, r0
 8006414:	817b      	strh	r3, [r7, #10]
 8006416:	460b      	mov	r3, r1
 8006418:	813b      	strh	r3, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800642c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800642e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	6a3b      	ldr	r3, [r7, #32]
 8006434:	2200      	movs	r2, #0
 8006436:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f000 fb1a 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00d      	beq.n	8006462 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006454:	d103      	bne.n	800645e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e05f      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006462:	897b      	ldrh	r3, [r7, #10]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006470:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	6a3a      	ldr	r2, [r7, #32]
 8006476:	492d      	ldr	r1, [pc, #180]	; (800652c <I2C_RequestMemoryWrite+0x128>)
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 fb52 	bl	8006b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e04c      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695b      	ldr	r3, [r3, #20]
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	617b      	str	r3, [r7, #20]
 800649c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800649e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 fbbc 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00d      	beq.n	80064ca <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b04      	cmp	r3, #4
 80064b4:	d107      	bne.n	80064c6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e02b      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80064ca:	88fb      	ldrh	r3, [r7, #6]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d105      	bne.n	80064dc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80064d0:	893b      	ldrh	r3, [r7, #8]
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	611a      	str	r2, [r3, #16]
 80064da:	e021      	b.n	8006520 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80064dc:	893b      	ldrh	r3, [r7, #8]
 80064de:	0a1b      	lsrs	r3, r3, #8
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ec:	6a39      	ldr	r1, [r7, #32]
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f000 fb96 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d107      	bne.n	8006512 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006510:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e005      	b.n	8006522 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006516:	893b      	ldrh	r3, [r7, #8]
 8006518:	b2da      	uxtb	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	00010002 	.word	0x00010002

08006530 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af02      	add	r7, sp, #8
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	4608      	mov	r0, r1
 800653a:	4611      	mov	r1, r2
 800653c:	461a      	mov	r2, r3
 800653e:	4603      	mov	r3, r0
 8006540:	817b      	strh	r3, [r7, #10]
 8006542:	460b      	mov	r3, r1
 8006544:	813b      	strh	r3, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006558:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006568:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	2200      	movs	r2, #0
 8006572:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 fa7c 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 800657c:	4603      	mov	r3, r0
 800657e:	2b00      	cmp	r3, #0
 8006580:	d00d      	beq.n	800659e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006590:	d103      	bne.n	800659a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800659a:	2303      	movs	r3, #3
 800659c:	e0aa      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800659e:	897b      	ldrh	r3, [r7, #10]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	4952      	ldr	r1, [pc, #328]	; (80066fc <I2C_RequestMemoryRead+0x1cc>)
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f000 fab4 	bl	8006b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e097      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	617b      	str	r3, [r7, #20]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	617b      	str	r3, [r7, #20]
 80065d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065dc:	6a39      	ldr	r1, [r7, #32]
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	f000 fb1e 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00d      	beq.n	8006606 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d107      	bne.n	8006602 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006600:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e076      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d105      	bne.n	8006618 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800660c:	893b      	ldrh	r3, [r7, #8]
 800660e:	b2da      	uxtb	r2, r3
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	611a      	str	r2, [r3, #16]
 8006616:	e021      	b.n	800665c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006618:	893b      	ldrh	r3, [r7, #8]
 800661a:	0a1b      	lsrs	r3, r3, #8
 800661c:	b29b      	uxth	r3, r3
 800661e:	b2da      	uxtb	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006628:	6a39      	ldr	r1, [r7, #32]
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 faf8 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00d      	beq.n	8006652 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	2b04      	cmp	r3, #4
 800663c:	d107      	bne.n	800664e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800664c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e050      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006652:	893b      	ldrh	r3, [r7, #8]
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665e:	6a39      	ldr	r1, [r7, #32]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 fadd 	bl	8006c20 <I2C_WaitOnTXEFlagUntilTimeout>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006670:	2b04      	cmp	r3, #4
 8006672:	d107      	bne.n	8006684 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006682:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e035      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006696:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	6a3b      	ldr	r3, [r7, #32]
 800669e:	2200      	movs	r2, #0
 80066a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f000 f9e5 	bl	8006a74 <I2C_WaitOnFlagUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00d      	beq.n	80066cc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066be:	d103      	bne.n	80066c8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e013      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80066cc:	897b      	ldrh	r3, [r7, #10]
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	f043 0301 	orr.w	r3, r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	6a3a      	ldr	r2, [r7, #32]
 80066e0:	4906      	ldr	r1, [pc, #24]	; (80066fc <I2C_RequestMemoryRead+0x1cc>)
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fa1d 	bl	8006b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3718      	adds	r7, #24
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	00010002 	.word	0x00010002

08006700 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006714:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800671c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685a      	ldr	r2, [r3, #4]
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006732:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006740:	2200      	movs	r2, #0
 8006742:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	2200      	movs	r2, #0
 8006752:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006754:	7cfb      	ldrb	r3, [r7, #19]
 8006756:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800675a:	2b21      	cmp	r3, #33	; 0x21
 800675c:	d007      	beq.n	800676e <I2C_DMAXferCplt+0x6e>
 800675e:	7cfb      	ldrb	r3, [r7, #19]
 8006760:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8006764:	2b22      	cmp	r3, #34	; 0x22
 8006766:	d131      	bne.n	80067cc <I2C_DMAXferCplt+0xcc>
 8006768:	7cbb      	ldrb	r3, [r7, #18]
 800676a:	2b20      	cmp	r3, #32
 800676c:	d12e      	bne.n	80067cc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800677c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2200      	movs	r2, #0
 8006782:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006784:	7cfb      	ldrb	r3, [r7, #19]
 8006786:	2b29      	cmp	r3, #41	; 0x29
 8006788:	d10a      	bne.n	80067a0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	2221      	movs	r2, #33	; 0x21
 800678e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2228      	movs	r2, #40	; 0x28
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006798:	6978      	ldr	r0, [r7, #20]
 800679a:	f7fe fcf2 	bl	8005182 <HAL_I2C_SlaveTxCpltCallback>
 800679e:	e00c      	b.n	80067ba <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80067a0:	7cfb      	ldrb	r3, [r7, #19]
 80067a2:	2b2a      	cmp	r3, #42	; 0x2a
 80067a4:	d109      	bne.n	80067ba <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2222      	movs	r2, #34	; 0x22
 80067aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2228      	movs	r2, #40	; 0x28
 80067b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067b4:	6978      	ldr	r0, [r7, #20]
 80067b6:	f7fe fcee 	bl	8005196 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80067c8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80067ca:	e06a      	b.n	80068a2 <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d064      	beq.n	80068a2 <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d107      	bne.n	80067f2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006800:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006808:	d009      	beq.n	800681e <I2C_DMAXferCplt+0x11e>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b08      	cmp	r3, #8
 800680e:	d006      	beq.n	800681e <I2C_DMAXferCplt+0x11e>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006816:	d002      	beq.n	800681e <I2C_DMAXferCplt+0x11e>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b20      	cmp	r3, #32
 800681c:	d107      	bne.n	800682e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800682c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800683c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800684c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	2200      	movs	r2, #0
 8006852:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d003      	beq.n	8006864 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800685c:	6978      	ldr	r0, [r7, #20]
 800685e:	f7fe fcd0 	bl	8005202 <HAL_I2C_ErrorCallback>
}
 8006862:	e01e      	b.n	80068a2 <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b40      	cmp	r3, #64	; 0x40
 8006876:	d10a      	bne.n	800688e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f7fe fcb1 	bl	80051ee <HAL_I2C_MemRxCpltCallback>
}
 800688c:	e009      	b.n	80068a2 <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2212      	movs	r2, #18
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800689c:	6978      	ldr	r0, [r7, #20]
 800689e:	f7fe fc66 	bl	800516e <HAL_I2C_MasterRxCpltCallback>
}
 80068a2:	bf00      	nop
 80068a4:	3718      	adds	r7, #24
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b084      	sub	sp, #16
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d003      	beq.n	80068c8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	2200      	movs	r2, #0
 80068c6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068d4:	2200      	movs	r2, #0
 80068d6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7fd fa6d 	bl	8003db8 <HAL_DMA_GetError>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d01b      	beq.n	800691c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068f2:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2220      	movs	r2, #32
 80068fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2200      	movs	r2, #0
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	f043 0210 	orr.w	r2, r3, #16
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7fe fc73 	bl	8005202 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800691c:	bf00      	nop
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800693c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800693e:	4b4b      	ldr	r3, [pc, #300]	; (8006a6c <I2C_DMAAbort+0x148>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	08db      	lsrs	r3, r3, #3
 8006944:	4a4a      	ldr	r2, [pc, #296]	; (8006a70 <I2C_DMAAbort+0x14c>)
 8006946:	fba2 2303 	umull	r2, r3, r2, r3
 800694a:	0a1a      	lsrs	r2, r3, #8
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	00da      	lsls	r2, r3, #3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d106      	bne.n	800696c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006962:	f043 0220 	orr.w	r2, r3, #32
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800696a:	e00a      	b.n	8006982 <I2C_DMAAbort+0x5e>
    }
    count--;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3b01      	subs	r3, #1
 8006970:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800697c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006980:	d0ea      	beq.n	8006958 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800698e:	2200      	movs	r2, #0
 8006990:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	2200      	movs	r2, #0
 80069a0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069b0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2200      	movs	r2, #0
 80069b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c4:	2200      	movs	r2, #0
 80069c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d003      	beq.n	80069d8 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	2200      	movs	r2, #0
 80069d6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b60      	cmp	r3, #96	; 0x60
 80069f2:	d10e      	bne.n	8006a12 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006a0a:	6978      	ldr	r0, [r7, #20]
 8006a0c:	f7fe fc03 	bl	8005216 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a10:	e027      	b.n	8006a62 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a12:	7cfb      	ldrb	r3, [r7, #19]
 8006a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a18:	2b28      	cmp	r3, #40	; 0x28
 8006a1a:	d117      	bne.n	8006a4c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a3a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2228      	movs	r2, #40	; 0x28
 8006a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006a4a:	e007      	b.n	8006a5c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006a5c:	6978      	ldr	r0, [r7, #20]
 8006a5e:	f7fe fbd0 	bl	8005202 <HAL_I2C_ErrorCallback>
}
 8006a62:	bf00      	nop
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000004 	.word	0x20000004
 8006a70:	14f8b589 	.word	0x14f8b589

08006a74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a84:	e025      	b.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d021      	beq.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a8e:	f7fc f849 	bl	8002b24 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d302      	bcc.n	8006aa4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d116      	bne.n	8006ad2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2220      	movs	r2, #32
 8006aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e023      	b.n	8006b1a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	0c1b      	lsrs	r3, r3, #16
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d10d      	bne.n	8006af8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695b      	ldr	r3, [r3, #20]
 8006ae2:	43da      	mvns	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	bf0c      	ite	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	2300      	movne	r3, #0
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	461a      	mov	r2, r3
 8006af6:	e00c      	b.n	8006b12 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	43da      	mvns	r2, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	4013      	ands	r3, r2
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	bf0c      	ite	eq
 8006b0a:	2301      	moveq	r3, #1
 8006b0c:	2300      	movne	r3, #0
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	461a      	mov	r2, r3
 8006b12:	79fb      	ldrb	r3, [r7, #7]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d0b6      	beq.n	8006a86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b30:	e051      	b.n	8006bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b40:	d123      	bne.n	8006b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b50:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006b5a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b76:	f043 0204 	orr.w	r2, r3, #4
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	e046      	b.n	8006c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d021      	beq.n	8006bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b92:	f7fb ffc7 	bl	8002b24 <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d302      	bcc.n	8006ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d116      	bne.n	8006bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2220      	movs	r2, #32
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e020      	b.n	8006c18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	0c1b      	lsrs	r3, r3, #16
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d10c      	bne.n	8006bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	43da      	mvns	r2, r3
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	4013      	ands	r3, r2
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	bf14      	ite	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	2300      	moveq	r3, #0
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	e00b      	b.n	8006c12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	43da      	mvns	r2, r3
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	4013      	ands	r3, r2
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	bf14      	ite	ne
 8006c0c:	2301      	movne	r3, #1
 8006c0e:	2300      	moveq	r3, #0
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d18d      	bne.n	8006b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c2c:	e02d      	b.n	8006c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c2e:	68f8      	ldr	r0, [r7, #12]
 8006c30:	f000 f900 	bl	8006e34 <I2C_IsAcknowledgeFailed>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e02d      	b.n	8006c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d021      	beq.n	8006c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c46:	f7fb ff6d 	bl	8002b24 <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d302      	bcc.n	8006c5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d116      	bne.n	8006c8a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	f043 0220 	orr.w	r2, r3, #32
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e007      	b.n	8006c9a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c94:	2b80      	cmp	r3, #128	; 0x80
 8006c96:	d1ca      	bne.n	8006c2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b084      	sub	sp, #16
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	60f8      	str	r0, [r7, #12]
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006cae:	e02d      	b.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 f8bf 	bl	8006e34 <I2C_IsAcknowledgeFailed>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e02d      	b.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc6:	d021      	beq.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cc8:	f7fb ff2c 	bl	8002b24 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	68ba      	ldr	r2, [r7, #8]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d302      	bcc.n	8006cde <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d116      	bne.n	8006d0c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf8:	f043 0220 	orr.w	r2, r3, #32
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e007      	b.n	8006d1c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d1ca      	bne.n	8006cb0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006d30:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	08db      	lsrs	r3, r3, #3
 8006d36:	4a13      	ldr	r2, [pc, #76]	; (8006d84 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006d38:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3c:	0a1a      	lsrs	r2, r3, #8
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d107      	bne.n	8006d62 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d56:	f043 0220 	orr.w	r2, r3, #32
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e008      	b.n	8006d74 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d70:	d0e9      	beq.n	8006d46 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	20000004 	.word	0x20000004
 8006d84:	14f8b589 	.word	0x14f8b589

08006d88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d94:	e042      	b.n	8006e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d119      	bne.n	8006dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f06f 0210 	mvn.w	r2, #16
 8006dac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e029      	b.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd8:	f7fb fea4 	bl	8002b24 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d302      	bcc.n	8006dee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d116      	bne.n	8006e1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e08:	f043 0220 	orr.w	r2, r3, #32
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e007      	b.n	8006e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	695b      	ldr	r3, [r3, #20]
 8006e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d1b5      	bne.n	8006d96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	695b      	ldr	r3, [r3, #20]
 8006e42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4a:	d11b      	bne.n	8006e84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006e54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e70:	f043 0204 	orr.w	r2, r3, #4
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b083      	sub	sp, #12
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ea2:	d103      	bne.n	8006eac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006eaa:	e007      	b.n	8006ebc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006eb4:	d102      	bne.n	8006ebc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2208      	movs	r2, #8
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e0cc      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006edc:	4b68      	ldr	r3, [pc, #416]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d90c      	bls.n	8006f04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eea:	4b65      	ldr	r3, [pc, #404]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef2:	4b63      	ldr	r3, [pc, #396]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 030f 	and.w	r3, r3, #15
 8006efa:	683a      	ldr	r2, [r7, #0]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d001      	beq.n	8006f04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e0b8      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d020      	beq.n	8006f52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d005      	beq.n	8006f28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f1c:	4b59      	ldr	r3, [pc, #356]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	4a58      	ldr	r2, [pc, #352]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 0308 	and.w	r3, r3, #8
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d005      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f34:	4b53      	ldr	r3, [pc, #332]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4a52      	ldr	r2, [pc, #328]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f40:	4b50      	ldr	r3, [pc, #320]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	494d      	ldr	r1, [pc, #308]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d044      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d107      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f66:	4b47      	ldr	r3, [pc, #284]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d119      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e07f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	2b02      	cmp	r3, #2
 8006f7c:	d003      	beq.n	8006f86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006f82:	2b03      	cmp	r3, #3
 8006f84:	d107      	bne.n	8006f96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f86:	4b3f      	ldr	r3, [pc, #252]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d109      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e06f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f96:	4b3b      	ldr	r3, [pc, #236]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0302 	and.w	r3, r3, #2
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e067      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006fa6:	4b37      	ldr	r3, [pc, #220]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f023 0203 	bic.w	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4934      	ldr	r1, [pc, #208]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006fb8:	f7fb fdb4 	bl	8002b24 <HAL_GetTick>
 8006fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fbe:	e00a      	b.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fc0:	f7fb fdb0 	bl	8002b24 <HAL_GetTick>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	1ad3      	subs	r3, r2, r3
 8006fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e04f      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	f003 020c 	and.w	r2, r3, #12
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d1eb      	bne.n	8006fc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fe8:	4b25      	ldr	r3, [pc, #148]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20c      	bcs.n	8007010 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ff6:	4b22      	ldr	r3, [pc, #136]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	b2d2      	uxtb	r2, r2
 8006ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ffe:	4b20      	ldr	r3, [pc, #128]	; (8007080 <HAL_RCC_ClockConfig+0x1b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	683a      	ldr	r2, [r7, #0]
 8007008:	429a      	cmp	r2, r3
 800700a:	d001      	beq.n	8007010 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e032      	b.n	8007076 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0304 	and.w	r3, r3, #4
 8007018:	2b00      	cmp	r3, #0
 800701a:	d008      	beq.n	800702e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4916      	ldr	r1, [pc, #88]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800702a:	4313      	orrs	r3, r2
 800702c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 0308 	and.w	r3, r3, #8
 8007036:	2b00      	cmp	r3, #0
 8007038:	d009      	beq.n	800704e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	490e      	ldr	r1, [pc, #56]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 800704a:	4313      	orrs	r3, r2
 800704c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800704e:	f000 f855 	bl	80070fc <HAL_RCC_GetSysClockFreq>
 8007052:	4602      	mov	r2, r0
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <HAL_RCC_ClockConfig+0x1bc>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	091b      	lsrs	r3, r3, #4
 800705a:	f003 030f 	and.w	r3, r3, #15
 800705e:	490a      	ldr	r1, [pc, #40]	; (8007088 <HAL_RCC_ClockConfig+0x1c0>)
 8007060:	5ccb      	ldrb	r3, [r1, r3]
 8007062:	fa22 f303 	lsr.w	r3, r2, r3
 8007066:	4a09      	ldr	r2, [pc, #36]	; (800708c <HAL_RCC_ClockConfig+0x1c4>)
 8007068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800706a:	4b09      	ldr	r3, [pc, #36]	; (8007090 <HAL_RCC_ClockConfig+0x1c8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7fb fd14 	bl	8002a9c <HAL_InitTick>

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40023c00 	.word	0x40023c00
 8007084:	40023800 	.word	0x40023800
 8007088:	0800c6e4 	.word	0x0800c6e4
 800708c:	20000004 	.word	0x20000004
 8007090:	20000008 	.word	0x20000008

08007094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800709a:	681b      	ldr	r3, [r3, #0]
}
 800709c:	4618      	mov	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000004 	.word	0x20000004

080070ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070b0:	f7ff fff0 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 80070b4:	4602      	mov	r2, r0
 80070b6:	4b05      	ldr	r3, [pc, #20]	; (80070cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	0a9b      	lsrs	r3, r3, #10
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	4903      	ldr	r1, [pc, #12]	; (80070d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070c2:	5ccb      	ldrb	r3, [r1, r3]
 80070c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40023800 	.word	0x40023800
 80070d0:	0800c6f4 	.word	0x0800c6f4

080070d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070d8:	f7ff ffdc 	bl	8007094 <HAL_RCC_GetHCLKFreq>
 80070dc:	4602      	mov	r2, r0
 80070de:	4b05      	ldr	r3, [pc, #20]	; (80070f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	0b5b      	lsrs	r3, r3, #13
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	4903      	ldr	r1, [pc, #12]	; (80070f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070ea:	5ccb      	ldrb	r3, [r1, r3]
 80070ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	40023800 	.word	0x40023800
 80070f8:	0800c6f4 	.word	0x0800c6f4

080070fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007100:	b088      	sub	sp, #32
 8007102:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8007108:	2300      	movs	r3, #0
 800710a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007118:	4bce      	ldr	r3, [pc, #824]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 030c 	and.w	r3, r3, #12
 8007120:	2b0c      	cmp	r3, #12
 8007122:	f200 818d 	bhi.w	8007440 <HAL_RCC_GetSysClockFreq+0x344>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <HAL_RCC_GetSysClockFreq+0x30>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	08007161 	.word	0x08007161
 8007130:	08007441 	.word	0x08007441
 8007134:	08007441 	.word	0x08007441
 8007138:	08007441 	.word	0x08007441
 800713c:	08007167 	.word	0x08007167
 8007140:	08007441 	.word	0x08007441
 8007144:	08007441 	.word	0x08007441
 8007148:	08007441 	.word	0x08007441
 800714c:	0800716d 	.word	0x0800716d
 8007150:	08007441 	.word	0x08007441
 8007154:	08007441 	.word	0x08007441
 8007158:	08007441 	.word	0x08007441
 800715c:	080072e1 	.word	0x080072e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007160:	4bbd      	ldr	r3, [pc, #756]	; (8007458 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007162:	61bb      	str	r3, [r7, #24]
       break;
 8007164:	e16f      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007166:	4bbd      	ldr	r3, [pc, #756]	; (800745c <HAL_RCC_GetSysClockFreq+0x360>)
 8007168:	61bb      	str	r3, [r7, #24]
      break;
 800716a:	e16c      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800716c:	4bb9      	ldr	r3, [pc, #740]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007174:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007176:	4bb7      	ldr	r3, [pc, #732]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d053      	beq.n	800722a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007182:	4bb4      	ldr	r3, [pc, #720]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	099b      	lsrs	r3, r3, #6
 8007188:	461a      	mov	r2, r3
 800718a:	f04f 0300 	mov.w	r3, #0
 800718e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007192:	f04f 0100 	mov.w	r1, #0
 8007196:	ea02 0400 	and.w	r4, r2, r0
 800719a:	603c      	str	r4, [r7, #0]
 800719c:	400b      	ands	r3, r1
 800719e:	607b      	str	r3, [r7, #4]
 80071a0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80071a4:	4620      	mov	r0, r4
 80071a6:	4629      	mov	r1, r5
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	f04f 0300 	mov.w	r3, #0
 80071b0:	014b      	lsls	r3, r1, #5
 80071b2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80071b6:	0142      	lsls	r2, r0, #5
 80071b8:	4610      	mov	r0, r2
 80071ba:	4619      	mov	r1, r3
 80071bc:	4623      	mov	r3, r4
 80071be:	1ac0      	subs	r0, r0, r3
 80071c0:	462b      	mov	r3, r5
 80071c2:	eb61 0103 	sbc.w	r1, r1, r3
 80071c6:	f04f 0200 	mov.w	r2, #0
 80071ca:	f04f 0300 	mov.w	r3, #0
 80071ce:	018b      	lsls	r3, r1, #6
 80071d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80071d4:	0182      	lsls	r2, r0, #6
 80071d6:	1a12      	subs	r2, r2, r0
 80071d8:	eb63 0301 	sbc.w	r3, r3, r1
 80071dc:	f04f 0000 	mov.w	r0, #0
 80071e0:	f04f 0100 	mov.w	r1, #0
 80071e4:	00d9      	lsls	r1, r3, #3
 80071e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80071ea:	00d0      	lsls	r0, r2, #3
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4621      	mov	r1, r4
 80071f2:	1852      	adds	r2, r2, r1
 80071f4:	4629      	mov	r1, r5
 80071f6:	eb43 0101 	adc.w	r1, r3, r1
 80071fa:	460b      	mov	r3, r1
 80071fc:	f04f 0000 	mov.w	r0, #0
 8007200:	f04f 0100 	mov.w	r1, #0
 8007204:	0259      	lsls	r1, r3, #9
 8007206:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800720a:	0250      	lsls	r0, r2, #9
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4610      	mov	r0, r2
 8007212:	4619      	mov	r1, r3
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	461a      	mov	r2, r3
 8007218:	f04f 0300 	mov.w	r3, #0
 800721c:	f7f9 fd94 	bl	8000d48 <__aeabi_uldivmod>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4613      	mov	r3, r2
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	e04c      	b.n	80072c4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722a:	4b8a      	ldr	r3, [pc, #552]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	099b      	lsrs	r3, r3, #6
 8007230:	461a      	mov	r2, r3
 8007232:	f04f 0300 	mov.w	r3, #0
 8007236:	f240 10ff 	movw	r0, #511	; 0x1ff
 800723a:	f04f 0100 	mov.w	r1, #0
 800723e:	ea02 0a00 	and.w	sl, r2, r0
 8007242:	ea03 0b01 	and.w	fp, r3, r1
 8007246:	4650      	mov	r0, sl
 8007248:	4659      	mov	r1, fp
 800724a:	f04f 0200 	mov.w	r2, #0
 800724e:	f04f 0300 	mov.w	r3, #0
 8007252:	014b      	lsls	r3, r1, #5
 8007254:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007258:	0142      	lsls	r2, r0, #5
 800725a:	4610      	mov	r0, r2
 800725c:	4619      	mov	r1, r3
 800725e:	ebb0 000a 	subs.w	r0, r0, sl
 8007262:	eb61 010b 	sbc.w	r1, r1, fp
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	018b      	lsls	r3, r1, #6
 8007270:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007274:	0182      	lsls	r2, r0, #6
 8007276:	1a12      	subs	r2, r2, r0
 8007278:	eb63 0301 	sbc.w	r3, r3, r1
 800727c:	f04f 0000 	mov.w	r0, #0
 8007280:	f04f 0100 	mov.w	r1, #0
 8007284:	00d9      	lsls	r1, r3, #3
 8007286:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800728a:	00d0      	lsls	r0, r2, #3
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	eb12 020a 	adds.w	r2, r2, sl
 8007294:	eb43 030b 	adc.w	r3, r3, fp
 8007298:	f04f 0000 	mov.w	r0, #0
 800729c:	f04f 0100 	mov.w	r1, #0
 80072a0:	0299      	lsls	r1, r3, #10
 80072a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80072a6:	0290      	lsls	r0, r2, #10
 80072a8:	4602      	mov	r2, r0
 80072aa:	460b      	mov	r3, r1
 80072ac:	4610      	mov	r0, r2
 80072ae:	4619      	mov	r1, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f04f 0300 	mov.w	r3, #0
 80072b8:	f7f9 fd46 	bl	8000d48 <__aeabi_uldivmod>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	4613      	mov	r3, r2
 80072c2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072c4:	4b63      	ldr	r3, [pc, #396]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	0c1b      	lsrs	r3, r3, #16
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	3301      	adds	r3, #1
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	693b      	ldr	r3, [r7, #16]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	61bb      	str	r3, [r7, #24]
      break;
 80072de:	e0b2      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072e0:	4b5c      	ldr	r3, [pc, #368]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072e8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072ea:	4b5a      	ldr	r3, [pc, #360]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d04d      	beq.n	8007392 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f6:	4b57      	ldr	r3, [pc, #348]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	099b      	lsrs	r3, r3, #6
 80072fc:	461a      	mov	r2, r3
 80072fe:	f04f 0300 	mov.w	r3, #0
 8007302:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007306:	f04f 0100 	mov.w	r1, #0
 800730a:	ea02 0800 	and.w	r8, r2, r0
 800730e:	ea03 0901 	and.w	r9, r3, r1
 8007312:	4640      	mov	r0, r8
 8007314:	4649      	mov	r1, r9
 8007316:	f04f 0200 	mov.w	r2, #0
 800731a:	f04f 0300 	mov.w	r3, #0
 800731e:	014b      	lsls	r3, r1, #5
 8007320:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007324:	0142      	lsls	r2, r0, #5
 8007326:	4610      	mov	r0, r2
 8007328:	4619      	mov	r1, r3
 800732a:	ebb0 0008 	subs.w	r0, r0, r8
 800732e:	eb61 0109 	sbc.w	r1, r1, r9
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	018b      	lsls	r3, r1, #6
 800733c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007340:	0182      	lsls	r2, r0, #6
 8007342:	1a12      	subs	r2, r2, r0
 8007344:	eb63 0301 	sbc.w	r3, r3, r1
 8007348:	f04f 0000 	mov.w	r0, #0
 800734c:	f04f 0100 	mov.w	r1, #0
 8007350:	00d9      	lsls	r1, r3, #3
 8007352:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007356:	00d0      	lsls	r0, r2, #3
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	eb12 0208 	adds.w	r2, r2, r8
 8007360:	eb43 0309 	adc.w	r3, r3, r9
 8007364:	f04f 0000 	mov.w	r0, #0
 8007368:	f04f 0100 	mov.w	r1, #0
 800736c:	0259      	lsls	r1, r3, #9
 800736e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007372:	0250      	lsls	r0, r2, #9
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4610      	mov	r0, r2
 800737a:	4619      	mov	r1, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 0300 	mov.w	r3, #0
 8007384:	f7f9 fce0 	bl	8000d48 <__aeabi_uldivmod>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4613      	mov	r3, r2
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	e04a      	b.n	8007428 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007392:	4b30      	ldr	r3, [pc, #192]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	099b      	lsrs	r3, r3, #6
 8007398:	461a      	mov	r2, r3
 800739a:	f04f 0300 	mov.w	r3, #0
 800739e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80073a2:	f04f 0100 	mov.w	r1, #0
 80073a6:	ea02 0400 	and.w	r4, r2, r0
 80073aa:	ea03 0501 	and.w	r5, r3, r1
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	f04f 0200 	mov.w	r2, #0
 80073b6:	f04f 0300 	mov.w	r3, #0
 80073ba:	014b      	lsls	r3, r1, #5
 80073bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80073c0:	0142      	lsls	r2, r0, #5
 80073c2:	4610      	mov	r0, r2
 80073c4:	4619      	mov	r1, r3
 80073c6:	1b00      	subs	r0, r0, r4
 80073c8:	eb61 0105 	sbc.w	r1, r1, r5
 80073cc:	f04f 0200 	mov.w	r2, #0
 80073d0:	f04f 0300 	mov.w	r3, #0
 80073d4:	018b      	lsls	r3, r1, #6
 80073d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80073da:	0182      	lsls	r2, r0, #6
 80073dc:	1a12      	subs	r2, r2, r0
 80073de:	eb63 0301 	sbc.w	r3, r3, r1
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f04f 0100 	mov.w	r1, #0
 80073ea:	00d9      	lsls	r1, r3, #3
 80073ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80073f0:	00d0      	lsls	r0, r2, #3
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	1912      	adds	r2, r2, r4
 80073f8:	eb45 0303 	adc.w	r3, r5, r3
 80073fc:	f04f 0000 	mov.w	r0, #0
 8007400:	f04f 0100 	mov.w	r1, #0
 8007404:	0299      	lsls	r1, r3, #10
 8007406:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800740a:	0290      	lsls	r0, r2, #10
 800740c:	4602      	mov	r2, r0
 800740e:	460b      	mov	r3, r1
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	461a      	mov	r2, r3
 8007418:	f04f 0300 	mov.w	r3, #0
 800741c:	f7f9 fc94 	bl	8000d48 <__aeabi_uldivmod>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4613      	mov	r3, r2
 8007426:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <HAL_RCC_GetSysClockFreq+0x358>)
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	0f1b      	lsrs	r3, r3, #28
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8007434:	69fa      	ldr	r2, [r7, #28]
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	61bb      	str	r3, [r7, #24]
      break;
 800743e:	e002      	b.n	8007446 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007440:	4b05      	ldr	r3, [pc, #20]	; (8007458 <HAL_RCC_GetSysClockFreq+0x35c>)
 8007442:	61bb      	str	r3, [r7, #24]
      break;
 8007444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007446:	69bb      	ldr	r3, [r7, #24]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3720      	adds	r7, #32
 800744c:	46bd      	mov	sp, r7
 800744e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800
 8007458:	00f42400 	.word	0x00f42400
 800745c:	007a1200 	.word	0x007a1200

08007460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e28d      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8083 	beq.w	8007586 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007480:	4b94      	ldr	r3, [pc, #592]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f003 030c 	and.w	r3, r3, #12
 8007488:	2b04      	cmp	r3, #4
 800748a:	d019      	beq.n	80074c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800748c:	4b91      	ldr	r3, [pc, #580]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007494:	2b08      	cmp	r3, #8
 8007496:	d106      	bne.n	80074a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007498:	4b8e      	ldr	r3, [pc, #568]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074a4:	d00c      	beq.n	80074c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074a6:	4b8b      	ldr	r3, [pc, #556]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80074ae:	2b0c      	cmp	r3, #12
 80074b0:	d112      	bne.n	80074d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80074b2:	4b88      	ldr	r3, [pc, #544]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074be:	d10b      	bne.n	80074d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c0:	4b84      	ldr	r3, [pc, #528]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05b      	beq.n	8007584 <HAL_RCC_OscConfig+0x124>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d157      	bne.n	8007584 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e25a      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e0:	d106      	bne.n	80074f0 <HAL_RCC_OscConfig+0x90>
 80074e2:	4b7c      	ldr	r3, [pc, #496]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a7b      	ldr	r2, [pc, #492]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e01d      	b.n	800752c <HAL_RCC_OscConfig+0xcc>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074f8:	d10c      	bne.n	8007514 <HAL_RCC_OscConfig+0xb4>
 80074fa:	4b76      	ldr	r3, [pc, #472]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a75      	ldr	r2, [pc, #468]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	4b73      	ldr	r3, [pc, #460]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a72      	ldr	r2, [pc, #456]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e00b      	b.n	800752c <HAL_RCC_OscConfig+0xcc>
 8007514:	4b6f      	ldr	r3, [pc, #444]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a6e      	ldr	r2, [pc, #440]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 800751a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4b6c      	ldr	r3, [pc, #432]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a6b      	ldr	r2, [pc, #428]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800752a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d013      	beq.n	800755c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fb faf6 	bl	8002b24 <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800753c:	f7fb faf2 	bl	8002b24 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b64      	cmp	r3, #100	; 0x64
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e21f      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800754e:	4b61      	ldr	r3, [pc, #388]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0f0      	beq.n	800753c <HAL_RCC_OscConfig+0xdc>
 800755a:	e014      	b.n	8007586 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fb fae2 	bl	8002b24 <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007564:	f7fb fade 	bl	8002b24 <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	; 0x64
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e20b      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007576:	4b57      	ldr	r3, [pc, #348]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0x104>
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d06f      	beq.n	8007672 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007592:	4b50      	ldr	r3, [pc, #320]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	2b00      	cmp	r3, #0
 800759c:	d017      	beq.n	80075ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800759e:	4b4d      	ldr	r3, [pc, #308]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80075a6:	2b08      	cmp	r3, #8
 80075a8:	d105      	bne.n	80075b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075aa:	4b4a      	ldr	r3, [pc, #296]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d00b      	beq.n	80075ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075b6:	4b47      	ldr	r3, [pc, #284]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80075be:	2b0c      	cmp	r3, #12
 80075c0:	d11c      	bne.n	80075fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80075c2:	4b44      	ldr	r3, [pc, #272]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d116      	bne.n	80075fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ce:	4b41      	ldr	r3, [pc, #260]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 0302 	and.w	r3, r3, #2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d005      	beq.n	80075e6 <HAL_RCC_OscConfig+0x186>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d001      	beq.n	80075e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	e1d3      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e6:	4b3b      	ldr	r3, [pc, #236]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	00db      	lsls	r3, r3, #3
 80075f4:	4937      	ldr	r1, [pc, #220]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80075f6:	4313      	orrs	r3, r2
 80075f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075fa:	e03a      	b.n	8007672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d020      	beq.n	8007646 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007604:	4b34      	ldr	r3, [pc, #208]	; (80076d8 <HAL_RCC_OscConfig+0x278>)
 8007606:	2201      	movs	r2, #1
 8007608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760a:	f7fb fa8b 	bl	8002b24 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007612:	f7fb fa87 	bl	8002b24 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b02      	cmp	r3, #2
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e1b4      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007624:	4b2b      	ldr	r3, [pc, #172]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007630:	4b28      	ldr	r3, [pc, #160]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	00db      	lsls	r3, r3, #3
 800763e:	4925      	ldr	r1, [pc, #148]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007640:	4313      	orrs	r3, r2
 8007642:	600b      	str	r3, [r1, #0]
 8007644:	e015      	b.n	8007672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <HAL_RCC_OscConfig+0x278>)
 8007648:	2200      	movs	r2, #0
 800764a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fb fa6a 	bl	8002b24 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007654:	f7fb fa66 	bl	8002b24 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e193      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007666:	4b1b      	ldr	r3, [pc, #108]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d036      	beq.n	80076ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d016      	beq.n	80076b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <HAL_RCC_OscConfig+0x27c>)
 8007688:	2201      	movs	r2, #1
 800768a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800768c:	f7fb fa4a 	bl	8002b24 <HAL_GetTick>
 8007690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007694:	f7fb fa46 	bl	8002b24 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e173      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80076a6:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <HAL_RCC_OscConfig+0x274>)
 80076a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0f0      	beq.n	8007694 <HAL_RCC_OscConfig+0x234>
 80076b2:	e01b      	b.n	80076ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076b4:	4b09      	ldr	r3, [pc, #36]	; (80076dc <HAL_RCC_OscConfig+0x27c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ba:	f7fb fa33 	bl	8002b24 <HAL_GetTick>
 80076be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076c0:	e00e      	b.n	80076e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80076c2:	f7fb fa2f 	bl	8002b24 <HAL_GetTick>
 80076c6:	4602      	mov	r2, r0
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	1ad3      	subs	r3, r2, r3
 80076cc:	2b02      	cmp	r3, #2
 80076ce:	d907      	bls.n	80076e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80076d0:	2303      	movs	r3, #3
 80076d2:	e15c      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
 80076d4:	40023800 	.word	0x40023800
 80076d8:	42470000 	.word	0x42470000
 80076dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80076e0:	4b8a      	ldr	r3, [pc, #552]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80076e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1ea      	bne.n	80076c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0304 	and.w	r3, r3, #4
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	f000 8097 	beq.w	8007828 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076fa:	2300      	movs	r3, #0
 80076fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076fe:	4b83      	ldr	r3, [pc, #524]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10f      	bne.n	800772a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	4b7f      	ldr	r3, [pc, #508]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007712:	4a7e      	ldr	r2, [pc, #504]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007718:	6413      	str	r3, [r2, #64]	; 0x40
 800771a:	4b7c      	ldr	r3, [pc, #496]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 800771c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800771e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007722:	60bb      	str	r3, [r7, #8]
 8007724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007726:	2301      	movs	r3, #1
 8007728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800772a:	4b79      	ldr	r3, [pc, #484]	; (8007910 <HAL_RCC_OscConfig+0x4b0>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007732:	2b00      	cmp	r3, #0
 8007734:	d118      	bne.n	8007768 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007736:	4b76      	ldr	r3, [pc, #472]	; (8007910 <HAL_RCC_OscConfig+0x4b0>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a75      	ldr	r2, [pc, #468]	; (8007910 <HAL_RCC_OscConfig+0x4b0>)
 800773c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007742:	f7fb f9ef 	bl	8002b24 <HAL_GetTick>
 8007746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007748:	e008      	b.n	800775c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800774a:	f7fb f9eb 	bl	8002b24 <HAL_GetTick>
 800774e:	4602      	mov	r2, r0
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	1ad3      	subs	r3, r2, r3
 8007754:	2b02      	cmp	r3, #2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e118      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800775c:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <HAL_RCC_OscConfig+0x4b0>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007764:	2b00      	cmp	r3, #0
 8007766:	d0f0      	beq.n	800774a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d106      	bne.n	800777e <HAL_RCC_OscConfig+0x31e>
 8007770:	4b66      	ldr	r3, [pc, #408]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007774:	4a65      	ldr	r2, [pc, #404]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	6713      	str	r3, [r2, #112]	; 0x70
 800777c:	e01c      	b.n	80077b8 <HAL_RCC_OscConfig+0x358>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b05      	cmp	r3, #5
 8007784:	d10c      	bne.n	80077a0 <HAL_RCC_OscConfig+0x340>
 8007786:	4b61      	ldr	r3, [pc, #388]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800778a:	4a60      	ldr	r2, [pc, #384]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 800778c:	f043 0304 	orr.w	r3, r3, #4
 8007790:	6713      	str	r3, [r2, #112]	; 0x70
 8007792:	4b5e      	ldr	r3, [pc, #376]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	4a5d      	ldr	r2, [pc, #372]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007798:	f043 0301 	orr.w	r3, r3, #1
 800779c:	6713      	str	r3, [r2, #112]	; 0x70
 800779e:	e00b      	b.n	80077b8 <HAL_RCC_OscConfig+0x358>
 80077a0:	4b5a      	ldr	r3, [pc, #360]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80077a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077a4:	4a59      	ldr	r2, [pc, #356]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80077a6:	f023 0301 	bic.w	r3, r3, #1
 80077aa:	6713      	str	r3, [r2, #112]	; 0x70
 80077ac:	4b57      	ldr	r3, [pc, #348]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80077ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077b0:	4a56      	ldr	r2, [pc, #344]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80077b2:	f023 0304 	bic.w	r3, r3, #4
 80077b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d015      	beq.n	80077ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c0:	f7fb f9b0 	bl	8002b24 <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077c6:	e00a      	b.n	80077de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077c8:	f7fb f9ac 	bl	8002b24 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d901      	bls.n	80077de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80077da:	2303      	movs	r3, #3
 80077dc:	e0d7      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80077de:	4b4b      	ldr	r3, [pc, #300]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80077e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e2:	f003 0302 	and.w	r3, r3, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d0ee      	beq.n	80077c8 <HAL_RCC_OscConfig+0x368>
 80077ea:	e014      	b.n	8007816 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ec:	f7fb f99a 	bl	8002b24 <HAL_GetTick>
 80077f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077f2:	e00a      	b.n	800780a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80077f4:	f7fb f996 	bl	8002b24 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007802:	4293      	cmp	r3, r2
 8007804:	d901      	bls.n	800780a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007806:	2303      	movs	r3, #3
 8007808:	e0c1      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800780a:	4b40      	ldr	r3, [pc, #256]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	f003 0302 	and.w	r3, r3, #2
 8007812:	2b00      	cmp	r3, #0
 8007814:	d1ee      	bne.n	80077f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007816:	7dfb      	ldrb	r3, [r7, #23]
 8007818:	2b01      	cmp	r3, #1
 800781a:	d105      	bne.n	8007828 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800781c:	4b3b      	ldr	r3, [pc, #236]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	4a3a      	ldr	r2, [pc, #232]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 80ad 	beq.w	800798c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007832:	4b36      	ldr	r3, [pc, #216]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b08      	cmp	r3, #8
 800783c:	d060      	beq.n	8007900 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	2b02      	cmp	r3, #2
 8007844:	d145      	bne.n	80078d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007846:	4b33      	ldr	r3, [pc, #204]	; (8007914 <HAL_RCC_OscConfig+0x4b4>)
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800784c:	f7fb f96a 	bl	8002b24 <HAL_GetTick>
 8007850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007852:	e008      	b.n	8007866 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007854:	f7fb f966 	bl	8002b24 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e093      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1f0      	bne.n	8007854 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a1b      	ldr	r3, [r3, #32]
 800787a:	431a      	orrs	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	019b      	lsls	r3, r3, #6
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	085b      	lsrs	r3, r3, #1
 800788a:	3b01      	subs	r3, #1
 800788c:	041b      	lsls	r3, r3, #16
 800788e:	431a      	orrs	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007894:	061b      	lsls	r3, r3, #24
 8007896:	431a      	orrs	r2, r3
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	071b      	lsls	r3, r3, #28
 800789e:	491b      	ldr	r1, [pc, #108]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80078a0:	4313      	orrs	r3, r2
 80078a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80078a4:	4b1b      	ldr	r3, [pc, #108]	; (8007914 <HAL_RCC_OscConfig+0x4b4>)
 80078a6:	2201      	movs	r2, #1
 80078a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078aa:	f7fb f93b 	bl	8002b24 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078b0:	e008      	b.n	80078c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078b2:	f7fb f937 	bl	8002b24 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d901      	bls.n	80078c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e064      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078c4:	4b11      	ldr	r3, [pc, #68]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d0f0      	beq.n	80078b2 <HAL_RCC_OscConfig+0x452>
 80078d0:	e05c      	b.n	800798c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078d2:	4b10      	ldr	r3, [pc, #64]	; (8007914 <HAL_RCC_OscConfig+0x4b4>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d8:	f7fb f924 	bl	8002b24 <HAL_GetTick>
 80078dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078de:	e008      	b.n	80078f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078e0:	f7fb f920 	bl	8002b24 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d901      	bls.n	80078f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e04d      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078f2:	4b06      	ldr	r3, [pc, #24]	; (800790c <HAL_RCC_OscConfig+0x4ac>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f0      	bne.n	80078e0 <HAL_RCC_OscConfig+0x480>
 80078fe:	e045      	b.n	800798c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	2b01      	cmp	r3, #1
 8007906:	d107      	bne.n	8007918 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e040      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
 800790c:	40023800 	.word	0x40023800
 8007910:	40007000 	.word	0x40007000
 8007914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007918:	4b1f      	ldr	r3, [pc, #124]	; (8007998 <HAL_RCC_OscConfig+0x538>)
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d030      	beq.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007930:	429a      	cmp	r2, r3
 8007932:	d129      	bne.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800793e:	429a      	cmp	r2, r3
 8007940:	d122      	bne.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007948:	4013      	ands	r3, r2
 800794a:	687a      	ldr	r2, [r7, #4]
 800794c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800794e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007950:	4293      	cmp	r3, r2
 8007952:	d119      	bne.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	085b      	lsrs	r3, r3, #1
 8007960:	3b01      	subs	r3, #1
 8007962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007964:	429a      	cmp	r2, r3
 8007966:	d10f      	bne.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007974:	429a      	cmp	r2, r3
 8007976:	d107      	bne.n	8007988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007982:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007984:	429a      	cmp	r2, r3
 8007986:	d001      	beq.n	800798c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e000      	b.n	800798e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40023800 	.word	0x40023800

0800799c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e041      	b.n	8007a32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fa ff8c 	bl	80028e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	3304      	adds	r3, #4
 80079d8:	4619      	mov	r1, r3
 80079da:	4610      	mov	r0, r2
 80079dc:	f000 f95e 	bl	8007c9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
	...

08007a3c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d001      	beq.n	8007a54 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e046      	b.n	8007ae2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2202      	movs	r2, #2
 8007a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a23      	ldr	r2, [pc, #140]	; (8007af0 <HAL_TIM_Base_Start+0xb4>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d022      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a6e:	d01d      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a1f      	ldr	r2, [pc, #124]	; (8007af4 <HAL_TIM_Base_Start+0xb8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d018      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a1e      	ldr	r2, [pc, #120]	; (8007af8 <HAL_TIM_Base_Start+0xbc>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d013      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a1c      	ldr	r2, [pc, #112]	; (8007afc <HAL_TIM_Base_Start+0xc0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d00e      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_TIM_Base_Start+0xc4>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d009      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a19      	ldr	r2, [pc, #100]	; (8007b04 <HAL_TIM_Base_Start+0xc8>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d004      	beq.n	8007aac <HAL_TIM_Base_Start+0x70>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	; (8007b08 <HAL_TIM_Base_Start+0xcc>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d111      	bne.n	8007ad0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b06      	cmp	r3, #6
 8007abc:	d010      	beq.n	8007ae0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0201 	orr.w	r2, r2, #1
 8007acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ace:	e007      	b.n	8007ae0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f042 0201 	orr.w	r2, r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3714      	adds	r7, #20
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr
 8007aee:	bf00      	nop
 8007af0:	40010000 	.word	0x40010000
 8007af4:	40000400 	.word	0x40000400
 8007af8:	40000800 	.word	0x40000800
 8007afc:	40000c00 	.word	0x40000c00
 8007b00:	40010400 	.word	0x40010400
 8007b04:	40014000 	.word	0x40014000
 8007b08:	40001800 	.word	0x40001800

08007b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d101      	bne.n	8007b28 <HAL_TIM_ConfigClockSource+0x1c>
 8007b24:	2302      	movs	r3, #2
 8007b26:	e0b4      	b.n	8007c92 <HAL_TIM_ConfigClockSource+0x186>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2202      	movs	r2, #2
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b60:	d03e      	beq.n	8007be0 <HAL_TIM_ConfigClockSource+0xd4>
 8007b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b66:	f200 8087 	bhi.w	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b6e:	f000 8086 	beq.w	8007c7e <HAL_TIM_ConfigClockSource+0x172>
 8007b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b76:	d87f      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b78:	2b70      	cmp	r3, #112	; 0x70
 8007b7a:	d01a      	beq.n	8007bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8007b7c:	2b70      	cmp	r3, #112	; 0x70
 8007b7e:	d87b      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b80:	2b60      	cmp	r3, #96	; 0x60
 8007b82:	d050      	beq.n	8007c26 <HAL_TIM_ConfigClockSource+0x11a>
 8007b84:	2b60      	cmp	r3, #96	; 0x60
 8007b86:	d877      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b88:	2b50      	cmp	r3, #80	; 0x50
 8007b8a:	d03c      	beq.n	8007c06 <HAL_TIM_ConfigClockSource+0xfa>
 8007b8c:	2b50      	cmp	r3, #80	; 0x50
 8007b8e:	d873      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b90:	2b40      	cmp	r3, #64	; 0x40
 8007b92:	d058      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0x13a>
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d86f      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007b98:	2b30      	cmp	r3, #48	; 0x30
 8007b9a:	d064      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x15a>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d86b      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba0:	2b20      	cmp	r3, #32
 8007ba2:	d060      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x15a>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d867      	bhi.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d05c      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x15a>
 8007bac:	2b10      	cmp	r3, #16
 8007bae:	d05a      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x15a>
 8007bb0:	e062      	b.n	8007c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6818      	ldr	r0, [r3, #0]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	f000 f985 	bl	8007ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	609a      	str	r2, [r3, #8]
      break;
 8007bde:	e04f      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	6899      	ldr	r1, [r3, #8]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	68db      	ldr	r3, [r3, #12]
 8007bf0:	f000 f96e 	bl	8007ed0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c02:	609a      	str	r2, [r3, #8]
      break;
 8007c04:	e03c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	6859      	ldr	r1, [r3, #4]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f000 f8e2 	bl	8007ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2150      	movs	r1, #80	; 0x50
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f000 f93b 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007c24:	e02c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6818      	ldr	r0, [r3, #0]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	6859      	ldr	r1, [r3, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	461a      	mov	r2, r3
 8007c34:	f000 f901 	bl	8007e3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2160      	movs	r1, #96	; 0x60
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 f92b 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007c44:	e01c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6859      	ldr	r1, [r3, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 f8c2 	bl	8007ddc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2140      	movs	r1, #64	; 0x40
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f91b 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007c64:	e00c      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681a      	ldr	r2, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f000 f912 	bl	8007e9a <TIM_ITRx_SetConfig>
      break;
 8007c76:	e003      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c7c:	e000      	b.n	8007c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a40      	ldr	r2, [pc, #256]	; (8007db0 <TIM_Base_SetConfig+0x114>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d013      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cba:	d00f      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a3d      	ldr	r2, [pc, #244]	; (8007db4 <TIM_Base_SetConfig+0x118>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d00b      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	4a3c      	ldr	r2, [pc, #240]	; (8007db8 <TIM_Base_SetConfig+0x11c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d007      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4a3b      	ldr	r2, [pc, #236]	; (8007dbc <TIM_Base_SetConfig+0x120>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d003      	beq.n	8007cdc <TIM_Base_SetConfig+0x40>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a3a      	ldr	r2, [pc, #232]	; (8007dc0 <TIM_Base_SetConfig+0x124>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d108      	bne.n	8007cee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a2f      	ldr	r2, [pc, #188]	; (8007db0 <TIM_Base_SetConfig+0x114>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d02b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cfc:	d027      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a2c      	ldr	r2, [pc, #176]	; (8007db4 <TIM_Base_SetConfig+0x118>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d023      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a2b      	ldr	r2, [pc, #172]	; (8007db8 <TIM_Base_SetConfig+0x11c>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d01f      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a2a      	ldr	r2, [pc, #168]	; (8007dbc <TIM_Base_SetConfig+0x120>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d01b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a29      	ldr	r2, [pc, #164]	; (8007dc0 <TIM_Base_SetConfig+0x124>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d017      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4a28      	ldr	r2, [pc, #160]	; (8007dc4 <TIM_Base_SetConfig+0x128>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d013      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a27      	ldr	r2, [pc, #156]	; (8007dc8 <TIM_Base_SetConfig+0x12c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a26      	ldr	r2, [pc, #152]	; (8007dcc <TIM_Base_SetConfig+0x130>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a25      	ldr	r2, [pc, #148]	; (8007dd0 <TIM_Base_SetConfig+0x134>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a24      	ldr	r2, [pc, #144]	; (8007dd4 <TIM_Base_SetConfig+0x138>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_Base_SetConfig+0xb2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a23      	ldr	r2, [pc, #140]	; (8007dd8 <TIM_Base_SetConfig+0x13c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d108      	bne.n	8007d60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689a      	ldr	r2, [r3, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4a0a      	ldr	r2, [pc, #40]	; (8007db0 <TIM_Base_SetConfig+0x114>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d003      	beq.n	8007d94 <TIM_Base_SetConfig+0xf8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a0c      	ldr	r2, [pc, #48]	; (8007dc0 <TIM_Base_SetConfig+0x124>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d103      	bne.n	8007d9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	691a      	ldr	r2, [r3, #16]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	615a      	str	r2, [r3, #20]
}
 8007da2:	bf00      	nop
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr
 8007dae:	bf00      	nop
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40000400 	.word	0x40000400
 8007db8:	40000800 	.word	0x40000800
 8007dbc:	40000c00 	.word	0x40000c00
 8007dc0:	40010400 	.word	0x40010400
 8007dc4:	40014000 	.word	0x40014000
 8007dc8:	40014400 	.word	0x40014400
 8007dcc:	40014800 	.word	0x40014800
 8007dd0:	40001800 	.word	0x40001800
 8007dd4:	40001c00 	.word	0x40001c00
 8007dd8:	40002000 	.word	0x40002000

08007ddc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6a1b      	ldr	r3, [r3, #32]
 8007df2:	f023 0201 	bic.w	r2, r3, #1
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	011b      	lsls	r3, r3, #4
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	f023 030a 	bic.w	r3, r3, #10
 8007e18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	621a      	str	r2, [r3, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr

08007e3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b087      	sub	sp, #28
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	60f8      	str	r0, [r7, #12]
 8007e42:	60b9      	str	r1, [r7, #8]
 8007e44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6a1b      	ldr	r3, [r3, #32]
 8007e4a:	f023 0210 	bic.w	r2, r3, #16
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	031b      	lsls	r3, r3, #12
 8007e6a:	697a      	ldr	r2, [r7, #20]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007e76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	693a      	ldr	r2, [r7, #16]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	693a      	ldr	r2, [r7, #16]
 8007e8c:	621a      	str	r2, [r3, #32]
}
 8007e8e:	bf00      	nop
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr

08007e9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e9a:	b480      	push	{r7}
 8007e9c:	b085      	sub	sp, #20
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007eb2:	683a      	ldr	r2, [r7, #0]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f043 0307 	orr.w	r3, r3, #7
 8007ebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	609a      	str	r2, [r3, #8]
}
 8007ec4:	bf00      	nop
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	021a      	lsls	r2, r3, #8
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	697a      	ldr	r2, [r7, #20]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	609a      	str	r2, [r3, #8]
}
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d101      	bne.n	8007f28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f24:	2302      	movs	r3, #2
 8007f26:	e05a      	b.n	8007fde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2202      	movs	r2, #2
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68fa      	ldr	r2, [r7, #12]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a21      	ldr	r2, [pc, #132]	; (8007fec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d022      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f74:	d01d      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1d      	ldr	r2, [pc, #116]	; (8007ff0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d018      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a1b      	ldr	r2, [pc, #108]	; (8007ff4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d013      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a1a      	ldr	r2, [pc, #104]	; (8007ff8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d00e      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d009      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a17      	ldr	r2, [pc, #92]	; (8008000 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a15      	ldr	r2, [pc, #84]	; (8008004 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d10c      	bne.n	8007fcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3714      	adds	r7, #20
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40010000 	.word	0x40010000
 8007ff0:	40000400 	.word	0x40000400
 8007ff4:	40000800 	.word	0x40000800
 8007ff8:	40000c00 	.word	0x40000c00
 8007ffc:	40010400 	.word	0x40010400
 8008000:	40014000 	.word	0x40014000
 8008004:	40001800 	.word	0x40001800

08008008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d101      	bne.n	800801a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e03f      	b.n	800809a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008020:	b2db      	uxtb	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d106      	bne.n	8008034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7fa fca0 	bl	8002974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2224      	movs	r2, #36	; 0x24
 8008038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800804a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f829 	bl	80080a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68da      	ldr	r2, [r3, #12]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2220      	movs	r2, #32
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2220      	movs	r2, #32
 8008094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080a8:	b09f      	sub	sp, #124	; 0x7c
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	68d9      	ldr	r1, [r3, #12]
 80080bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080be:	681a      	ldr	r2, [r3, #0]
 80080c0:	ea40 0301 	orr.w	r3, r0, r1
 80080c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80080c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080cc:	691b      	ldr	r3, [r3, #16]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	4313      	orrs	r3, r2
 80080dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80080de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080e8:	f021 010c 	bic.w	r1, r1, #12
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080f2:	430b      	orrs	r3, r1
 80080f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008102:	6999      	ldr	r1, [r3, #24]
 8008104:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	ea40 0301 	orr.w	r3, r0, r1
 800810c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800810e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4bc5      	ldr	r3, [pc, #788]	; (8008428 <UART_SetConfig+0x384>)
 8008114:	429a      	cmp	r2, r3
 8008116:	d004      	beq.n	8008122 <UART_SetConfig+0x7e>
 8008118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	4bc3      	ldr	r3, [pc, #780]	; (800842c <UART_SetConfig+0x388>)
 800811e:	429a      	cmp	r2, r3
 8008120:	d103      	bne.n	800812a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008122:	f7fe ffd7 	bl	80070d4 <HAL_RCC_GetPCLK2Freq>
 8008126:	6778      	str	r0, [r7, #116]	; 0x74
 8008128:	e002      	b.n	8008130 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800812a:	f7fe ffbf 	bl	80070ac <HAL_RCC_GetPCLK1Freq>
 800812e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008130:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008132:	69db      	ldr	r3, [r3, #28]
 8008134:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008138:	f040 80b6 	bne.w	80082a8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800813c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800813e:	461c      	mov	r4, r3
 8008140:	f04f 0500 	mov.w	r5, #0
 8008144:	4622      	mov	r2, r4
 8008146:	462b      	mov	r3, r5
 8008148:	1891      	adds	r1, r2, r2
 800814a:	6439      	str	r1, [r7, #64]	; 0x40
 800814c:	415b      	adcs	r3, r3
 800814e:	647b      	str	r3, [r7, #68]	; 0x44
 8008150:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008154:	1912      	adds	r2, r2, r4
 8008156:	eb45 0303 	adc.w	r3, r5, r3
 800815a:	f04f 0000 	mov.w	r0, #0
 800815e:	f04f 0100 	mov.w	r1, #0
 8008162:	00d9      	lsls	r1, r3, #3
 8008164:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008168:	00d0      	lsls	r0, r2, #3
 800816a:	4602      	mov	r2, r0
 800816c:	460b      	mov	r3, r1
 800816e:	1911      	adds	r1, r2, r4
 8008170:	6639      	str	r1, [r7, #96]	; 0x60
 8008172:	416b      	adcs	r3, r5
 8008174:	667b      	str	r3, [r7, #100]	; 0x64
 8008176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	461a      	mov	r2, r3
 800817c:	f04f 0300 	mov.w	r3, #0
 8008180:	1891      	adds	r1, r2, r2
 8008182:	63b9      	str	r1, [r7, #56]	; 0x38
 8008184:	415b      	adcs	r3, r3
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800818c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008190:	f7f8 fdda 	bl	8000d48 <__aeabi_uldivmod>
 8008194:	4602      	mov	r2, r0
 8008196:	460b      	mov	r3, r1
 8008198:	4ba5      	ldr	r3, [pc, #660]	; (8008430 <UART_SetConfig+0x38c>)
 800819a:	fba3 2302 	umull	r2, r3, r3, r2
 800819e:	095b      	lsrs	r3, r3, #5
 80081a0:	011e      	lsls	r6, r3, #4
 80081a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081a4:	461c      	mov	r4, r3
 80081a6:	f04f 0500 	mov.w	r5, #0
 80081aa:	4622      	mov	r2, r4
 80081ac:	462b      	mov	r3, r5
 80081ae:	1891      	adds	r1, r2, r2
 80081b0:	6339      	str	r1, [r7, #48]	; 0x30
 80081b2:	415b      	adcs	r3, r3
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
 80081b6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80081ba:	1912      	adds	r2, r2, r4
 80081bc:	eb45 0303 	adc.w	r3, r5, r3
 80081c0:	f04f 0000 	mov.w	r0, #0
 80081c4:	f04f 0100 	mov.w	r1, #0
 80081c8:	00d9      	lsls	r1, r3, #3
 80081ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80081ce:	00d0      	lsls	r0, r2, #3
 80081d0:	4602      	mov	r2, r0
 80081d2:	460b      	mov	r3, r1
 80081d4:	1911      	adds	r1, r2, r4
 80081d6:	65b9      	str	r1, [r7, #88]	; 0x58
 80081d8:	416b      	adcs	r3, r5
 80081da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	461a      	mov	r2, r3
 80081e2:	f04f 0300 	mov.w	r3, #0
 80081e6:	1891      	adds	r1, r2, r2
 80081e8:	62b9      	str	r1, [r7, #40]	; 0x28
 80081ea:	415b      	adcs	r3, r3
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081f6:	f7f8 fda7 	bl	8000d48 <__aeabi_uldivmod>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4b8c      	ldr	r3, [pc, #560]	; (8008430 <UART_SetConfig+0x38c>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	2164      	movs	r1, #100	; 0x64
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	3332      	adds	r3, #50	; 0x32
 8008212:	4a87      	ldr	r2, [pc, #540]	; (8008430 <UART_SetConfig+0x38c>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	005b      	lsls	r3, r3, #1
 800821c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008220:	441e      	add	r6, r3
 8008222:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008224:	4618      	mov	r0, r3
 8008226:	f04f 0100 	mov.w	r1, #0
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	1894      	adds	r4, r2, r2
 8008230:	623c      	str	r4, [r7, #32]
 8008232:	415b      	adcs	r3, r3
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800823a:	1812      	adds	r2, r2, r0
 800823c:	eb41 0303 	adc.w	r3, r1, r3
 8008240:	f04f 0400 	mov.w	r4, #0
 8008244:	f04f 0500 	mov.w	r5, #0
 8008248:	00dd      	lsls	r5, r3, #3
 800824a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800824e:	00d4      	lsls	r4, r2, #3
 8008250:	4622      	mov	r2, r4
 8008252:	462b      	mov	r3, r5
 8008254:	1814      	adds	r4, r2, r0
 8008256:	653c      	str	r4, [r7, #80]	; 0x50
 8008258:	414b      	adcs	r3, r1
 800825a:	657b      	str	r3, [r7, #84]	; 0x54
 800825c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	461a      	mov	r2, r3
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	1891      	adds	r1, r2, r2
 8008268:	61b9      	str	r1, [r7, #24]
 800826a:	415b      	adcs	r3, r3
 800826c:	61fb      	str	r3, [r7, #28]
 800826e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008272:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008276:	f7f8 fd67 	bl	8000d48 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4b6c      	ldr	r3, [pc, #432]	; (8008430 <UART_SetConfig+0x38c>)
 8008280:	fba3 1302 	umull	r1, r3, r3, r2
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2164      	movs	r1, #100	; 0x64
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a67      	ldr	r2, [pc, #412]	; (8008430 <UART_SetConfig+0x38c>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 0207 	and.w	r2, r3, #7
 800829e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4432      	add	r2, r6
 80082a4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082a6:	e0b9      	b.n	800841c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082aa:	461c      	mov	r4, r3
 80082ac:	f04f 0500 	mov.w	r5, #0
 80082b0:	4622      	mov	r2, r4
 80082b2:	462b      	mov	r3, r5
 80082b4:	1891      	adds	r1, r2, r2
 80082b6:	6139      	str	r1, [r7, #16]
 80082b8:	415b      	adcs	r3, r3
 80082ba:	617b      	str	r3, [r7, #20]
 80082bc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80082c0:	1912      	adds	r2, r2, r4
 80082c2:	eb45 0303 	adc.w	r3, r5, r3
 80082c6:	f04f 0000 	mov.w	r0, #0
 80082ca:	f04f 0100 	mov.w	r1, #0
 80082ce:	00d9      	lsls	r1, r3, #3
 80082d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80082d4:	00d0      	lsls	r0, r2, #3
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	eb12 0804 	adds.w	r8, r2, r4
 80082de:	eb43 0905 	adc.w	r9, r3, r5
 80082e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f04f 0100 	mov.w	r1, #0
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	008b      	lsls	r3, r1, #2
 80082f6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082fa:	0082      	lsls	r2, r0, #2
 80082fc:	4640      	mov	r0, r8
 80082fe:	4649      	mov	r1, r9
 8008300:	f7f8 fd22 	bl	8000d48 <__aeabi_uldivmod>
 8008304:	4602      	mov	r2, r0
 8008306:	460b      	mov	r3, r1
 8008308:	4b49      	ldr	r3, [pc, #292]	; (8008430 <UART_SetConfig+0x38c>)
 800830a:	fba3 2302 	umull	r2, r3, r3, r2
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	011e      	lsls	r6, r3, #4
 8008312:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008314:	4618      	mov	r0, r3
 8008316:	f04f 0100 	mov.w	r1, #0
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	1894      	adds	r4, r2, r2
 8008320:	60bc      	str	r4, [r7, #8]
 8008322:	415b      	adcs	r3, r3
 8008324:	60fb      	str	r3, [r7, #12]
 8008326:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800832a:	1812      	adds	r2, r2, r0
 800832c:	eb41 0303 	adc.w	r3, r1, r3
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	f04f 0500 	mov.w	r5, #0
 8008338:	00dd      	lsls	r5, r3, #3
 800833a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800833e:	00d4      	lsls	r4, r2, #3
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	1814      	adds	r4, r2, r0
 8008346:	64bc      	str	r4, [r7, #72]	; 0x48
 8008348:	414b      	adcs	r3, r1
 800834a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800834c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f04f 0100 	mov.w	r1, #0
 8008356:	f04f 0200 	mov.w	r2, #0
 800835a:	f04f 0300 	mov.w	r3, #0
 800835e:	008b      	lsls	r3, r1, #2
 8008360:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008364:	0082      	lsls	r2, r0, #2
 8008366:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800836a:	f7f8 fced 	bl	8000d48 <__aeabi_uldivmod>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	4b2f      	ldr	r3, [pc, #188]	; (8008430 <UART_SetConfig+0x38c>)
 8008374:	fba3 1302 	umull	r1, r3, r3, r2
 8008378:	095b      	lsrs	r3, r3, #5
 800837a:	2164      	movs	r1, #100	; 0x64
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	3332      	adds	r3, #50	; 0x32
 8008386:	4a2a      	ldr	r2, [pc, #168]	; (8008430 <UART_SetConfig+0x38c>)
 8008388:	fba2 2303 	umull	r2, r3, r2, r3
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008392:	441e      	add	r6, r3
 8008394:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008396:	4618      	mov	r0, r3
 8008398:	f04f 0100 	mov.w	r1, #0
 800839c:	4602      	mov	r2, r0
 800839e:	460b      	mov	r3, r1
 80083a0:	1894      	adds	r4, r2, r2
 80083a2:	603c      	str	r4, [r7, #0]
 80083a4:	415b      	adcs	r3, r3
 80083a6:	607b      	str	r3, [r7, #4]
 80083a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ac:	1812      	adds	r2, r2, r0
 80083ae:	eb41 0303 	adc.w	r3, r1, r3
 80083b2:	f04f 0400 	mov.w	r4, #0
 80083b6:	f04f 0500 	mov.w	r5, #0
 80083ba:	00dd      	lsls	r5, r3, #3
 80083bc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80083c0:	00d4      	lsls	r4, r2, #3
 80083c2:	4622      	mov	r2, r4
 80083c4:	462b      	mov	r3, r5
 80083c6:	eb12 0a00 	adds.w	sl, r2, r0
 80083ca:	eb43 0b01 	adc.w	fp, r3, r1
 80083ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	4618      	mov	r0, r3
 80083d4:	f04f 0100 	mov.w	r1, #0
 80083d8:	f04f 0200 	mov.w	r2, #0
 80083dc:	f04f 0300 	mov.w	r3, #0
 80083e0:	008b      	lsls	r3, r1, #2
 80083e2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083e6:	0082      	lsls	r2, r0, #2
 80083e8:	4650      	mov	r0, sl
 80083ea:	4659      	mov	r1, fp
 80083ec:	f7f8 fcac 	bl	8000d48 <__aeabi_uldivmod>
 80083f0:	4602      	mov	r2, r0
 80083f2:	460b      	mov	r3, r1
 80083f4:	4b0e      	ldr	r3, [pc, #56]	; (8008430 <UART_SetConfig+0x38c>)
 80083f6:	fba3 1302 	umull	r1, r3, r3, r2
 80083fa:	095b      	lsrs	r3, r3, #5
 80083fc:	2164      	movs	r1, #100	; 0x64
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	011b      	lsls	r3, r3, #4
 8008406:	3332      	adds	r3, #50	; 0x32
 8008408:	4a09      	ldr	r2, [pc, #36]	; (8008430 <UART_SetConfig+0x38c>)
 800840a:	fba2 2303 	umull	r2, r3, r2, r3
 800840e:	095b      	lsrs	r3, r3, #5
 8008410:	f003 020f 	and.w	r2, r3, #15
 8008414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4432      	add	r2, r6
 800841a:	609a      	str	r2, [r3, #8]
}
 800841c:	bf00      	nop
 800841e:	377c      	adds	r7, #124	; 0x7c
 8008420:	46bd      	mov	sp, r7
 8008422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008426:	bf00      	nop
 8008428:	40011000 	.word	0x40011000
 800842c:	40011400 	.word	0x40011400
 8008430:	51eb851f 	.word	0x51eb851f

08008434 <arm_rfft_fast_init_f32>:
 8008434:	084b      	lsrs	r3, r1, #1
 8008436:	2b80      	cmp	r3, #128	; 0x80
 8008438:	b410      	push	{r4}
 800843a:	8201      	strh	r1, [r0, #16]
 800843c:	8003      	strh	r3, [r0, #0]
 800843e:	d047      	beq.n	80084d0 <arm_rfft_fast_init_f32+0x9c>
 8008440:	d917      	bls.n	8008472 <arm_rfft_fast_init_f32+0x3e>
 8008442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008446:	d03d      	beq.n	80084c4 <arm_rfft_fast_init_f32+0x90>
 8008448:	d929      	bls.n	800849e <arm_rfft_fast_init_f32+0x6a>
 800844a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800844e:	d020      	beq.n	8008492 <arm_rfft_fast_init_f32+0x5e>
 8008450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008454:	d113      	bne.n	800847e <arm_rfft_fast_init_f32+0x4a>
 8008456:	4921      	ldr	r1, [pc, #132]	; (80084dc <arm_rfft_fast_init_f32+0xa8>)
 8008458:	4a21      	ldr	r2, [pc, #132]	; (80084e0 <arm_rfft_fast_init_f32+0xac>)
 800845a:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <arm_rfft_fast_init_f32+0xb0>)
 800845c:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008460:	8184      	strh	r4, [r0, #12]
 8008462:	6081      	str	r1, [r0, #8]
 8008464:	6042      	str	r2, [r0, #4]
 8008466:	6143      	str	r3, [r0, #20]
 8008468:	2000      	movs	r0, #0
 800846a:	b240      	sxtb	r0, r0
 800846c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	2b20      	cmp	r3, #32
 8008474:	d01c      	beq.n	80084b0 <arm_rfft_fast_init_f32+0x7c>
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d006      	beq.n	8008488 <arm_rfft_fast_init_f32+0x54>
 800847a:	2b10      	cmp	r3, #16
 800847c:	d01d      	beq.n	80084ba <arm_rfft_fast_init_f32+0x86>
 800847e:	20ff      	movs	r0, #255	; 0xff
 8008480:	b240      	sxtb	r0, r0
 8008482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008486:	4770      	bx	lr
 8008488:	2438      	movs	r4, #56	; 0x38
 800848a:	4917      	ldr	r1, [pc, #92]	; (80084e8 <arm_rfft_fast_init_f32+0xb4>)
 800848c:	4a17      	ldr	r2, [pc, #92]	; (80084ec <arm_rfft_fast_init_f32+0xb8>)
 800848e:	4b18      	ldr	r3, [pc, #96]	; (80084f0 <arm_rfft_fast_init_f32+0xbc>)
 8008490:	e7e6      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 8008492:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8008496:	4917      	ldr	r1, [pc, #92]	; (80084f4 <arm_rfft_fast_init_f32+0xc0>)
 8008498:	4a17      	ldr	r2, [pc, #92]	; (80084f8 <arm_rfft_fast_init_f32+0xc4>)
 800849a:	4b18      	ldr	r3, [pc, #96]	; (80084fc <arm_rfft_fast_init_f32+0xc8>)
 800849c:	e7e0      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 800849e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a2:	d1ec      	bne.n	800847e <arm_rfft_fast_init_f32+0x4a>
 80084a4:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 80084a8:	4915      	ldr	r1, [pc, #84]	; (8008500 <arm_rfft_fast_init_f32+0xcc>)
 80084aa:	4a16      	ldr	r2, [pc, #88]	; (8008504 <arm_rfft_fast_init_f32+0xd0>)
 80084ac:	4b16      	ldr	r3, [pc, #88]	; (8008508 <arm_rfft_fast_init_f32+0xd4>)
 80084ae:	e7d7      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 80084b0:	2430      	movs	r4, #48	; 0x30
 80084b2:	4916      	ldr	r1, [pc, #88]	; (800850c <arm_rfft_fast_init_f32+0xd8>)
 80084b4:	4a16      	ldr	r2, [pc, #88]	; (8008510 <arm_rfft_fast_init_f32+0xdc>)
 80084b6:	4b17      	ldr	r3, [pc, #92]	; (8008514 <arm_rfft_fast_init_f32+0xe0>)
 80084b8:	e7d2      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 80084ba:	2414      	movs	r4, #20
 80084bc:	4916      	ldr	r1, [pc, #88]	; (8008518 <arm_rfft_fast_init_f32+0xe4>)
 80084be:	4a17      	ldr	r2, [pc, #92]	; (800851c <arm_rfft_fast_init_f32+0xe8>)
 80084c0:	4b17      	ldr	r3, [pc, #92]	; (8008520 <arm_rfft_fast_init_f32+0xec>)
 80084c2:	e7cd      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 80084c4:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 80084c8:	4916      	ldr	r1, [pc, #88]	; (8008524 <arm_rfft_fast_init_f32+0xf0>)
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <arm_rfft_fast_init_f32+0xf4>)
 80084cc:	4b17      	ldr	r3, [pc, #92]	; (800852c <arm_rfft_fast_init_f32+0xf8>)
 80084ce:	e7c7      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 80084d0:	24d0      	movs	r4, #208	; 0xd0
 80084d2:	4917      	ldr	r1, [pc, #92]	; (8008530 <arm_rfft_fast_init_f32+0xfc>)
 80084d4:	4a17      	ldr	r2, [pc, #92]	; (8008534 <arm_rfft_fast_init_f32+0x100>)
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <arm_rfft_fast_init_f32+0x104>)
 80084d8:	e7c2      	b.n	8008460 <arm_rfft_fast_init_f32+0x2c>
 80084da:	bf00      	nop
 80084dc:	0801b50c 	.word	0x0801b50c
 80084e0:	0800c704 	.word	0x0800c704
 80084e4:	08012874 	.word	0x08012874
 80084e8:	08010804 	.word	0x08010804
 80084ec:	0801d2cc 	.word	0x0801d2cc
 80084f0:	0801f7bc 	.word	0x0801f7bc
 80084f4:	080191f4 	.word	0x080191f4
 80084f8:	080170f4 	.word	0x080170f4
 80084fc:	08010874 	.word	0x08010874
 8008500:	0801f44c 	.word	0x0801f44c
 8008504:	08016874 	.word	0x08016874
 8008508:	0801d4cc 	.word	0x0801d4cc
 800850c:	0801a0ac 	.word	0x0801a0ac
 8008510:	080190f4 	.word	0x080190f4
 8008514:	08010704 	.word	0x08010704
 8008518:	0801a004 	.word	0x0801a004
 800851c:	08017074 	.word	0x08017074
 8008520:	0801a02c 	.word	0x0801a02c
 8008524:	0801dccc 	.word	0x0801dccc
 8008528:	0801a50c 	.word	0x0801a50c
 800852c:	0801e04c 	.word	0x0801e04c
 8008530:	0801f9bc 	.word	0x0801f9bc
 8008534:	0801a10c 	.word	0x0801a10c
 8008538:	0801f04c 	.word	0x0801f04c

0800853c <arm_rfft_fast_f32>:
 800853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008540:	8a06      	ldrh	r6, [r0, #16]
 8008542:	0876      	lsrs	r6, r6, #1
 8008544:	4607      	mov	r7, r0
 8008546:	4615      	mov	r5, r2
 8008548:	8006      	strh	r6, [r0, #0]
 800854a:	460c      	mov	r4, r1
 800854c:	2b00      	cmp	r3, #0
 800854e:	d15c      	bne.n	800860a <arm_rfft_fast_f32+0xce>
 8008550:	461a      	mov	r2, r3
 8008552:	2301      	movs	r3, #1
 8008554:	f000 fbe6 	bl	8008d24 <arm_cfft_f32>
 8008558:	edd4 7a00 	vldr	s15, [r4]
 800855c:	ed94 7a01 	vldr	s14, [r4, #4]
 8008560:	883e      	ldrh	r6, [r7, #0]
 8008562:	6978      	ldr	r0, [r7, #20]
 8008564:	ee37 7a07 	vadd.f32	s14, s14, s14
 8008568:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800856c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008570:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008574:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008578:	3e01      	subs	r6, #1
 800857a:	ee26 7aa3 	vmul.f32	s14, s13, s7
 800857e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008582:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8008586:	ed85 7a00 	vstr	s14, [r5]
 800858a:	edc5 7a01 	vstr	s15, [r5, #4]
 800858e:	3010      	adds	r0, #16
 8008590:	f105 0210 	add.w	r2, r5, #16
 8008594:	3b08      	subs	r3, #8
 8008596:	f104 0110 	add.w	r1, r4, #16
 800859a:	ed51 4a02 	vldr	s9, [r1, #-8]
 800859e:	ed93 5a02 	vldr	s10, [r3, #8]
 80085a2:	ed11 7a01 	vldr	s14, [r1, #-4]
 80085a6:	ed10 6a02 	vldr	s12, [r0, #-8]
 80085aa:	edd3 5a03 	vldr	s11, [r3, #12]
 80085ae:	ed50 6a01 	vldr	s13, [r0, #-4]
 80085b2:	ee75 7a64 	vsub.f32	s15, s10, s9
 80085b6:	ee35 4a87 	vadd.f32	s8, s11, s14
 80085ba:	ee35 5a24 	vadd.f32	s10, s10, s9
 80085be:	ee77 5a65 	vsub.f32	s11, s14, s11
 80085c2:	ee66 4a27 	vmul.f32	s9, s12, s15
 80085c6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80085ca:	ee34 5a85 	vadd.f32	s10, s9, s10
 80085ce:	ee26 6a04 	vmul.f32	s12, s12, s8
 80085d2:	ee66 6a84 	vmul.f32	s13, s13, s8
 80085d6:	ee77 7a25 	vadd.f32	s15, s14, s11
 80085da:	ee76 6a85 	vadd.f32	s13, s13, s10
 80085de:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80085e2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80085e6:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80085ea:	3e01      	subs	r6, #1
 80085ec:	ed42 6a02 	vstr	s13, [r2, #-8]
 80085f0:	ed42 7a01 	vstr	s15, [r2, #-4]
 80085f4:	f1a3 0308 	sub.w	r3, r3, #8
 80085f8:	f101 0108 	add.w	r1, r1, #8
 80085fc:	f100 0008 	add.w	r0, r0, #8
 8008600:	f102 0208 	add.w	r2, r2, #8
 8008604:	d1c9      	bne.n	800859a <arm_rfft_fast_f32+0x5e>
 8008606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800860a:	edd1 7a00 	vldr	s15, [r1]
 800860e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008612:	6941      	ldr	r1, [r0, #20]
 8008614:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008618:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800861c:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8008620:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008624:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008628:	3e01      	subs	r6, #1
 800862a:	ed82 7a00 	vstr	s14, [r2]
 800862e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008632:	00f0      	lsls	r0, r6, #3
 8008634:	b3ee      	cbz	r6, 80086b2 <arm_rfft_fast_f32+0x176>
 8008636:	3808      	subs	r0, #8
 8008638:	f101 0e10 	add.w	lr, r1, #16
 800863c:	4420      	add	r0, r4
 800863e:	f104 0110 	add.w	r1, r4, #16
 8008642:	f102 0c10 	add.w	ip, r2, #16
 8008646:	ed90 7a02 	vldr	s14, [r0, #8]
 800864a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800864e:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008652:	ed90 4a03 	vldr	s8, [r0, #12]
 8008656:	ed11 5a01 	vldr	s10, [r1, #-4]
 800865a:	ed5e 5a01 	vldr	s11, [lr, #-4]
 800865e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008662:	ee74 4a05 	vadd.f32	s9, s8, s10
 8008666:	ee26 3a27 	vmul.f32	s6, s12, s15
 800866a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800866e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008672:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8008676:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800867a:	ee77 7a05 	vadd.f32	s15, s14, s10
 800867e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008682:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8008686:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800868a:	ee36 7ae5 	vsub.f32	s14, s13, s11
 800868e:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008692:	ee27 7a23 	vmul.f32	s14, s14, s7
 8008696:	3e01      	subs	r6, #1
 8008698:	ed0c 7a02 	vstr	s14, [ip, #-8]
 800869c:	ed4c 7a01 	vstr	s15, [ip, #-4]
 80086a0:	f1a0 0008 	sub.w	r0, r0, #8
 80086a4:	f101 0108 	add.w	r1, r1, #8
 80086a8:	f10e 0e08 	add.w	lr, lr, #8
 80086ac:	f10c 0c08 	add.w	ip, ip, #8
 80086b0:	d1c9      	bne.n	8008646 <arm_rfft_fast_f32+0x10a>
 80086b2:	4638      	mov	r0, r7
 80086b4:	4629      	mov	r1, r5
 80086b6:	461a      	mov	r2, r3
 80086b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086bc:	2301      	movs	r3, #1
 80086be:	f000 bb31 	b.w	8008d24 <arm_cfft_f32>
 80086c2:	bf00      	nop

080086c4 <arm_cfft_radix8by2_f32>:
 80086c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c8:	ed2d 8b08 	vpush	{d8-d11}
 80086cc:	f8b0 e000 	ldrh.w	lr, [r0]
 80086d0:	6842      	ldr	r2, [r0, #4]
 80086d2:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80086d6:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80086da:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80086de:	4607      	mov	r7, r0
 80086e0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80086e4:	f000 80af 	beq.w	8008846 <arm_cfft_radix8by2_f32+0x182>
 80086e8:	3310      	adds	r3, #16
 80086ea:	18ce      	adds	r6, r1, r3
 80086ec:	3210      	adds	r2, #16
 80086ee:	4443      	add	r3, r8
 80086f0:	f101 0510 	add.w	r5, r1, #16
 80086f4:	f108 0410 	add.w	r4, r8, #16
 80086f8:	ed54 1a04 	vldr	s3, [r4, #-16]
 80086fc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008700:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008704:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008708:	ed13 5a01 	vldr	s10, [r3, #-4]
 800870c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008710:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008714:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008718:	ed56 2a03 	vldr	s5, [r6, #-12]
 800871c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008720:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008724:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008728:	ed54 7a01 	vldr	s15, [r4, #-4]
 800872c:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008730:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008734:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008738:	ee73 ba21 	vadd.f32	s23, s6, s3
 800873c:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008740:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008744:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008748:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800874c:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008750:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008754:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008758:	ed45 ba04 	vstr	s23, [r5, #-16]
 800875c:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008760:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008764:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008768:	ed06 8a01 	vstr	s16, [r6, #-4]
 800876c:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008770:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008774:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008778:	ee76 6a66 	vsub.f32	s13, s12, s13
 800877c:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008780:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008784:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008788:	ee33 3a61 	vsub.f32	s6, s6, s3
 800878c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008790:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008794:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008798:	ee63 1a22 	vmul.f32	s3, s6, s5
 800879c:	ee24 4a22 	vmul.f32	s8, s8, s5
 80087a0:	ee23 3a06 	vmul.f32	s6, s6, s12
 80087a4:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80087a8:	ee23 6a86 	vmul.f32	s12, s7, s12
 80087ac:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80087b0:	ee36 6a04 	vadd.f32	s12, s12, s8
 80087b4:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80087b8:	ee72 3a63 	vsub.f32	s7, s4, s7
 80087bc:	ee71 2a88 	vadd.f32	s5, s3, s16
 80087c0:	ed44 6a03 	vstr	s13, [r4, #-12]
 80087c4:	ed44 2a04 	vstr	s5, [r4, #-16]
 80087c8:	ed43 3a04 	vstr	s7, [r3, #-16]
 80087cc:	ed03 6a03 	vstr	s12, [r3, #-12]
 80087d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80087d4:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80087d8:	ed12 7a01 	vldr	s14, [r2, #-4]
 80087dc:	ed52 5a02 	vldr	s11, [r2, #-8]
 80087e0:	ee35 6a41 	vsub.f32	s12, s10, s2
 80087e4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80087e8:	ee67 3a87 	vmul.f32	s7, s15, s14
 80087ec:	ee26 5a87 	vmul.f32	s10, s13, s14
 80087f0:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80087f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80087f8:	ee64 4a87 	vmul.f32	s9, s9, s14
 80087fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008800:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008804:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008808:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800880c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008810:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008814:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008818:	f1be 0e01 	subs.w	lr, lr, #1
 800881c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008820:	f105 0510 	add.w	r5, r5, #16
 8008824:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008828:	f106 0610 	add.w	r6, r6, #16
 800882c:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008830:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008834:	f102 0210 	add.w	r2, r2, #16
 8008838:	f104 0410 	add.w	r4, r4, #16
 800883c:	f103 0310 	add.w	r3, r3, #16
 8008840:	f47f af5a 	bne.w	80086f8 <arm_cfft_radix8by2_f32+0x34>
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	fa1f f48c 	uxth.w	r4, ip
 800884a:	4608      	mov	r0, r1
 800884c:	2302      	movs	r3, #2
 800884e:	4621      	mov	r1, r4
 8008850:	f000 fae2 	bl	8008e18 <arm_radix8_butterfly_f32>
 8008854:	ecbd 8b08 	vpop	{d8-d11}
 8008858:	4640      	mov	r0, r8
 800885a:	4621      	mov	r1, r4
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	2302      	movs	r3, #2
 8008860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008864:	f000 bad8 	b.w	8008e18 <arm_radix8_butterfly_f32>

08008868 <arm_cfft_radix8by4_f32>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	ed2d 8b0a 	vpush	{d8-d12}
 8008870:	8802      	ldrh	r2, [r0, #0]
 8008872:	ed91 6a00 	vldr	s12, [r1]
 8008876:	b08f      	sub	sp, #60	; 0x3c
 8008878:	460f      	mov	r7, r1
 800887a:	0852      	lsrs	r2, r2, #1
 800887c:	0093      	lsls	r3, r2, #2
 800887e:	900c      	str	r0, [sp, #48]	; 0x30
 8008880:	9103      	str	r1, [sp, #12]
 8008882:	6841      	ldr	r1, [r0, #4]
 8008884:	ed97 7a01 	vldr	s14, [r7, #4]
 8008888:	4638      	mov	r0, r7
 800888a:	4418      	add	r0, r3
 800888c:	4606      	mov	r6, r0
 800888e:	9009      	str	r0, [sp, #36]	; 0x24
 8008890:	4418      	add	r0, r3
 8008892:	edd0 6a00 	vldr	s13, [r0]
 8008896:	edd6 3a00 	vldr	s7, [r6]
 800889a:	edd6 2a01 	vldr	s5, [r6, #4]
 800889e:	edd0 7a01 	vldr	s15, [r0, #4]
 80088a2:	900a      	str	r0, [sp, #40]	; 0x28
 80088a4:	ee76 5a26 	vadd.f32	s11, s12, s13
 80088a8:	4604      	mov	r4, r0
 80088aa:	4625      	mov	r5, r4
 80088ac:	441c      	add	r4, r3
 80088ae:	ed94 4a00 	vldr	s8, [r4]
 80088b2:	ed94 5a01 	vldr	s10, [r4, #4]
 80088b6:	9401      	str	r4, [sp, #4]
 80088b8:	ee75 4aa3 	vadd.f32	s9, s11, s7
 80088bc:	4630      	mov	r0, r6
 80088be:	ee74 4a24 	vadd.f32	s9, s8, s9
 80088c2:	463e      	mov	r6, r7
 80088c4:	ee14 ea90 	vmov	lr, s9
 80088c8:	ee76 6a66 	vsub.f32	s13, s12, s13
 80088cc:	f846 eb08 	str.w	lr, [r6], #8
 80088d0:	ee37 6a27 	vadd.f32	s12, s14, s15
 80088d4:	edd0 4a01 	vldr	s9, [r0, #4]
 80088d8:	9604      	str	r6, [sp, #16]
 80088da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088de:	9e01      	ldr	r6, [sp, #4]
 80088e0:	ee32 3aa6 	vadd.f32	s6, s5, s13
 80088e4:	ed96 2a01 	vldr	s4, [r6, #4]
 80088e8:	ee36 7a24 	vadd.f32	s14, s12, s9
 80088ec:	ee75 5ae3 	vsub.f32	s11, s11, s7
 80088f0:	ee77 4ae3 	vsub.f32	s9, s15, s7
 80088f4:	ee36 6a62 	vsub.f32	s12, s12, s5
 80088f8:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80088fc:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008900:	ee73 3a45 	vsub.f32	s7, s6, s10
 8008904:	4604      	mov	r4, r0
 8008906:	ee36 6a45 	vsub.f32	s12, s12, s10
 800890a:	ee75 6a26 	vadd.f32	s13, s10, s13
 800890e:	46a3      	mov	fp, r4
 8008910:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008914:	ee34 5a84 	vadd.f32	s10, s9, s8
 8008918:	ee13 8a90 	vmov	r8, s7
 800891c:	46a4      	mov	ip, r4
 800891e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008922:	ed87 7a01 	vstr	s14, [r7, #4]
 8008926:	f84b 8b08 	str.w	r8, [fp], #8
 800892a:	f1ac 0704 	sub.w	r7, ip, #4
 800892e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008932:	f101 0c08 	add.w	ip, r1, #8
 8008936:	462c      	mov	r4, r5
 8008938:	f8cd c014 	str.w	ip, [sp, #20]
 800893c:	ee15 ca90 	vmov	ip, s11
 8008940:	f844 cb08 	str.w	ip, [r4], #8
 8008944:	9407      	str	r4, [sp, #28]
 8008946:	f101 0410 	add.w	r4, r1, #16
 800894a:	ed85 6a01 	vstr	s12, [r5, #4]
 800894e:	0852      	lsrs	r2, r2, #1
 8008950:	9402      	str	r4, [sp, #8]
 8008952:	462c      	mov	r4, r5
 8008954:	f101 0518 	add.w	r5, r1, #24
 8008958:	920b      	str	r2, [sp, #44]	; 0x2c
 800895a:	46b2      	mov	sl, r6
 800895c:	9506      	str	r5, [sp, #24]
 800895e:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8008962:	3a02      	subs	r2, #2
 8008964:	ee16 5a90 	vmov	r5, s13
 8008968:	46b6      	mov	lr, r6
 800896a:	4630      	mov	r0, r6
 800896c:	0852      	lsrs	r2, r2, #1
 800896e:	f84a 5b08 	str.w	r5, [sl], #8
 8008972:	f1a0 0604 	sub.w	r6, r0, #4
 8008976:	edce 7a01 	vstr	s15, [lr, #4]
 800897a:	9208      	str	r2, [sp, #32]
 800897c:	f000 8130 	beq.w	8008be0 <arm_cfft_radix8by4_f32+0x378>
 8008980:	4691      	mov	r9, r2
 8008982:	9a03      	ldr	r2, [sp, #12]
 8008984:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008988:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800898c:	3b08      	subs	r3, #8
 800898e:	f102 0510 	add.w	r5, r2, #16
 8008992:	f101 0c20 	add.w	ip, r1, #32
 8008996:	f1a4 020c 	sub.w	r2, r4, #12
 800899a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800899e:	4433      	add	r3, r6
 80089a0:	3410      	adds	r4, #16
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80089aa:	ed14 5a02 	vldr	s10, [r4, #-8]
 80089ae:	ed91 7a00 	vldr	s14, [r1]
 80089b2:	edd0 7a00 	vldr	s15, [r0]
 80089b6:	ed15 4a01 	vldr	s8, [r5, #-4]
 80089ba:	ed54 5a01 	vldr	s11, [r4, #-4]
 80089be:	edd0 6a01 	vldr	s13, [r0, #4]
 80089c2:	ed91 6a01 	vldr	s12, [r1, #4]
 80089c6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80089ca:	ee34 0a25 	vadd.f32	s0, s8, s11
 80089ce:	ee78 4a07 	vadd.f32	s9, s16, s14
 80089d2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80089d6:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80089da:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80089de:	ed45 4a02 	vstr	s9, [r5, #-8]
 80089e2:	edd1 4a01 	vldr	s9, [r1, #4]
 80089e6:	ed90 4a01 	vldr	s8, [r0, #4]
 80089ea:	ee70 4a24 	vadd.f32	s9, s0, s9
 80089ee:	ee76 aa05 	vadd.f32	s21, s12, s10
 80089f2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80089f6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80089fa:	ed45 4a01 	vstr	s9, [r5, #-4]
 80089fe:	edd6 1a00 	vldr	s3, [r6]
 8008a02:	edd7 0a00 	vldr	s1, [r7]
 8008a06:	ed92 4a02 	vldr	s8, [r2, #8]
 8008a0a:	edd3 3a02 	vldr	s7, [r3, #8]
 8008a0e:	ed93 2a01 	vldr	s4, [r3, #4]
 8008a12:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008a16:	edd2 2a01 	vldr	s5, [r2, #4]
 8008a1a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008a1e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008a22:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008a26:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008a2a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008a2e:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8008a32:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008a36:	ee18 aa90 	vmov	sl, s17
 8008a3a:	f847 a908 	str.w	sl, [r7], #-8
 8008a3e:	edd2 8a01 	vldr	s17, [r2, #4]
 8008a42:	ed93 9a01 	vldr	s18, [r3, #4]
 8008a46:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008a4a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008a4e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008a52:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008a56:	edc7 8a01 	vstr	s17, [r7, #4]
 8008a5a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008a5e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008a62:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008a66:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008a6a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008a6e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008a72:	ee30 9a81 	vadd.f32	s18, s1, s2
 8008a76:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008a7a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008a7e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008a82:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008a86:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008a8a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008a8e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008a92:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008a96:	ee1c aa10 	vmov	sl, s24
 8008a9a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008a9e:	f841 ab08 	str.w	sl, [r1], #8
 8008aa2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008aa6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008aaa:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008aae:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008ab2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008ab6:	edc2 8a01 	vstr	s17, [r2, #4]
 8008aba:	ed82 ba02 	vstr	s22, [r2, #8]
 8008abe:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008ac2:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008ac6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008aca:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008ace:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008ad2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008ad6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008ada:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008ade:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008ae2:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008ae6:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008aea:	ee60 9a04 	vmul.f32	s19, s0, s8
 8008aee:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008af2:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008af6:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008afa:	ee39 4a68 	vsub.f32	s8, s18, s17
 8008afe:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008b02:	ee14 aa10 	vmov	sl, s8
 8008b06:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008b0a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008b0e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008b12:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008b16:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008b1a:	f846 a908 	str.w	sl, [r6], #-8
 8008b1e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008b22:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008b26:	edc6 3a01 	vstr	s7, [r6, #4]
 8008b2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b32:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008b36:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008b3a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008b3e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008b42:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008b46:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008b4a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008b4e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008b52:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008b56:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008b5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b5e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008b62:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008b66:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008b6a:	ee15 aa90 	vmov	sl, s11
 8008b6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b72:	f840 ab08 	str.w	sl, [r0], #8
 8008b76:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008b7a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8008b82:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008b86:	f105 0508 	add.w	r5, r5, #8
 8008b8a:	ed83 1a02 	vstr	s2, [r3, #8]
 8008b8e:	edc3 2a01 	vstr	s5, [r3, #4]
 8008b92:	f108 0808 	add.w	r8, r8, #8
 8008b96:	f1a2 0208 	sub.w	r2, r2, #8
 8008b9a:	f10c 0c10 	add.w	ip, ip, #16
 8008b9e:	f104 0408 	add.w	r4, r4, #8
 8008ba2:	f10e 0e18 	add.w	lr, lr, #24
 8008ba6:	f1a3 0308 	sub.w	r3, r3, #8
 8008baa:	f47f aefc 	bne.w	80089a6 <arm_cfft_radix8by4_f32+0x13e>
 8008bae:	9908      	ldr	r1, [sp, #32]
 8008bb0:	9802      	ldr	r0, [sp, #8]
 8008bb2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008bb6:	00cb      	lsls	r3, r1, #3
 8008bb8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008bbc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008bc0:	9102      	str	r1, [sp, #8]
 8008bc2:	9904      	ldr	r1, [sp, #16]
 8008bc4:	4419      	add	r1, r3
 8008bc6:	9104      	str	r1, [sp, #16]
 8008bc8:	9905      	ldr	r1, [sp, #20]
 8008bca:	4419      	add	r1, r3
 8008bcc:	9105      	str	r1, [sp, #20]
 8008bce:	9907      	ldr	r1, [sp, #28]
 8008bd0:	449b      	add	fp, r3
 8008bd2:	4419      	add	r1, r3
 8008bd4:	449a      	add	sl, r3
 8008bd6:	9b06      	ldr	r3, [sp, #24]
 8008bd8:	9107      	str	r1, [sp, #28]
 8008bda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bde:	9306      	str	r3, [sp, #24]
 8008be0:	9a04      	ldr	r2, [sp, #16]
 8008be2:	9807      	ldr	r0, [sp, #28]
 8008be4:	edd2 3a00 	vldr	s7, [r2]
 8008be8:	ed90 4a00 	vldr	s8, [r0]
 8008bec:	eddb 7a00 	vldr	s15, [fp]
 8008bf0:	ed9a 3a00 	vldr	s6, [sl]
 8008bf4:	edd2 4a01 	vldr	s9, [r2, #4]
 8008bf8:	ed90 7a01 	vldr	s14, [r0, #4]
 8008bfc:	ed9b 2a01 	vldr	s4, [fp, #4]
 8008c00:	edda 5a01 	vldr	s11, [sl, #4]
 8008c04:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8008c08:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008c0a:	ee73 6a84 	vadd.f32	s13, s7, s8
 8008c0e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8008c12:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8008c16:	ee34 7ac7 	vsub.f32	s14, s9, s14
 8008c1a:	ee33 5a05 	vadd.f32	s10, s6, s10
 8008c1e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8008c22:	ed82 5a00 	vstr	s10, [r2]
 8008c26:	ed9b 5a01 	vldr	s10, [fp, #4]
 8008c2a:	edda 4a01 	vldr	s9, [sl, #4]
 8008c2e:	ee36 5a05 	vadd.f32	s10, s12, s10
 8008c32:	ee72 3a04 	vadd.f32	s7, s4, s8
 8008c36:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008c3a:	ee77 4a67 	vsub.f32	s9, s14, s15
 8008c3e:	ed82 5a01 	vstr	s10, [r2, #4]
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	ee34 5a83 	vadd.f32	s10, s9, s6
 8008c48:	edd2 1a00 	vldr	s3, [r2]
 8008c4c:	edd2 2a01 	vldr	s5, [r2, #4]
 8008c50:	9a02      	ldr	r2, [sp, #8]
 8008c52:	ee73 3ae5 	vsub.f32	s7, s7, s11
 8008c56:	ee36 6a42 	vsub.f32	s12, s12, s4
 8008c5a:	ee63 4aa1 	vmul.f32	s9, s7, s3
 8008c5e:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008c62:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008c66:	ee25 5a21 	vmul.f32	s10, s10, s3
 8008c6a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8008c6e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8008c72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008c76:	edcb 2a00 	vstr	s5, [fp]
 8008c7a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8008c7e:	edd2 3a01 	vldr	s7, [r2, #4]
 8008c82:	ed92 5a00 	vldr	s10, [r2]
 8008c86:	9a06      	ldr	r2, [sp, #24]
 8008c88:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008c8c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008c90:	ee66 4a85 	vmul.f32	s9, s13, s10
 8008c94:	ee26 5a05 	vmul.f32	s10, s12, s10
 8008c98:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8008c9c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8008ca0:	ee75 6a66 	vsub.f32	s13, s10, s13
 8008ca4:	ee34 6a86 	vadd.f32	s12, s9, s12
 8008ca8:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008cb0:	edc0 6a01 	vstr	s13, [r0, #4]
 8008cb4:	ed80 6a00 	vstr	s12, [r0]
 8008cb8:	ed92 6a01 	vldr	s12, [r2, #4]
 8008cbc:	9803      	ldr	r0, [sp, #12]
 8008cbe:	ee77 7a43 	vsub.f32	s15, s14, s6
 8008cc2:	ee75 5a84 	vadd.f32	s11, s11, s8
 8008cc6:	ed92 7a00 	vldr	s14, [r2]
 8008cca:	ee65 6a87 	vmul.f32	s13, s11, s14
 8008cce:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008cd2:	ee65 5a86 	vmul.f32	s11, s11, s12
 8008cd6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008cda:	ee77 5a65 	vsub.f32	s11, s14, s11
 8008cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ce2:	edca 5a01 	vstr	s11, [sl, #4]
 8008ce6:	edca 7a00 	vstr	s15, [sl]
 8008cea:	6872      	ldr	r2, [r6, #4]
 8008cec:	4621      	mov	r1, r4
 8008cee:	2304      	movs	r3, #4
 8008cf0:	f000 f892 	bl	8008e18 <arm_radix8_butterfly_f32>
 8008cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cf6:	6872      	ldr	r2, [r6, #4]
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	2304      	movs	r3, #4
 8008cfc:	f000 f88c 	bl	8008e18 <arm_radix8_butterfly_f32>
 8008d00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008d02:	6872      	ldr	r2, [r6, #4]
 8008d04:	4621      	mov	r1, r4
 8008d06:	2304      	movs	r3, #4
 8008d08:	f000 f886 	bl	8008e18 <arm_radix8_butterfly_f32>
 8008d0c:	9801      	ldr	r0, [sp, #4]
 8008d0e:	6872      	ldr	r2, [r6, #4]
 8008d10:	4621      	mov	r1, r4
 8008d12:	2304      	movs	r3, #4
 8008d14:	b00f      	add	sp, #60	; 0x3c
 8008d16:	ecbd 8b0a 	vpop	{d8-d12}
 8008d1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d1e:	f000 b87b 	b.w	8008e18 <arm_radix8_butterfly_f32>
 8008d22:	bf00      	nop

08008d24 <arm_cfft_f32>:
 8008d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d28:	2a01      	cmp	r2, #1
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	4617      	mov	r7, r2
 8008d2e:	460c      	mov	r4, r1
 8008d30:	4698      	mov	r8, r3
 8008d32:	8805      	ldrh	r5, [r0, #0]
 8008d34:	d054      	beq.n	8008de0 <arm_cfft_f32+0xbc>
 8008d36:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008d3a:	d04c      	beq.n	8008dd6 <arm_cfft_f32+0xb2>
 8008d3c:	d916      	bls.n	8008d6c <arm_cfft_f32+0x48>
 8008d3e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008d42:	d01a      	beq.n	8008d7a <arm_cfft_f32+0x56>
 8008d44:	d95c      	bls.n	8008e00 <arm_cfft_f32+0xdc>
 8008d46:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8008d4a:	d044      	beq.n	8008dd6 <arm_cfft_f32+0xb2>
 8008d4c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008d50:	d105      	bne.n	8008d5e <arm_cfft_f32+0x3a>
 8008d52:	4620      	mov	r0, r4
 8008d54:	4629      	mov	r1, r5
 8008d56:	6872      	ldr	r2, [r6, #4]
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f000 f85d 	bl	8008e18 <arm_radix8_butterfly_f32>
 8008d5e:	f1b8 0f00 	cmp.w	r8, #0
 8008d62:	d111      	bne.n	8008d88 <arm_cfft_f32+0x64>
 8008d64:	2f01      	cmp	r7, #1
 8008d66:	d016      	beq.n	8008d96 <arm_cfft_f32+0x72>
 8008d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d6c:	2d20      	cmp	r5, #32
 8008d6e:	d032      	beq.n	8008dd6 <arm_cfft_f32+0xb2>
 8008d70:	d94a      	bls.n	8008e08 <arm_cfft_f32+0xe4>
 8008d72:	2d40      	cmp	r5, #64	; 0x40
 8008d74:	d0ed      	beq.n	8008d52 <arm_cfft_f32+0x2e>
 8008d76:	2d80      	cmp	r5, #128	; 0x80
 8008d78:	d1f1      	bne.n	8008d5e <arm_cfft_f32+0x3a>
 8008d7a:	4630      	mov	r0, r6
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7ff fca1 	bl	80086c4 <arm_cfft_radix8by2_f32>
 8008d82:	f1b8 0f00 	cmp.w	r8, #0
 8008d86:	d0ed      	beq.n	8008d64 <arm_cfft_f32+0x40>
 8008d88:	4620      	mov	r0, r4
 8008d8a:	89b1      	ldrh	r1, [r6, #12]
 8008d8c:	68b2      	ldr	r2, [r6, #8]
 8008d8e:	f7f7 fa3f 	bl	8000210 <arm_bitreversal_32>
 8008d92:	2f01      	cmp	r7, #1
 8008d94:	d1e8      	bne.n	8008d68 <arm_cfft_f32+0x44>
 8008d96:	ee07 5a90 	vmov	s15, r5
 8008d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d9e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008da2:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8008da6:	2d00      	cmp	r5, #0
 8008da8:	d0de      	beq.n	8008d68 <arm_cfft_f32+0x44>
 8008daa:	f104 0108 	add.w	r1, r4, #8
 8008dae:	2300      	movs	r3, #0
 8008db0:	3301      	adds	r3, #1
 8008db2:	429d      	cmp	r5, r3
 8008db4:	f101 0108 	add.w	r1, r1, #8
 8008db8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8008dbc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008dc0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008dc4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008dc8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8008dcc:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008dd0:	d1ee      	bne.n	8008db0 <arm_cfft_f32+0x8c>
 8008dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f7ff fd45 	bl	8008868 <arm_cfft_radix8by4_f32>
 8008dde:	e7be      	b.n	8008d5e <arm_cfft_f32+0x3a>
 8008de0:	b1ad      	cbz	r5, 8008e0e <arm_cfft_f32+0xea>
 8008de2:	f101 030c 	add.w	r3, r1, #12
 8008de6:	2200      	movs	r2, #0
 8008de8:	ed53 7a02 	vldr	s15, [r3, #-8]
 8008dec:	3201      	adds	r2, #1
 8008dee:	eef1 7a67 	vneg.f32	s15, s15
 8008df2:	4295      	cmp	r5, r2
 8008df4:	ed43 7a02 	vstr	s15, [r3, #-8]
 8008df8:	f103 0308 	add.w	r3, r3, #8
 8008dfc:	d1f4      	bne.n	8008de8 <arm_cfft_f32+0xc4>
 8008dfe:	e79a      	b.n	8008d36 <arm_cfft_f32+0x12>
 8008e00:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8008e04:	d0a5      	beq.n	8008d52 <arm_cfft_f32+0x2e>
 8008e06:	e7aa      	b.n	8008d5e <arm_cfft_f32+0x3a>
 8008e08:	2d10      	cmp	r5, #16
 8008e0a:	d0b6      	beq.n	8008d7a <arm_cfft_f32+0x56>
 8008e0c:	e7a7      	b.n	8008d5e <arm_cfft_f32+0x3a>
 8008e0e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8008e12:	d894      	bhi.n	8008d3e <arm_cfft_f32+0x1a>
 8008e14:	e7aa      	b.n	8008d6c <arm_cfft_f32+0x48>
 8008e16:	bf00      	nop

08008e18 <arm_radix8_butterfly_f32>:
 8008e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1c:	ed2d 8b10 	vpush	{d8-d15}
 8008e20:	b09d      	sub	sp, #116	; 0x74
 8008e22:	461c      	mov	r4, r3
 8008e24:	ed9f bac8 	vldr	s22, [pc, #800]	; 8009148 <arm_radix8_butterfly_f32+0x330>
 8008e28:	921a      	str	r2, [sp, #104]	; 0x68
 8008e2a:	1d03      	adds	r3, r0, #4
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	4689      	mov	r9, r1
 8008e30:	468b      	mov	fp, r1
 8008e32:	931b      	str	r3, [sp, #108]	; 0x6c
 8008e34:	9400      	str	r4, [sp, #0]
 8008e36:	469e      	mov	lr, r3
 8008e38:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8008e3c:	005a      	lsls	r2, r3, #1
 8008e3e:	18d6      	adds	r6, r2, r3
 8008e40:	18f5      	adds	r5, r6, r3
 8008e42:	9203      	str	r2, [sp, #12]
 8008e44:	195a      	adds	r2, r3, r5
 8008e46:	18d0      	adds	r0, r2, r3
 8008e48:	00df      	lsls	r7, r3, #3
 8008e4a:	1819      	adds	r1, r3, r0
 8008e4c:	463c      	mov	r4, r7
 8008e4e:	9701      	str	r7, [sp, #4]
 8008e50:	4457      	add	r7, sl
 8008e52:	930c      	str	r3, [sp, #48]	; 0x30
 8008e54:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 8008e5e:	eb07 0c04 	add.w	ip, r7, r4
 8008e62:	9c00      	ldr	r4, [sp, #0]
 8008e64:	9302      	str	r3, [sp, #8]
 8008e66:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8008e6a:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 8008e6e:	3204      	adds	r2, #4
 8008e70:	3104      	adds	r1, #4
 8008e72:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 8008e76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008e7a:	f04f 0800 	mov.w	r8, #0
 8008e7e:	eddc 7a00 	vldr	s15, [ip]
 8008e82:	edd7 6a00 	vldr	s13, [r7]
 8008e86:	edd6 3a00 	vldr	s7, [r6]
 8008e8a:	ed5e aa01 	vldr	s21, [lr, #-4]
 8008e8e:	edd5 4a00 	vldr	s9, [r5]
 8008e92:	ed90 2a00 	vldr	s4, [r0]
 8008e96:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008e9a:	ed51 0a01 	vldr	s1, [r1, #-4]
 8008e9e:	ee77 8a82 	vadd.f32	s17, s15, s4
 8008ea2:	ee33 4aa0 	vadd.f32	s8, s7, s1
 8008ea6:	ee76 1a87 	vadd.f32	s3, s13, s14
 8008eaa:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 8008eae:	ee31 6a84 	vadd.f32	s12, s3, s8
 8008eb2:	ee33 5a28 	vadd.f32	s10, s6, s17
 8008eb6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8008eba:	ee75 6a06 	vadd.f32	s13, s10, s12
 8008ebe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8008ec2:	ed4e 6a01 	vstr	s13, [lr, #-4]
 8008ec6:	ed85 5a00 	vstr	s10, [r5]
 8008eca:	ed96 1a01 	vldr	s2, [r6, #4]
 8008ece:	edd7 5a01 	vldr	s11, [r7, #4]
 8008ed2:	ed92 aa00 	vldr	s20, [r2]
 8008ed6:	ed91 6a00 	vldr	s12, [r1]
 8008eda:	ed9e 9a00 	vldr	s18, [lr]
 8008ede:	ed95 5a01 	vldr	s10, [r5, #4]
 8008ee2:	eddc 6a01 	vldr	s13, [ip, #4]
 8008ee6:	edd0 9a01 	vldr	s19, [r0, #4]
 8008eea:	ee73 0ae0 	vsub.f32	s1, s7, s1
 8008eee:	ee71 2a46 	vsub.f32	s5, s2, s12
 8008ef2:	ee75 3aca 	vsub.f32	s7, s11, s20
 8008ef6:	ee37 0a60 	vsub.f32	s0, s14, s1
 8008efa:	ee33 8aa2 	vadd.f32	s16, s7, s5
 8008efe:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008f02:	ee73 2ae2 	vsub.f32	s5, s7, s5
 8008f06:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8008f0a:	ee79 3a05 	vadd.f32	s7, s18, s10
 8008f0e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8008f12:	ee39 5a45 	vsub.f32	s10, s18, s10
 8008f16:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 8008f1a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8008f1e:	ee75 5a8a 	vadd.f32	s11, s11, s20
 8008f22:	ee31 6a06 	vadd.f32	s12, s2, s12
 8008f26:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8008f2a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8008f2e:	ee62 2a8b 	vmul.f32	s5, s5, s22
 8008f32:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8008f36:	ee33 3a68 	vsub.f32	s6, s6, s17
 8008f3a:	ee36 0a88 	vadd.f32	s0, s13, s16
 8008f3e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8008f42:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8008f46:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8008f4a:	ee75 6a62 	vsub.f32	s13, s10, s5
 8008f4e:	ee33 4ac9 	vsub.f32	s8, s7, s18
 8008f52:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8008f56:	ee33 1a89 	vadd.f32	s2, s7, s18
 8008f5a:	ee74 5ae0 	vsub.f32	s11, s9, s1
 8008f5e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8008f62:	ee75 4a22 	vadd.f32	s9, s10, s5
 8008f66:	ee32 5a27 	vadd.f32	s10, s4, s15
 8008f6a:	ee72 7a67 	vsub.f32	s15, s4, s15
 8008f6e:	ee33 8a06 	vadd.f32	s16, s6, s12
 8008f72:	ee75 2a87 	vadd.f32	s5, s11, s14
 8008f76:	ee31 9a28 	vadd.f32	s18, s2, s17
 8008f7a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008f7e:	ee74 0a61 	vsub.f32	s1, s8, s3
 8008f82:	ee33 2a80 	vadd.f32	s4, s7, s0
 8008f86:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8008f8a:	ee34 3ac5 	vsub.f32	s6, s9, s10
 8008f8e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008f92:	ee31 1a68 	vsub.f32	s2, s2, s17
 8008f96:	ee34 4a21 	vadd.f32	s8, s8, s3
 8008f9a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8008f9e:	ee74 4a85 	vadd.f32	s9, s9, s10
 8008fa2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008fa6:	44d8      	add	r8, fp
 8008fa8:	45c1      	cmp	r9, r8
 8008faa:	ed8e 9a00 	vstr	s18, [lr]
 8008fae:	ed85 1a01 	vstr	s2, [r5, #4]
 8008fb2:	449e      	add	lr, r3
 8008fb4:	ed8c 8a00 	vstr	s16, [ip]
 8008fb8:	441d      	add	r5, r3
 8008fba:	ed80 6a00 	vstr	s12, [r0]
 8008fbe:	edcc 0a01 	vstr	s1, [ip, #4]
 8008fc2:	ed80 4a01 	vstr	s8, [r0, #4]
 8008fc6:	449c      	add	ip, r3
 8008fc8:	ed87 2a00 	vstr	s4, [r7]
 8008fcc:	4418      	add	r0, r3
 8008fce:	ed41 3a01 	vstr	s7, [r1, #-4]
 8008fd2:	ed42 2a01 	vstr	s5, [r2, #-4]
 8008fd6:	ed86 7a00 	vstr	s14, [r6]
 8008fda:	ed87 3a01 	vstr	s6, [r7, #4]
 8008fde:	edc1 4a00 	vstr	s9, [r1]
 8008fe2:	441f      	add	r7, r3
 8008fe4:	edc2 5a00 	vstr	s11, [r2]
 8008fe8:	4419      	add	r1, r3
 8008fea:	edc6 6a01 	vstr	s13, [r6, #4]
 8008fee:	441a      	add	r2, r3
 8008ff0:	441e      	add	r6, r3
 8008ff2:	f63f af44 	bhi.w	8008e7e <arm_radix8_butterfly_f32+0x66>
 8008ff6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008ff8:	2907      	cmp	r1, #7
 8008ffa:	4620      	mov	r0, r4
 8008ffc:	f240 81e9 	bls.w	80093d2 <arm_radix8_butterfly_f32+0x5ba>
 8009000:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8009004:	193e      	adds	r6, r7, r4
 8009006:	1935      	adds	r5, r6, r4
 8009008:	9c03      	ldr	r4, [sp, #12]
 800900a:	9000      	str	r0, [sp, #0]
 800900c:	4622      	mov	r2, r4
 800900e:	3201      	adds	r2, #1
 8009010:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009014:	9900      	ldr	r1, [sp, #0]
 8009016:	1828      	adds	r0, r5, r0
 8009018:	eb00 0e01 	add.w	lr, r0, r1
 800901c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800901e:	440a      	add	r2, r1
 8009020:	eb04 0c01 	add.w	ip, r4, r1
 8009024:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8009028:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800902c:	9a00      	ldr	r2, [sp, #0]
 800902e:	940f      	str	r4, [sp, #60]	; 0x3c
 8009030:	00ed      	lsls	r5, r5, #3
 8009032:	9511      	str	r5, [sp, #68]	; 0x44
 8009034:	00d5      	lsls	r5, r2, #3
 8009036:	950d      	str	r5, [sp, #52]	; 0x34
 8009038:	9d01      	ldr	r5, [sp, #4]
 800903a:	3508      	adds	r5, #8
 800903c:	9516      	str	r5, [sp, #88]	; 0x58
 800903e:	9d02      	ldr	r5, [sp, #8]
 8009040:	3508      	adds	r5, #8
 8009042:	0114      	lsls	r4, r2, #4
 8009044:	9517      	str	r5, [sp, #92]	; 0x5c
 8009046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009048:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800904a:	940e      	str	r4, [sp, #56]	; 0x38
 800904c:	00c0      	lsls	r0, r0, #3
 800904e:	9010      	str	r0, [sp, #64]	; 0x40
 8009050:	18aa      	adds	r2, r5, r2
 8009052:	9207      	str	r2, [sp, #28]
 8009054:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009056:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8009058:	18aa      	adds	r2, r5, r2
 800905a:	9208      	str	r2, [sp, #32]
 800905c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800905e:	18aa      	adds	r2, r5, r2
 8009060:	9209      	str	r2, [sp, #36]	; 0x24
 8009062:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009066:	f10e 0204 	add.w	r2, lr, #4
 800906a:	920a      	str	r2, [sp, #40]	; 0x28
 800906c:	00c9      	lsls	r1, r1, #3
 800906e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009070:	310c      	adds	r1, #12
 8009072:	00f6      	lsls	r6, r6, #3
 8009074:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 8009078:	9114      	str	r1, [sp, #80]	; 0x50
 800907a:	18a9      	adds	r1, r5, r2
 800907c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800907e:	9612      	str	r6, [sp, #72]	; 0x48
 8009080:	00ff      	lsls	r7, r7, #3
 8009082:	19ae      	adds	r6, r5, r6
 8009084:	3008      	adds	r0, #8
 8009086:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800908a:	9606      	str	r6, [sp, #24]
 800908c:	9019      	str	r0, [sp, #100]	; 0x64
 800908e:	18aa      	adds	r2, r5, r2
 8009090:	0164      	lsls	r4, r4, #5
 8009092:	19ee      	adds	r6, r5, r7
 8009094:	f10c 000c 	add.w	r0, ip, #12
 8009098:	9713      	str	r7, [sp, #76]	; 0x4c
 800909a:	9604      	str	r6, [sp, #16]
 800909c:	9015      	str	r0, [sp, #84]	; 0x54
 800909e:	9103      	str	r1, [sp, #12]
 80090a0:	9205      	str	r2, [sp, #20]
 80090a2:	f104 0208 	add.w	r2, r4, #8
 80090a6:	9218      	str	r2, [sp, #96]	; 0x60
 80090a8:	f04f 0801 	mov.w	r8, #1
 80090ac:	2200      	movs	r2, #0
 80090ae:	f102 0108 	add.w	r1, r2, #8
 80090b2:	460f      	mov	r7, r1
 80090b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80090b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80090b8:	188e      	adds	r6, r1, r2
 80090ba:	9916      	ldr	r1, [sp, #88]	; 0x58
 80090bc:	188d      	adds	r5, r1, r2
 80090be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80090c0:	188c      	adds	r4, r1, r2
 80090c2:	9919      	ldr	r1, [sp, #100]	; 0x64
 80090c4:	1888      	adds	r0, r1, r2
 80090c6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80090c8:	eb01 0c02 	add.w	ip, r1, r2
 80090cc:	9915      	ldr	r1, [sp, #84]	; 0x54
 80090ce:	440a      	add	r2, r1
 80090d0:	9903      	ldr	r1, [sp, #12]
 80090d2:	edd1 fa00 	vldr	s31, [r1]
 80090d6:	9905      	ldr	r1, [sp, #20]
 80090d8:	ed91 fa00 	vldr	s30, [r1]
 80090dc:	9904      	ldr	r1, [sp, #16]
 80090de:	edd1 ea00 	vldr	s29, [r1]
 80090e2:	9906      	ldr	r1, [sp, #24]
 80090e4:	ed91 ea00 	vldr	s28, [r1]
 80090e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090ea:	edd1 da00 	vldr	s27, [r1]
 80090ee:	9908      	ldr	r1, [sp, #32]
 80090f0:	ed91 da00 	vldr	s26, [r1]
 80090f4:	9907      	ldr	r1, [sp, #28]
 80090f6:	edd1 ca00 	vldr	s25, [r1]
 80090fa:	9903      	ldr	r1, [sp, #12]
 80090fc:	ed91 ca01 	vldr	s24, [r1, #4]
 8009100:	9905      	ldr	r1, [sp, #20]
 8009102:	edd1 ba01 	vldr	s23, [r1, #4]
 8009106:	9904      	ldr	r1, [sp, #16]
 8009108:	edd1 aa01 	vldr	s21, [r1, #4]
 800910c:	9906      	ldr	r1, [sp, #24]
 800910e:	ed91 aa01 	vldr	s20, [r1, #4]
 8009112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009114:	edd1 7a01 	vldr	s15, [r1, #4]
 8009118:	9908      	ldr	r1, [sp, #32]
 800911a:	edcd 7a00 	vstr	s15, [sp]
 800911e:	edd1 7a01 	vldr	s15, [r1, #4]
 8009122:	9907      	ldr	r1, [sp, #28]
 8009124:	edcd 7a01 	vstr	s15, [sp, #4]
 8009128:	edd1 7a01 	vldr	s15, [r1, #4]
 800912c:	eb0a 0e07 	add.w	lr, sl, r7
 8009130:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8009132:	edcd 7a02 	vstr	s15, [sp, #8]
 8009136:	eb0c 010a 	add.w	r1, ip, sl
 800913a:	4456      	add	r6, sl
 800913c:	4455      	add	r5, sl
 800913e:	4454      	add	r4, sl
 8009140:	4450      	add	r0, sl
 8009142:	4452      	add	r2, sl
 8009144:	46c4      	mov	ip, r8
 8009146:	e001      	b.n	800914c <arm_radix8_butterfly_f32+0x334>
 8009148:	3f3504f3 	.word	0x3f3504f3
 800914c:	ed96 5a00 	vldr	s10, [r6]
 8009150:	ed52 9a01 	vldr	s19, [r2, #-4]
 8009154:	ed11 6a01 	vldr	s12, [r1, #-4]
 8009158:	edd0 7a00 	vldr	s15, [r0]
 800915c:	ed17 7a01 	vldr	s14, [r7, #-4]
 8009160:	edde 3a00 	vldr	s7, [lr]
 8009164:	ed94 3a00 	vldr	s6, [r4]
 8009168:	ed95 2a00 	vldr	s4, [r5]
 800916c:	ed9e 0a01 	vldr	s0, [lr, #4]
 8009170:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009174:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009178:	ee33 4a29 	vadd.f32	s8, s6, s19
 800917c:	ee77 4a87 	vadd.f32	s9, s15, s14
 8009180:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009184:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009188:	ee32 2a46 	vsub.f32	s4, s4, s12
 800918c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8009190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009194:	ed8e 6a00 	vstr	s12, [lr]
 8009198:	edd0 8a01 	vldr	s17, [r0, #4]
 800919c:	ed95 9a01 	vldr	s18, [r5, #4]
 80091a0:	edd1 2a00 	vldr	s5, [r1]
 80091a4:	ed97 7a00 	vldr	s14, [r7]
 80091a8:	edd4 0a01 	vldr	s1, [r4, #4]
 80091ac:	ed96 6a01 	vldr	s12, [r6, #4]
 80091b0:	edd2 5a00 	vldr	s11, [r2]
 80091b4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80091b8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80091bc:	ee39 5a62 	vsub.f32	s10, s18, s5
 80091c0:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80091c4:	ee38 4a44 	vsub.f32	s8, s16, s8
 80091c8:	ee38 7a87 	vadd.f32	s14, s17, s14
 80091cc:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80091d0:	ee79 2a22 	vadd.f32	s5, s18, s5
 80091d4:	ee75 8a69 	vsub.f32	s17, s10, s19
 80091d8:	ee32 9a27 	vadd.f32	s18, s4, s15
 80091dc:	ee35 5a29 	vadd.f32	s10, s10, s19
 80091e0:	ee72 7a67 	vsub.f32	s15, s4, s15
 80091e4:	ee30 2a06 	vadd.f32	s4, s0, s12
 80091e8:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80091ec:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80091f0:	ee32 9a08 	vadd.f32	s18, s4, s16
 80091f4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80091f8:	ee32 2a48 	vsub.f32	s4, s4, s16
 80091fc:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009200:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8009204:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009208:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800920c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009210:	ee30 6a46 	vsub.f32	s12, s0, s12
 8009214:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009218:	ee36 0a28 	vadd.f32	s0, s12, s17
 800921c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009220:	ee32 7a64 	vsub.f32	s14, s4, s9
 8009224:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009228:	ee36 6a68 	vsub.f32	s12, s12, s17
 800922c:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009230:	ee75 8a85 	vadd.f32	s17, s11, s10
 8009234:	ee74 3a22 	vadd.f32	s7, s8, s5
 8009238:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800923c:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009240:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009244:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009248:	ee76 5a43 	vsub.f32	s11, s12, s6
 800924c:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009250:	ee72 4a24 	vadd.f32	s9, s4, s9
 8009254:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009258:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800925c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8009260:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009264:	ee36 6a03 	vadd.f32	s12, s12, s6
 8009268:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800926c:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8009270:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009274:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009278:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800927c:	ee39 1a01 	vadd.f32	s2, s18, s2
 8009280:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009284:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009288:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800928c:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8009290:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009294:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009298:	ee72 6a66 	vsub.f32	s13, s4, s13
 800929c:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80092a0:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80092a4:	ed9d 4a02 	vldr	s8, [sp, #8]
 80092a8:	ed8e 1a01 	vstr	s2, [lr, #4]
 80092ac:	ee77 3a63 	vsub.f32	s7, s14, s7
 80092b0:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80092b4:	ed9d 7a01 	vldr	s14, [sp, #4]
 80092b8:	ed86 3a00 	vstr	s6, [r6]
 80092bc:	ee30 9a89 	vadd.f32	s18, s1, s18
 80092c0:	ee32 2a05 	vadd.f32	s4, s4, s10
 80092c4:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80092c8:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80092cc:	ee67 2a22 	vmul.f32	s5, s14, s5
 80092d0:	ee64 1a00 	vmul.f32	s3, s8, s0
 80092d4:	ee27 7a24 	vmul.f32	s14, s14, s9
 80092d8:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80092dc:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80092e0:	ee64 8a28 	vmul.f32	s17, s8, s17
 80092e4:	ed9d 4a00 	vldr	s8, [sp]
 80092e8:	edc6 6a01 	vstr	s13, [r6, #4]
 80092ec:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80092f0:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80092f4:	ee64 9a29 	vmul.f32	s19, s8, s19
 80092f8:	ee24 4a25 	vmul.f32	s8, s8, s11
 80092fc:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009300:	ee74 4a84 	vadd.f32	s9, s9, s8
 8009304:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009308:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800930c:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009310:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8009314:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009318:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800931c:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009320:	ee30 0a68 	vsub.f32	s0, s0, s17
 8009324:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009328:	ee70 0a84 	vadd.f32	s1, s1, s8
 800932c:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009330:	44dc      	add	ip, fp
 8009332:	45e1      	cmp	r9, ip
 8009334:	ed84 9a00 	vstr	s18, [r4]
 8009338:	edc4 3a01 	vstr	s7, [r4, #4]
 800933c:	449e      	add	lr, r3
 800933e:	ed02 7a01 	vstr	s14, [r2, #-4]
 8009342:	edc2 2a00 	vstr	s5, [r2]
 8009346:	441e      	add	r6, r3
 8009348:	ed85 2a00 	vstr	s4, [r5]
 800934c:	ed85 8a01 	vstr	s16, [r5, #4]
 8009350:	441c      	add	r4, r3
 8009352:	ed47 1a01 	vstr	s3, [r7, #-4]
 8009356:	ed87 0a00 	vstr	s0, [r7]
 800935a:	441a      	add	r2, r3
 800935c:	ed41 4a01 	vstr	s9, [r1, #-4]
 8009360:	edc1 9a00 	vstr	s19, [r1]
 8009364:	441d      	add	r5, r3
 8009366:	edc0 0a00 	vstr	s1, [r0]
 800936a:	441f      	add	r7, r3
 800936c:	ed80 6a01 	vstr	s12, [r0, #4]
 8009370:	4419      	add	r1, r3
 8009372:	4418      	add	r0, r3
 8009374:	f63f aeea 	bhi.w	800914c <arm_radix8_butterfly_f32+0x334>
 8009378:	9a03      	ldr	r2, [sp, #12]
 800937a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800937c:	440a      	add	r2, r1
 800937e:	9203      	str	r2, [sp, #12]
 8009380:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009382:	9a05      	ldr	r2, [sp, #20]
 8009384:	440a      	add	r2, r1
 8009386:	9205      	str	r2, [sp, #20]
 8009388:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800938a:	9a04      	ldr	r2, [sp, #16]
 800938c:	440a      	add	r2, r1
 800938e:	9204      	str	r2, [sp, #16]
 8009390:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009392:	9a06      	ldr	r2, [sp, #24]
 8009394:	440a      	add	r2, r1
 8009396:	9206      	str	r2, [sp, #24]
 8009398:	9911      	ldr	r1, [sp, #68]	; 0x44
 800939a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800939c:	440a      	add	r2, r1
 800939e:	9209      	str	r2, [sp, #36]	; 0x24
 80093a0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80093a2:	9a08      	ldr	r2, [sp, #32]
 80093a4:	440a      	add	r2, r1
 80093a6:	9208      	str	r2, [sp, #32]
 80093a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093aa:	9a07      	ldr	r2, [sp, #28]
 80093ac:	440a      	add	r2, r1
 80093ae:	9207      	str	r2, [sp, #28]
 80093b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093b4:	f108 0801 	add.w	r8, r8, #1
 80093b8:	3208      	adds	r2, #8
 80093ba:	4588      	cmp	r8, r1
 80093bc:	920a      	str	r2, [sp, #40]	; 0x28
 80093be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80093c0:	f47f ae75 	bne.w	80090ae <arm_radix8_butterfly_f32+0x296>
 80093c4:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	46c3      	mov	fp, r8
 80093cc:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 80093d0:	e532      	b.n	8008e38 <arm_radix8_butterfly_f32+0x20>
 80093d2:	b01d      	add	sp, #116	; 0x74
 80093d4:	ecbd 8b10 	vpop	{d8-d15}
 80093d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093dc <__errno>:
 80093dc:	4b01      	ldr	r3, [pc, #4]	; (80093e4 <__errno+0x8>)
 80093de:	6818      	ldr	r0, [r3, #0]
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000010 	.word	0x20000010

080093e8 <__libc_init_array>:
 80093e8:	b570      	push	{r4, r5, r6, lr}
 80093ea:	4d0d      	ldr	r5, [pc, #52]	; (8009420 <__libc_init_array+0x38>)
 80093ec:	4c0d      	ldr	r4, [pc, #52]	; (8009424 <__libc_init_array+0x3c>)
 80093ee:	1b64      	subs	r4, r4, r5
 80093f0:	10a4      	asrs	r4, r4, #2
 80093f2:	2600      	movs	r6, #0
 80093f4:	42a6      	cmp	r6, r4
 80093f6:	d109      	bne.n	800940c <__libc_init_array+0x24>
 80093f8:	4d0b      	ldr	r5, [pc, #44]	; (8009428 <__libc_init_array+0x40>)
 80093fa:	4c0c      	ldr	r4, [pc, #48]	; (800942c <__libc_init_array+0x44>)
 80093fc:	f003 f864 	bl	800c4c8 <_init>
 8009400:	1b64      	subs	r4, r4, r5
 8009402:	10a4      	asrs	r4, r4, #2
 8009404:	2600      	movs	r6, #0
 8009406:	42a6      	cmp	r6, r4
 8009408:	d105      	bne.n	8009416 <__libc_init_array+0x2e>
 800940a:	bd70      	pop	{r4, r5, r6, pc}
 800940c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009410:	4798      	blx	r3
 8009412:	3601      	adds	r6, #1
 8009414:	e7ee      	b.n	80093f4 <__libc_init_array+0xc>
 8009416:	f855 3b04 	ldr.w	r3, [r5], #4
 800941a:	4798      	blx	r3
 800941c:	3601      	adds	r6, #1
 800941e:	e7f2      	b.n	8009406 <__libc_init_array+0x1e>
 8009420:	0801ff44 	.word	0x0801ff44
 8009424:	0801ff44 	.word	0x0801ff44
 8009428:	0801ff44 	.word	0x0801ff44
 800942c:	0801ff48 	.word	0x0801ff48

08009430 <memset>:
 8009430:	4402      	add	r2, r0
 8009432:	4603      	mov	r3, r0
 8009434:	4293      	cmp	r3, r2
 8009436:	d100      	bne.n	800943a <memset+0xa>
 8009438:	4770      	bx	lr
 800943a:	f803 1b01 	strb.w	r1, [r3], #1
 800943e:	e7f9      	b.n	8009434 <memset+0x4>

08009440 <__cvt>:
 8009440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009444:	ec55 4b10 	vmov	r4, r5, d0
 8009448:	2d00      	cmp	r5, #0
 800944a:	460e      	mov	r6, r1
 800944c:	4619      	mov	r1, r3
 800944e:	462b      	mov	r3, r5
 8009450:	bfbb      	ittet	lt
 8009452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009456:	461d      	movlt	r5, r3
 8009458:	2300      	movge	r3, #0
 800945a:	232d      	movlt	r3, #45	; 0x2d
 800945c:	700b      	strb	r3, [r1, #0]
 800945e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009464:	4691      	mov	r9, r2
 8009466:	f023 0820 	bic.w	r8, r3, #32
 800946a:	bfbc      	itt	lt
 800946c:	4622      	movlt	r2, r4
 800946e:	4614      	movlt	r4, r2
 8009470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009474:	d005      	beq.n	8009482 <__cvt+0x42>
 8009476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800947a:	d100      	bne.n	800947e <__cvt+0x3e>
 800947c:	3601      	adds	r6, #1
 800947e:	2102      	movs	r1, #2
 8009480:	e000      	b.n	8009484 <__cvt+0x44>
 8009482:	2103      	movs	r1, #3
 8009484:	ab03      	add	r3, sp, #12
 8009486:	9301      	str	r3, [sp, #4]
 8009488:	ab02      	add	r3, sp, #8
 800948a:	9300      	str	r3, [sp, #0]
 800948c:	ec45 4b10 	vmov	d0, r4, r5
 8009490:	4653      	mov	r3, sl
 8009492:	4632      	mov	r2, r6
 8009494:	f000 fcec 	bl	8009e70 <_dtoa_r>
 8009498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800949c:	4607      	mov	r7, r0
 800949e:	d102      	bne.n	80094a6 <__cvt+0x66>
 80094a0:	f019 0f01 	tst.w	r9, #1
 80094a4:	d022      	beq.n	80094ec <__cvt+0xac>
 80094a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80094aa:	eb07 0906 	add.w	r9, r7, r6
 80094ae:	d110      	bne.n	80094d2 <__cvt+0x92>
 80094b0:	783b      	ldrb	r3, [r7, #0]
 80094b2:	2b30      	cmp	r3, #48	; 0x30
 80094b4:	d10a      	bne.n	80094cc <__cvt+0x8c>
 80094b6:	2200      	movs	r2, #0
 80094b8:	2300      	movs	r3, #0
 80094ba:	4620      	mov	r0, r4
 80094bc:	4629      	mov	r1, r5
 80094be:	f7f7 fb83 	bl	8000bc8 <__aeabi_dcmpeq>
 80094c2:	b918      	cbnz	r0, 80094cc <__cvt+0x8c>
 80094c4:	f1c6 0601 	rsb	r6, r6, #1
 80094c8:	f8ca 6000 	str.w	r6, [sl]
 80094cc:	f8da 3000 	ldr.w	r3, [sl]
 80094d0:	4499      	add	r9, r3
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 fb75 	bl	8000bc8 <__aeabi_dcmpeq>
 80094de:	b108      	cbz	r0, 80094e4 <__cvt+0xa4>
 80094e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80094e4:	2230      	movs	r2, #48	; 0x30
 80094e6:	9b03      	ldr	r3, [sp, #12]
 80094e8:	454b      	cmp	r3, r9
 80094ea:	d307      	bcc.n	80094fc <__cvt+0xbc>
 80094ec:	9b03      	ldr	r3, [sp, #12]
 80094ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094f0:	1bdb      	subs	r3, r3, r7
 80094f2:	4638      	mov	r0, r7
 80094f4:	6013      	str	r3, [r2, #0]
 80094f6:	b004      	add	sp, #16
 80094f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094fc:	1c59      	adds	r1, r3, #1
 80094fe:	9103      	str	r1, [sp, #12]
 8009500:	701a      	strb	r2, [r3, #0]
 8009502:	e7f0      	b.n	80094e6 <__cvt+0xa6>

08009504 <__exponent>:
 8009504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009506:	4603      	mov	r3, r0
 8009508:	2900      	cmp	r1, #0
 800950a:	bfb8      	it	lt
 800950c:	4249      	neglt	r1, r1
 800950e:	f803 2b02 	strb.w	r2, [r3], #2
 8009512:	bfb4      	ite	lt
 8009514:	222d      	movlt	r2, #45	; 0x2d
 8009516:	222b      	movge	r2, #43	; 0x2b
 8009518:	2909      	cmp	r1, #9
 800951a:	7042      	strb	r2, [r0, #1]
 800951c:	dd2a      	ble.n	8009574 <__exponent+0x70>
 800951e:	f10d 0407 	add.w	r4, sp, #7
 8009522:	46a4      	mov	ip, r4
 8009524:	270a      	movs	r7, #10
 8009526:	46a6      	mov	lr, r4
 8009528:	460a      	mov	r2, r1
 800952a:	fb91 f6f7 	sdiv	r6, r1, r7
 800952e:	fb07 1516 	mls	r5, r7, r6, r1
 8009532:	3530      	adds	r5, #48	; 0x30
 8009534:	2a63      	cmp	r2, #99	; 0x63
 8009536:	f104 34ff 	add.w	r4, r4, #4294967295
 800953a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800953e:	4631      	mov	r1, r6
 8009540:	dcf1      	bgt.n	8009526 <__exponent+0x22>
 8009542:	3130      	adds	r1, #48	; 0x30
 8009544:	f1ae 0502 	sub.w	r5, lr, #2
 8009548:	f804 1c01 	strb.w	r1, [r4, #-1]
 800954c:	1c44      	adds	r4, r0, #1
 800954e:	4629      	mov	r1, r5
 8009550:	4561      	cmp	r1, ip
 8009552:	d30a      	bcc.n	800956a <__exponent+0x66>
 8009554:	f10d 0209 	add.w	r2, sp, #9
 8009558:	eba2 020e 	sub.w	r2, r2, lr
 800955c:	4565      	cmp	r5, ip
 800955e:	bf88      	it	hi
 8009560:	2200      	movhi	r2, #0
 8009562:	4413      	add	r3, r2
 8009564:	1a18      	subs	r0, r3, r0
 8009566:	b003      	add	sp, #12
 8009568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800956a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800956e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009572:	e7ed      	b.n	8009550 <__exponent+0x4c>
 8009574:	2330      	movs	r3, #48	; 0x30
 8009576:	3130      	adds	r1, #48	; 0x30
 8009578:	7083      	strb	r3, [r0, #2]
 800957a:	70c1      	strb	r1, [r0, #3]
 800957c:	1d03      	adds	r3, r0, #4
 800957e:	e7f1      	b.n	8009564 <__exponent+0x60>

08009580 <_printf_float>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	ed2d 8b02 	vpush	{d8}
 8009588:	b08d      	sub	sp, #52	; 0x34
 800958a:	460c      	mov	r4, r1
 800958c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009590:	4616      	mov	r6, r2
 8009592:	461f      	mov	r7, r3
 8009594:	4605      	mov	r5, r0
 8009596:	f001 fa57 	bl	800aa48 <_localeconv_r>
 800959a:	f8d0 a000 	ldr.w	sl, [r0]
 800959e:	4650      	mov	r0, sl
 80095a0:	f7f6 fe96 	bl	80002d0 <strlen>
 80095a4:	2300      	movs	r3, #0
 80095a6:	930a      	str	r3, [sp, #40]	; 0x28
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	9305      	str	r3, [sp, #20]
 80095ac:	f8d8 3000 	ldr.w	r3, [r8]
 80095b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80095b4:	3307      	adds	r3, #7
 80095b6:	f023 0307 	bic.w	r3, r3, #7
 80095ba:	f103 0208 	add.w	r2, r3, #8
 80095be:	f8c8 2000 	str.w	r2, [r8]
 80095c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80095ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80095ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095d2:	9307      	str	r3, [sp, #28]
 80095d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80095d8:	ee08 0a10 	vmov	s16, r0
 80095dc:	4b9f      	ldr	r3, [pc, #636]	; (800985c <_printf_float+0x2dc>)
 80095de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	f7f7 fb21 	bl	8000c2c <__aeabi_dcmpun>
 80095ea:	bb88      	cbnz	r0, 8009650 <_printf_float+0xd0>
 80095ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095f0:	4b9a      	ldr	r3, [pc, #616]	; (800985c <_printf_float+0x2dc>)
 80095f2:	f04f 32ff 	mov.w	r2, #4294967295
 80095f6:	f7f7 fafb 	bl	8000bf0 <__aeabi_dcmple>
 80095fa:	bb48      	cbnz	r0, 8009650 <_printf_float+0xd0>
 80095fc:	2200      	movs	r2, #0
 80095fe:	2300      	movs	r3, #0
 8009600:	4640      	mov	r0, r8
 8009602:	4649      	mov	r1, r9
 8009604:	f7f7 faea 	bl	8000bdc <__aeabi_dcmplt>
 8009608:	b110      	cbz	r0, 8009610 <_printf_float+0x90>
 800960a:	232d      	movs	r3, #45	; 0x2d
 800960c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009610:	4b93      	ldr	r3, [pc, #588]	; (8009860 <_printf_float+0x2e0>)
 8009612:	4894      	ldr	r0, [pc, #592]	; (8009864 <_printf_float+0x2e4>)
 8009614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009618:	bf94      	ite	ls
 800961a:	4698      	movls	r8, r3
 800961c:	4680      	movhi	r8, r0
 800961e:	2303      	movs	r3, #3
 8009620:	6123      	str	r3, [r4, #16]
 8009622:	9b05      	ldr	r3, [sp, #20]
 8009624:	f023 0204 	bic.w	r2, r3, #4
 8009628:	6022      	str	r2, [r4, #0]
 800962a:	f04f 0900 	mov.w	r9, #0
 800962e:	9700      	str	r7, [sp, #0]
 8009630:	4633      	mov	r3, r6
 8009632:	aa0b      	add	r2, sp, #44	; 0x2c
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f9d8 	bl	80099ec <_printf_common>
 800963c:	3001      	adds	r0, #1
 800963e:	f040 8090 	bne.w	8009762 <_printf_float+0x1e2>
 8009642:	f04f 30ff 	mov.w	r0, #4294967295
 8009646:	b00d      	add	sp, #52	; 0x34
 8009648:	ecbd 8b02 	vpop	{d8}
 800964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009650:	4642      	mov	r2, r8
 8009652:	464b      	mov	r3, r9
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f7 fae8 	bl	8000c2c <__aeabi_dcmpun>
 800965c:	b140      	cbz	r0, 8009670 <_printf_float+0xf0>
 800965e:	464b      	mov	r3, r9
 8009660:	2b00      	cmp	r3, #0
 8009662:	bfbc      	itt	lt
 8009664:	232d      	movlt	r3, #45	; 0x2d
 8009666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800966a:	487f      	ldr	r0, [pc, #508]	; (8009868 <_printf_float+0x2e8>)
 800966c:	4b7f      	ldr	r3, [pc, #508]	; (800986c <_printf_float+0x2ec>)
 800966e:	e7d1      	b.n	8009614 <_printf_float+0x94>
 8009670:	6863      	ldr	r3, [r4, #4]
 8009672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009676:	9206      	str	r2, [sp, #24]
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	d13f      	bne.n	80096fc <_printf_float+0x17c>
 800967c:	2306      	movs	r3, #6
 800967e:	6063      	str	r3, [r4, #4]
 8009680:	9b05      	ldr	r3, [sp, #20]
 8009682:	6861      	ldr	r1, [r4, #4]
 8009684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009688:	2300      	movs	r3, #0
 800968a:	9303      	str	r3, [sp, #12]
 800968c:	ab0a      	add	r3, sp, #40	; 0x28
 800968e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009692:	ab09      	add	r3, sp, #36	; 0x24
 8009694:	ec49 8b10 	vmov	d0, r8, r9
 8009698:	9300      	str	r3, [sp, #0]
 800969a:	6022      	str	r2, [r4, #0]
 800969c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80096a0:	4628      	mov	r0, r5
 80096a2:	f7ff fecd 	bl	8009440 <__cvt>
 80096a6:	9b06      	ldr	r3, [sp, #24]
 80096a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80096aa:	2b47      	cmp	r3, #71	; 0x47
 80096ac:	4680      	mov	r8, r0
 80096ae:	d108      	bne.n	80096c2 <_printf_float+0x142>
 80096b0:	1cc8      	adds	r0, r1, #3
 80096b2:	db02      	blt.n	80096ba <_printf_float+0x13a>
 80096b4:	6863      	ldr	r3, [r4, #4]
 80096b6:	4299      	cmp	r1, r3
 80096b8:	dd41      	ble.n	800973e <_printf_float+0x1be>
 80096ba:	f1ab 0b02 	sub.w	fp, fp, #2
 80096be:	fa5f fb8b 	uxtb.w	fp, fp
 80096c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096c6:	d820      	bhi.n	800970a <_printf_float+0x18a>
 80096c8:	3901      	subs	r1, #1
 80096ca:	465a      	mov	r2, fp
 80096cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80096d0:	9109      	str	r1, [sp, #36]	; 0x24
 80096d2:	f7ff ff17 	bl	8009504 <__exponent>
 80096d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096d8:	1813      	adds	r3, r2, r0
 80096da:	2a01      	cmp	r2, #1
 80096dc:	4681      	mov	r9, r0
 80096de:	6123      	str	r3, [r4, #16]
 80096e0:	dc02      	bgt.n	80096e8 <_printf_float+0x168>
 80096e2:	6822      	ldr	r2, [r4, #0]
 80096e4:	07d2      	lsls	r2, r2, #31
 80096e6:	d501      	bpl.n	80096ec <_printf_float+0x16c>
 80096e8:	3301      	adds	r3, #1
 80096ea:	6123      	str	r3, [r4, #16]
 80096ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d09c      	beq.n	800962e <_printf_float+0xae>
 80096f4:	232d      	movs	r3, #45	; 0x2d
 80096f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096fa:	e798      	b.n	800962e <_printf_float+0xae>
 80096fc:	9a06      	ldr	r2, [sp, #24]
 80096fe:	2a47      	cmp	r2, #71	; 0x47
 8009700:	d1be      	bne.n	8009680 <_printf_float+0x100>
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1bc      	bne.n	8009680 <_printf_float+0x100>
 8009706:	2301      	movs	r3, #1
 8009708:	e7b9      	b.n	800967e <_printf_float+0xfe>
 800970a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800970e:	d118      	bne.n	8009742 <_printf_float+0x1c2>
 8009710:	2900      	cmp	r1, #0
 8009712:	6863      	ldr	r3, [r4, #4]
 8009714:	dd0b      	ble.n	800972e <_printf_float+0x1ae>
 8009716:	6121      	str	r1, [r4, #16]
 8009718:	b913      	cbnz	r3, 8009720 <_printf_float+0x1a0>
 800971a:	6822      	ldr	r2, [r4, #0]
 800971c:	07d0      	lsls	r0, r2, #31
 800971e:	d502      	bpl.n	8009726 <_printf_float+0x1a6>
 8009720:	3301      	adds	r3, #1
 8009722:	440b      	add	r3, r1
 8009724:	6123      	str	r3, [r4, #16]
 8009726:	65a1      	str	r1, [r4, #88]	; 0x58
 8009728:	f04f 0900 	mov.w	r9, #0
 800972c:	e7de      	b.n	80096ec <_printf_float+0x16c>
 800972e:	b913      	cbnz	r3, 8009736 <_printf_float+0x1b6>
 8009730:	6822      	ldr	r2, [r4, #0]
 8009732:	07d2      	lsls	r2, r2, #31
 8009734:	d501      	bpl.n	800973a <_printf_float+0x1ba>
 8009736:	3302      	adds	r3, #2
 8009738:	e7f4      	b.n	8009724 <_printf_float+0x1a4>
 800973a:	2301      	movs	r3, #1
 800973c:	e7f2      	b.n	8009724 <_printf_float+0x1a4>
 800973e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009744:	4299      	cmp	r1, r3
 8009746:	db05      	blt.n	8009754 <_printf_float+0x1d4>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	6121      	str	r1, [r4, #16]
 800974c:	07d8      	lsls	r0, r3, #31
 800974e:	d5ea      	bpl.n	8009726 <_printf_float+0x1a6>
 8009750:	1c4b      	adds	r3, r1, #1
 8009752:	e7e7      	b.n	8009724 <_printf_float+0x1a4>
 8009754:	2900      	cmp	r1, #0
 8009756:	bfd4      	ite	le
 8009758:	f1c1 0202 	rsble	r2, r1, #2
 800975c:	2201      	movgt	r2, #1
 800975e:	4413      	add	r3, r2
 8009760:	e7e0      	b.n	8009724 <_printf_float+0x1a4>
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	055a      	lsls	r2, r3, #21
 8009766:	d407      	bmi.n	8009778 <_printf_float+0x1f8>
 8009768:	6923      	ldr	r3, [r4, #16]
 800976a:	4642      	mov	r2, r8
 800976c:	4631      	mov	r1, r6
 800976e:	4628      	mov	r0, r5
 8009770:	47b8      	blx	r7
 8009772:	3001      	adds	r0, #1
 8009774:	d12c      	bne.n	80097d0 <_printf_float+0x250>
 8009776:	e764      	b.n	8009642 <_printf_float+0xc2>
 8009778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800977c:	f240 80e0 	bls.w	8009940 <_printf_float+0x3c0>
 8009780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	f7f7 fa1e 	bl	8000bc8 <__aeabi_dcmpeq>
 800978c:	2800      	cmp	r0, #0
 800978e:	d034      	beq.n	80097fa <_printf_float+0x27a>
 8009790:	4a37      	ldr	r2, [pc, #220]	; (8009870 <_printf_float+0x2f0>)
 8009792:	2301      	movs	r3, #1
 8009794:	4631      	mov	r1, r6
 8009796:	4628      	mov	r0, r5
 8009798:	47b8      	blx	r7
 800979a:	3001      	adds	r0, #1
 800979c:	f43f af51 	beq.w	8009642 <_printf_float+0xc2>
 80097a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097a4:	429a      	cmp	r2, r3
 80097a6:	db02      	blt.n	80097ae <_printf_float+0x22e>
 80097a8:	6823      	ldr	r3, [r4, #0]
 80097aa:	07d8      	lsls	r0, r3, #31
 80097ac:	d510      	bpl.n	80097d0 <_printf_float+0x250>
 80097ae:	ee18 3a10 	vmov	r3, s16
 80097b2:	4652      	mov	r2, sl
 80097b4:	4631      	mov	r1, r6
 80097b6:	4628      	mov	r0, r5
 80097b8:	47b8      	blx	r7
 80097ba:	3001      	adds	r0, #1
 80097bc:	f43f af41 	beq.w	8009642 <_printf_float+0xc2>
 80097c0:	f04f 0800 	mov.w	r8, #0
 80097c4:	f104 091a 	add.w	r9, r4, #26
 80097c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ca:	3b01      	subs	r3, #1
 80097cc:	4543      	cmp	r3, r8
 80097ce:	dc09      	bgt.n	80097e4 <_printf_float+0x264>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	079b      	lsls	r3, r3, #30
 80097d4:	f100 8105 	bmi.w	80099e2 <_printf_float+0x462>
 80097d8:	68e0      	ldr	r0, [r4, #12]
 80097da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80097dc:	4298      	cmp	r0, r3
 80097de:	bfb8      	it	lt
 80097e0:	4618      	movlt	r0, r3
 80097e2:	e730      	b.n	8009646 <_printf_float+0xc6>
 80097e4:	2301      	movs	r3, #1
 80097e6:	464a      	mov	r2, r9
 80097e8:	4631      	mov	r1, r6
 80097ea:	4628      	mov	r0, r5
 80097ec:	47b8      	blx	r7
 80097ee:	3001      	adds	r0, #1
 80097f0:	f43f af27 	beq.w	8009642 <_printf_float+0xc2>
 80097f4:	f108 0801 	add.w	r8, r8, #1
 80097f8:	e7e6      	b.n	80097c8 <_printf_float+0x248>
 80097fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc39      	bgt.n	8009874 <_printf_float+0x2f4>
 8009800:	4a1b      	ldr	r2, [pc, #108]	; (8009870 <_printf_float+0x2f0>)
 8009802:	2301      	movs	r3, #1
 8009804:	4631      	mov	r1, r6
 8009806:	4628      	mov	r0, r5
 8009808:	47b8      	blx	r7
 800980a:	3001      	adds	r0, #1
 800980c:	f43f af19 	beq.w	8009642 <_printf_float+0xc2>
 8009810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009814:	4313      	orrs	r3, r2
 8009816:	d102      	bne.n	800981e <_printf_float+0x29e>
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d5d8      	bpl.n	80097d0 <_printf_float+0x250>
 800981e:	ee18 3a10 	vmov	r3, s16
 8009822:	4652      	mov	r2, sl
 8009824:	4631      	mov	r1, r6
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	f43f af09 	beq.w	8009642 <_printf_float+0xc2>
 8009830:	f04f 0900 	mov.w	r9, #0
 8009834:	f104 0a1a 	add.w	sl, r4, #26
 8009838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800983a:	425b      	negs	r3, r3
 800983c:	454b      	cmp	r3, r9
 800983e:	dc01      	bgt.n	8009844 <_printf_float+0x2c4>
 8009840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009842:	e792      	b.n	800976a <_printf_float+0x1ea>
 8009844:	2301      	movs	r3, #1
 8009846:	4652      	mov	r2, sl
 8009848:	4631      	mov	r1, r6
 800984a:	4628      	mov	r0, r5
 800984c:	47b8      	blx	r7
 800984e:	3001      	adds	r0, #1
 8009850:	f43f aef7 	beq.w	8009642 <_printf_float+0xc2>
 8009854:	f109 0901 	add.w	r9, r9, #1
 8009858:	e7ee      	b.n	8009838 <_printf_float+0x2b8>
 800985a:	bf00      	nop
 800985c:	7fefffff 	.word	0x7fefffff
 8009860:	0801fb60 	.word	0x0801fb60
 8009864:	0801fb64 	.word	0x0801fb64
 8009868:	0801fb6c 	.word	0x0801fb6c
 800986c:	0801fb68 	.word	0x0801fb68
 8009870:	0801fb70 	.word	0x0801fb70
 8009874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009878:	429a      	cmp	r2, r3
 800987a:	bfa8      	it	ge
 800987c:	461a      	movge	r2, r3
 800987e:	2a00      	cmp	r2, #0
 8009880:	4691      	mov	r9, r2
 8009882:	dc37      	bgt.n	80098f4 <_printf_float+0x374>
 8009884:	f04f 0b00 	mov.w	fp, #0
 8009888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800988c:	f104 021a 	add.w	r2, r4, #26
 8009890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009892:	9305      	str	r3, [sp, #20]
 8009894:	eba3 0309 	sub.w	r3, r3, r9
 8009898:	455b      	cmp	r3, fp
 800989a:	dc33      	bgt.n	8009904 <_printf_float+0x384>
 800989c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098a0:	429a      	cmp	r2, r3
 80098a2:	db3b      	blt.n	800991c <_printf_float+0x39c>
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	07da      	lsls	r2, r3, #31
 80098a8:	d438      	bmi.n	800991c <_printf_float+0x39c>
 80098aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ac:	9b05      	ldr	r3, [sp, #20]
 80098ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	eba2 0901 	sub.w	r9, r2, r1
 80098b6:	4599      	cmp	r9, r3
 80098b8:	bfa8      	it	ge
 80098ba:	4699      	movge	r9, r3
 80098bc:	f1b9 0f00 	cmp.w	r9, #0
 80098c0:	dc35      	bgt.n	800992e <_printf_float+0x3ae>
 80098c2:	f04f 0800 	mov.w	r8, #0
 80098c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098ca:	f104 0a1a 	add.w	sl, r4, #26
 80098ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80098d2:	1a9b      	subs	r3, r3, r2
 80098d4:	eba3 0309 	sub.w	r3, r3, r9
 80098d8:	4543      	cmp	r3, r8
 80098da:	f77f af79 	ble.w	80097d0 <_printf_float+0x250>
 80098de:	2301      	movs	r3, #1
 80098e0:	4652      	mov	r2, sl
 80098e2:	4631      	mov	r1, r6
 80098e4:	4628      	mov	r0, r5
 80098e6:	47b8      	blx	r7
 80098e8:	3001      	adds	r0, #1
 80098ea:	f43f aeaa 	beq.w	8009642 <_printf_float+0xc2>
 80098ee:	f108 0801 	add.w	r8, r8, #1
 80098f2:	e7ec      	b.n	80098ce <_printf_float+0x34e>
 80098f4:	4613      	mov	r3, r2
 80098f6:	4631      	mov	r1, r6
 80098f8:	4642      	mov	r2, r8
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	d1c0      	bne.n	8009884 <_printf_float+0x304>
 8009902:	e69e      	b.n	8009642 <_printf_float+0xc2>
 8009904:	2301      	movs	r3, #1
 8009906:	4631      	mov	r1, r6
 8009908:	4628      	mov	r0, r5
 800990a:	9205      	str	r2, [sp, #20]
 800990c:	47b8      	blx	r7
 800990e:	3001      	adds	r0, #1
 8009910:	f43f ae97 	beq.w	8009642 <_printf_float+0xc2>
 8009914:	9a05      	ldr	r2, [sp, #20]
 8009916:	f10b 0b01 	add.w	fp, fp, #1
 800991a:	e7b9      	b.n	8009890 <_printf_float+0x310>
 800991c:	ee18 3a10 	vmov	r3, s16
 8009920:	4652      	mov	r2, sl
 8009922:	4631      	mov	r1, r6
 8009924:	4628      	mov	r0, r5
 8009926:	47b8      	blx	r7
 8009928:	3001      	adds	r0, #1
 800992a:	d1be      	bne.n	80098aa <_printf_float+0x32a>
 800992c:	e689      	b.n	8009642 <_printf_float+0xc2>
 800992e:	9a05      	ldr	r2, [sp, #20]
 8009930:	464b      	mov	r3, r9
 8009932:	4442      	add	r2, r8
 8009934:	4631      	mov	r1, r6
 8009936:	4628      	mov	r0, r5
 8009938:	47b8      	blx	r7
 800993a:	3001      	adds	r0, #1
 800993c:	d1c1      	bne.n	80098c2 <_printf_float+0x342>
 800993e:	e680      	b.n	8009642 <_printf_float+0xc2>
 8009940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009942:	2a01      	cmp	r2, #1
 8009944:	dc01      	bgt.n	800994a <_printf_float+0x3ca>
 8009946:	07db      	lsls	r3, r3, #31
 8009948:	d538      	bpl.n	80099bc <_printf_float+0x43c>
 800994a:	2301      	movs	r3, #1
 800994c:	4642      	mov	r2, r8
 800994e:	4631      	mov	r1, r6
 8009950:	4628      	mov	r0, r5
 8009952:	47b8      	blx	r7
 8009954:	3001      	adds	r0, #1
 8009956:	f43f ae74 	beq.w	8009642 <_printf_float+0xc2>
 800995a:	ee18 3a10 	vmov	r3, s16
 800995e:	4652      	mov	r2, sl
 8009960:	4631      	mov	r1, r6
 8009962:	4628      	mov	r0, r5
 8009964:	47b8      	blx	r7
 8009966:	3001      	adds	r0, #1
 8009968:	f43f ae6b 	beq.w	8009642 <_printf_float+0xc2>
 800996c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009970:	2200      	movs	r2, #0
 8009972:	2300      	movs	r3, #0
 8009974:	f7f7 f928 	bl	8000bc8 <__aeabi_dcmpeq>
 8009978:	b9d8      	cbnz	r0, 80099b2 <_printf_float+0x432>
 800997a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997c:	f108 0201 	add.w	r2, r8, #1
 8009980:	3b01      	subs	r3, #1
 8009982:	4631      	mov	r1, r6
 8009984:	4628      	mov	r0, r5
 8009986:	47b8      	blx	r7
 8009988:	3001      	adds	r0, #1
 800998a:	d10e      	bne.n	80099aa <_printf_float+0x42a>
 800998c:	e659      	b.n	8009642 <_printf_float+0xc2>
 800998e:	2301      	movs	r3, #1
 8009990:	4652      	mov	r2, sl
 8009992:	4631      	mov	r1, r6
 8009994:	4628      	mov	r0, r5
 8009996:	47b8      	blx	r7
 8009998:	3001      	adds	r0, #1
 800999a:	f43f ae52 	beq.w	8009642 <_printf_float+0xc2>
 800999e:	f108 0801 	add.w	r8, r8, #1
 80099a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099a4:	3b01      	subs	r3, #1
 80099a6:	4543      	cmp	r3, r8
 80099a8:	dcf1      	bgt.n	800998e <_printf_float+0x40e>
 80099aa:	464b      	mov	r3, r9
 80099ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80099b0:	e6dc      	b.n	800976c <_printf_float+0x1ec>
 80099b2:	f04f 0800 	mov.w	r8, #0
 80099b6:	f104 0a1a 	add.w	sl, r4, #26
 80099ba:	e7f2      	b.n	80099a2 <_printf_float+0x422>
 80099bc:	2301      	movs	r3, #1
 80099be:	4642      	mov	r2, r8
 80099c0:	e7df      	b.n	8009982 <_printf_float+0x402>
 80099c2:	2301      	movs	r3, #1
 80099c4:	464a      	mov	r2, r9
 80099c6:	4631      	mov	r1, r6
 80099c8:	4628      	mov	r0, r5
 80099ca:	47b8      	blx	r7
 80099cc:	3001      	adds	r0, #1
 80099ce:	f43f ae38 	beq.w	8009642 <_printf_float+0xc2>
 80099d2:	f108 0801 	add.w	r8, r8, #1
 80099d6:	68e3      	ldr	r3, [r4, #12]
 80099d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80099da:	1a5b      	subs	r3, r3, r1
 80099dc:	4543      	cmp	r3, r8
 80099de:	dcf0      	bgt.n	80099c2 <_printf_float+0x442>
 80099e0:	e6fa      	b.n	80097d8 <_printf_float+0x258>
 80099e2:	f04f 0800 	mov.w	r8, #0
 80099e6:	f104 0919 	add.w	r9, r4, #25
 80099ea:	e7f4      	b.n	80099d6 <_printf_float+0x456>

080099ec <_printf_common>:
 80099ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	4616      	mov	r6, r2
 80099f2:	4699      	mov	r9, r3
 80099f4:	688a      	ldr	r2, [r1, #8]
 80099f6:	690b      	ldr	r3, [r1, #16]
 80099f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80099fc:	4293      	cmp	r3, r2
 80099fe:	bfb8      	it	lt
 8009a00:	4613      	movlt	r3, r2
 8009a02:	6033      	str	r3, [r6, #0]
 8009a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a08:	4607      	mov	r7, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b10a      	cbz	r2, 8009a12 <_printf_common+0x26>
 8009a0e:	3301      	adds	r3, #1
 8009a10:	6033      	str	r3, [r6, #0]
 8009a12:	6823      	ldr	r3, [r4, #0]
 8009a14:	0699      	lsls	r1, r3, #26
 8009a16:	bf42      	ittt	mi
 8009a18:	6833      	ldrmi	r3, [r6, #0]
 8009a1a:	3302      	addmi	r3, #2
 8009a1c:	6033      	strmi	r3, [r6, #0]
 8009a1e:	6825      	ldr	r5, [r4, #0]
 8009a20:	f015 0506 	ands.w	r5, r5, #6
 8009a24:	d106      	bne.n	8009a34 <_printf_common+0x48>
 8009a26:	f104 0a19 	add.w	sl, r4, #25
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	6832      	ldr	r2, [r6, #0]
 8009a2e:	1a9b      	subs	r3, r3, r2
 8009a30:	42ab      	cmp	r3, r5
 8009a32:	dc26      	bgt.n	8009a82 <_printf_common+0x96>
 8009a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a38:	1e13      	subs	r3, r2, #0
 8009a3a:	6822      	ldr	r2, [r4, #0]
 8009a3c:	bf18      	it	ne
 8009a3e:	2301      	movne	r3, #1
 8009a40:	0692      	lsls	r2, r2, #26
 8009a42:	d42b      	bmi.n	8009a9c <_printf_common+0xb0>
 8009a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a48:	4649      	mov	r1, r9
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	47c0      	blx	r8
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d01e      	beq.n	8009a90 <_printf_common+0xa4>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	68e5      	ldr	r5, [r4, #12]
 8009a56:	6832      	ldr	r2, [r6, #0]
 8009a58:	f003 0306 	and.w	r3, r3, #6
 8009a5c:	2b04      	cmp	r3, #4
 8009a5e:	bf08      	it	eq
 8009a60:	1aad      	subeq	r5, r5, r2
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	6922      	ldr	r2, [r4, #16]
 8009a66:	bf0c      	ite	eq
 8009a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a6c:	2500      	movne	r5, #0
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	bfc4      	itt	gt
 8009a72:	1a9b      	subgt	r3, r3, r2
 8009a74:	18ed      	addgt	r5, r5, r3
 8009a76:	2600      	movs	r6, #0
 8009a78:	341a      	adds	r4, #26
 8009a7a:	42b5      	cmp	r5, r6
 8009a7c:	d11a      	bne.n	8009ab4 <_printf_common+0xc8>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	e008      	b.n	8009a94 <_printf_common+0xa8>
 8009a82:	2301      	movs	r3, #1
 8009a84:	4652      	mov	r2, sl
 8009a86:	4649      	mov	r1, r9
 8009a88:	4638      	mov	r0, r7
 8009a8a:	47c0      	blx	r8
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d103      	bne.n	8009a98 <_printf_common+0xac>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a98:	3501      	adds	r5, #1
 8009a9a:	e7c6      	b.n	8009a2a <_printf_common+0x3e>
 8009a9c:	18e1      	adds	r1, r4, r3
 8009a9e:	1c5a      	adds	r2, r3, #1
 8009aa0:	2030      	movs	r0, #48	; 0x30
 8009aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aa6:	4422      	add	r2, r4
 8009aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	e7c7      	b.n	8009a44 <_printf_common+0x58>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	4622      	mov	r2, r4
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4638      	mov	r0, r7
 8009abc:	47c0      	blx	r8
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d0e6      	beq.n	8009a90 <_printf_common+0xa4>
 8009ac2:	3601      	adds	r6, #1
 8009ac4:	e7d9      	b.n	8009a7a <_printf_common+0x8e>
	...

08009ac8 <_printf_i>:
 8009ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	4691      	mov	r9, r2
 8009ad0:	7e27      	ldrb	r7, [r4, #24]
 8009ad2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009ad4:	2f78      	cmp	r7, #120	; 0x78
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ade:	d807      	bhi.n	8009af0 <_printf_i+0x28>
 8009ae0:	2f62      	cmp	r7, #98	; 0x62
 8009ae2:	d80a      	bhi.n	8009afa <_printf_i+0x32>
 8009ae4:	2f00      	cmp	r7, #0
 8009ae6:	f000 80d8 	beq.w	8009c9a <_printf_i+0x1d2>
 8009aea:	2f58      	cmp	r7, #88	; 0x58
 8009aec:	f000 80a3 	beq.w	8009c36 <_printf_i+0x16e>
 8009af0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009af8:	e03a      	b.n	8009b70 <_printf_i+0xa8>
 8009afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009afe:	2b15      	cmp	r3, #21
 8009b00:	d8f6      	bhi.n	8009af0 <_printf_i+0x28>
 8009b02:	a001      	add	r0, pc, #4	; (adr r0, 8009b08 <_printf_i+0x40>)
 8009b04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b08:	08009b61 	.word	0x08009b61
 8009b0c:	08009b75 	.word	0x08009b75
 8009b10:	08009af1 	.word	0x08009af1
 8009b14:	08009af1 	.word	0x08009af1
 8009b18:	08009af1 	.word	0x08009af1
 8009b1c:	08009af1 	.word	0x08009af1
 8009b20:	08009b75 	.word	0x08009b75
 8009b24:	08009af1 	.word	0x08009af1
 8009b28:	08009af1 	.word	0x08009af1
 8009b2c:	08009af1 	.word	0x08009af1
 8009b30:	08009af1 	.word	0x08009af1
 8009b34:	08009c81 	.word	0x08009c81
 8009b38:	08009ba5 	.word	0x08009ba5
 8009b3c:	08009c63 	.word	0x08009c63
 8009b40:	08009af1 	.word	0x08009af1
 8009b44:	08009af1 	.word	0x08009af1
 8009b48:	08009ca3 	.word	0x08009ca3
 8009b4c:	08009af1 	.word	0x08009af1
 8009b50:	08009ba5 	.word	0x08009ba5
 8009b54:	08009af1 	.word	0x08009af1
 8009b58:	08009af1 	.word	0x08009af1
 8009b5c:	08009c6b 	.word	0x08009c6b
 8009b60:	680b      	ldr	r3, [r1, #0]
 8009b62:	1d1a      	adds	r2, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	600a      	str	r2, [r1, #0]
 8009b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b70:	2301      	movs	r3, #1
 8009b72:	e0a3      	b.n	8009cbc <_printf_i+0x1f4>
 8009b74:	6825      	ldr	r5, [r4, #0]
 8009b76:	6808      	ldr	r0, [r1, #0]
 8009b78:	062e      	lsls	r6, r5, #24
 8009b7a:	f100 0304 	add.w	r3, r0, #4
 8009b7e:	d50a      	bpl.n	8009b96 <_printf_i+0xce>
 8009b80:	6805      	ldr	r5, [r0, #0]
 8009b82:	600b      	str	r3, [r1, #0]
 8009b84:	2d00      	cmp	r5, #0
 8009b86:	da03      	bge.n	8009b90 <_printf_i+0xc8>
 8009b88:	232d      	movs	r3, #45	; 0x2d
 8009b8a:	426d      	negs	r5, r5
 8009b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b90:	485e      	ldr	r0, [pc, #376]	; (8009d0c <_printf_i+0x244>)
 8009b92:	230a      	movs	r3, #10
 8009b94:	e019      	b.n	8009bca <_printf_i+0x102>
 8009b96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b9a:	6805      	ldr	r5, [r0, #0]
 8009b9c:	600b      	str	r3, [r1, #0]
 8009b9e:	bf18      	it	ne
 8009ba0:	b22d      	sxthne	r5, r5
 8009ba2:	e7ef      	b.n	8009b84 <_printf_i+0xbc>
 8009ba4:	680b      	ldr	r3, [r1, #0]
 8009ba6:	6825      	ldr	r5, [r4, #0]
 8009ba8:	1d18      	adds	r0, r3, #4
 8009baa:	6008      	str	r0, [r1, #0]
 8009bac:	0628      	lsls	r0, r5, #24
 8009bae:	d501      	bpl.n	8009bb4 <_printf_i+0xec>
 8009bb0:	681d      	ldr	r5, [r3, #0]
 8009bb2:	e002      	b.n	8009bba <_printf_i+0xf2>
 8009bb4:	0669      	lsls	r1, r5, #25
 8009bb6:	d5fb      	bpl.n	8009bb0 <_printf_i+0xe8>
 8009bb8:	881d      	ldrh	r5, [r3, #0]
 8009bba:	4854      	ldr	r0, [pc, #336]	; (8009d0c <_printf_i+0x244>)
 8009bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8009bbe:	bf0c      	ite	eq
 8009bc0:	2308      	moveq	r3, #8
 8009bc2:	230a      	movne	r3, #10
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bca:	6866      	ldr	r6, [r4, #4]
 8009bcc:	60a6      	str	r6, [r4, #8]
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	bfa2      	ittt	ge
 8009bd2:	6821      	ldrge	r1, [r4, #0]
 8009bd4:	f021 0104 	bicge.w	r1, r1, #4
 8009bd8:	6021      	strge	r1, [r4, #0]
 8009bda:	b90d      	cbnz	r5, 8009be0 <_printf_i+0x118>
 8009bdc:	2e00      	cmp	r6, #0
 8009bde:	d04d      	beq.n	8009c7c <_printf_i+0x1b4>
 8009be0:	4616      	mov	r6, r2
 8009be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8009be6:	fb03 5711 	mls	r7, r3, r1, r5
 8009bea:	5dc7      	ldrb	r7, [r0, r7]
 8009bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf0:	462f      	mov	r7, r5
 8009bf2:	42bb      	cmp	r3, r7
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	d9f4      	bls.n	8009be2 <_printf_i+0x11a>
 8009bf8:	2b08      	cmp	r3, #8
 8009bfa:	d10b      	bne.n	8009c14 <_printf_i+0x14c>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	07df      	lsls	r7, r3, #31
 8009c00:	d508      	bpl.n	8009c14 <_printf_i+0x14c>
 8009c02:	6923      	ldr	r3, [r4, #16]
 8009c04:	6861      	ldr	r1, [r4, #4]
 8009c06:	4299      	cmp	r1, r3
 8009c08:	bfde      	ittt	le
 8009c0a:	2330      	movle	r3, #48	; 0x30
 8009c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c14:	1b92      	subs	r2, r2, r6
 8009c16:	6122      	str	r2, [r4, #16]
 8009c18:	f8cd a000 	str.w	sl, [sp]
 8009c1c:	464b      	mov	r3, r9
 8009c1e:	aa03      	add	r2, sp, #12
 8009c20:	4621      	mov	r1, r4
 8009c22:	4640      	mov	r0, r8
 8009c24:	f7ff fee2 	bl	80099ec <_printf_common>
 8009c28:	3001      	adds	r0, #1
 8009c2a:	d14c      	bne.n	8009cc6 <_printf_i+0x1fe>
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	b004      	add	sp, #16
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c36:	4835      	ldr	r0, [pc, #212]	; (8009d0c <_printf_i+0x244>)
 8009c38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	680e      	ldr	r6, [r1, #0]
 8009c40:	061f      	lsls	r7, r3, #24
 8009c42:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c46:	600e      	str	r6, [r1, #0]
 8009c48:	d514      	bpl.n	8009c74 <_printf_i+0x1ac>
 8009c4a:	07d9      	lsls	r1, r3, #31
 8009c4c:	bf44      	itt	mi
 8009c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8009c52:	6023      	strmi	r3, [r4, #0]
 8009c54:	b91d      	cbnz	r5, 8009c5e <_printf_i+0x196>
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	f023 0320 	bic.w	r3, r3, #32
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	2310      	movs	r3, #16
 8009c60:	e7b0      	b.n	8009bc4 <_printf_i+0xfc>
 8009c62:	6823      	ldr	r3, [r4, #0]
 8009c64:	f043 0320 	orr.w	r3, r3, #32
 8009c68:	6023      	str	r3, [r4, #0]
 8009c6a:	2378      	movs	r3, #120	; 0x78
 8009c6c:	4828      	ldr	r0, [pc, #160]	; (8009d10 <_printf_i+0x248>)
 8009c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c72:	e7e3      	b.n	8009c3c <_printf_i+0x174>
 8009c74:	065e      	lsls	r6, r3, #25
 8009c76:	bf48      	it	mi
 8009c78:	b2ad      	uxthmi	r5, r5
 8009c7a:	e7e6      	b.n	8009c4a <_printf_i+0x182>
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	e7bb      	b.n	8009bf8 <_printf_i+0x130>
 8009c80:	680b      	ldr	r3, [r1, #0]
 8009c82:	6826      	ldr	r6, [r4, #0]
 8009c84:	6960      	ldr	r0, [r4, #20]
 8009c86:	1d1d      	adds	r5, r3, #4
 8009c88:	600d      	str	r5, [r1, #0]
 8009c8a:	0635      	lsls	r5, r6, #24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	d501      	bpl.n	8009c94 <_printf_i+0x1cc>
 8009c90:	6018      	str	r0, [r3, #0]
 8009c92:	e002      	b.n	8009c9a <_printf_i+0x1d2>
 8009c94:	0671      	lsls	r1, r6, #25
 8009c96:	d5fb      	bpl.n	8009c90 <_printf_i+0x1c8>
 8009c98:	8018      	strh	r0, [r3, #0]
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	6123      	str	r3, [r4, #16]
 8009c9e:	4616      	mov	r6, r2
 8009ca0:	e7ba      	b.n	8009c18 <_printf_i+0x150>
 8009ca2:	680b      	ldr	r3, [r1, #0]
 8009ca4:	1d1a      	adds	r2, r3, #4
 8009ca6:	600a      	str	r2, [r1, #0]
 8009ca8:	681e      	ldr	r6, [r3, #0]
 8009caa:	6862      	ldr	r2, [r4, #4]
 8009cac:	2100      	movs	r1, #0
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f7f6 fb16 	bl	80002e0 <memchr>
 8009cb4:	b108      	cbz	r0, 8009cba <_printf_i+0x1f2>
 8009cb6:	1b80      	subs	r0, r0, r6
 8009cb8:	6060      	str	r0, [r4, #4]
 8009cba:	6863      	ldr	r3, [r4, #4]
 8009cbc:	6123      	str	r3, [r4, #16]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cc4:	e7a8      	b.n	8009c18 <_printf_i+0x150>
 8009cc6:	6923      	ldr	r3, [r4, #16]
 8009cc8:	4632      	mov	r2, r6
 8009cca:	4649      	mov	r1, r9
 8009ccc:	4640      	mov	r0, r8
 8009cce:	47d0      	blx	sl
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d0ab      	beq.n	8009c2c <_printf_i+0x164>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	079b      	lsls	r3, r3, #30
 8009cd8:	d413      	bmi.n	8009d02 <_printf_i+0x23a>
 8009cda:	68e0      	ldr	r0, [r4, #12]
 8009cdc:	9b03      	ldr	r3, [sp, #12]
 8009cde:	4298      	cmp	r0, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	4618      	movlt	r0, r3
 8009ce4:	e7a4      	b.n	8009c30 <_printf_i+0x168>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	4632      	mov	r2, r6
 8009cea:	4649      	mov	r1, r9
 8009cec:	4640      	mov	r0, r8
 8009cee:	47d0      	blx	sl
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d09b      	beq.n	8009c2c <_printf_i+0x164>
 8009cf4:	3501      	adds	r5, #1
 8009cf6:	68e3      	ldr	r3, [r4, #12]
 8009cf8:	9903      	ldr	r1, [sp, #12]
 8009cfa:	1a5b      	subs	r3, r3, r1
 8009cfc:	42ab      	cmp	r3, r5
 8009cfe:	dcf2      	bgt.n	8009ce6 <_printf_i+0x21e>
 8009d00:	e7eb      	b.n	8009cda <_printf_i+0x212>
 8009d02:	2500      	movs	r5, #0
 8009d04:	f104 0619 	add.w	r6, r4, #25
 8009d08:	e7f5      	b.n	8009cf6 <_printf_i+0x22e>
 8009d0a:	bf00      	nop
 8009d0c:	0801fb72 	.word	0x0801fb72
 8009d10:	0801fb83 	.word	0x0801fb83

08009d14 <siprintf>:
 8009d14:	b40e      	push	{r1, r2, r3}
 8009d16:	b500      	push	{lr}
 8009d18:	b09c      	sub	sp, #112	; 0x70
 8009d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8009d1c:	9002      	str	r0, [sp, #8]
 8009d1e:	9006      	str	r0, [sp, #24]
 8009d20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d24:	4809      	ldr	r0, [pc, #36]	; (8009d4c <siprintf+0x38>)
 8009d26:	9107      	str	r1, [sp, #28]
 8009d28:	9104      	str	r1, [sp, #16]
 8009d2a:	4909      	ldr	r1, [pc, #36]	; (8009d50 <siprintf+0x3c>)
 8009d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d30:	9105      	str	r1, [sp, #20]
 8009d32:	6800      	ldr	r0, [r0, #0]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	a902      	add	r1, sp, #8
 8009d38:	f001 fb34 	bl	800b3a4 <_svfiprintf_r>
 8009d3c:	9b02      	ldr	r3, [sp, #8]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	701a      	strb	r2, [r3, #0]
 8009d42:	b01c      	add	sp, #112	; 0x70
 8009d44:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d48:	b003      	add	sp, #12
 8009d4a:	4770      	bx	lr
 8009d4c:	20000010 	.word	0x20000010
 8009d50:	ffff0208 	.word	0xffff0208

08009d54 <quorem>:
 8009d54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	6903      	ldr	r3, [r0, #16]
 8009d5a:	690c      	ldr	r4, [r1, #16]
 8009d5c:	42a3      	cmp	r3, r4
 8009d5e:	4607      	mov	r7, r0
 8009d60:	f2c0 8081 	blt.w	8009e66 <quorem+0x112>
 8009d64:	3c01      	subs	r4, #1
 8009d66:	f101 0814 	add.w	r8, r1, #20
 8009d6a:	f100 0514 	add.w	r5, r0, #20
 8009d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d72:	9301      	str	r3, [sp, #4]
 8009d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009d84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009d88:	fbb2 f6f3 	udiv	r6, r2, r3
 8009d8c:	d331      	bcc.n	8009df2 <quorem+0x9e>
 8009d8e:	f04f 0e00 	mov.w	lr, #0
 8009d92:	4640      	mov	r0, r8
 8009d94:	46ac      	mov	ip, r5
 8009d96:	46f2      	mov	sl, lr
 8009d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8009d9c:	b293      	uxth	r3, r2
 8009d9e:	fb06 e303 	mla	r3, r6, r3, lr
 8009da2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	ebaa 0303 	sub.w	r3, sl, r3
 8009dac:	0c12      	lsrs	r2, r2, #16
 8009dae:	f8dc a000 	ldr.w	sl, [ip]
 8009db2:	fb06 e202 	mla	r2, r6, r2, lr
 8009db6:	fa13 f38a 	uxtah	r3, r3, sl
 8009dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009dbe:	fa1f fa82 	uxth.w	sl, r2
 8009dc2:	f8dc 2000 	ldr.w	r2, [ip]
 8009dc6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009dd4:	4581      	cmp	r9, r0
 8009dd6:	f84c 3b04 	str.w	r3, [ip], #4
 8009dda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009dde:	d2db      	bcs.n	8009d98 <quorem+0x44>
 8009de0:	f855 300b 	ldr.w	r3, [r5, fp]
 8009de4:	b92b      	cbnz	r3, 8009df2 <quorem+0x9e>
 8009de6:	9b01      	ldr	r3, [sp, #4]
 8009de8:	3b04      	subs	r3, #4
 8009dea:	429d      	cmp	r5, r3
 8009dec:	461a      	mov	r2, r3
 8009dee:	d32e      	bcc.n	8009e4e <quorem+0xfa>
 8009df0:	613c      	str	r4, [r7, #16]
 8009df2:	4638      	mov	r0, r7
 8009df4:	f001 f8c0 	bl	800af78 <__mcmp>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	db24      	blt.n	8009e46 <quorem+0xf2>
 8009dfc:	3601      	adds	r6, #1
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f04f 0c00 	mov.w	ip, #0
 8009e04:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e08:	f8d0 e000 	ldr.w	lr, [r0]
 8009e0c:	b293      	uxth	r3, r2
 8009e0e:	ebac 0303 	sub.w	r3, ip, r3
 8009e12:	0c12      	lsrs	r2, r2, #16
 8009e14:	fa13 f38e 	uxtah	r3, r3, lr
 8009e18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009e1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e26:	45c1      	cmp	r9, r8
 8009e28:	f840 3b04 	str.w	r3, [r0], #4
 8009e2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009e30:	d2e8      	bcs.n	8009e04 <quorem+0xb0>
 8009e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e3a:	b922      	cbnz	r2, 8009e46 <quorem+0xf2>
 8009e3c:	3b04      	subs	r3, #4
 8009e3e:	429d      	cmp	r5, r3
 8009e40:	461a      	mov	r2, r3
 8009e42:	d30a      	bcc.n	8009e5a <quorem+0x106>
 8009e44:	613c      	str	r4, [r7, #16]
 8009e46:	4630      	mov	r0, r6
 8009e48:	b003      	add	sp, #12
 8009e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e4e:	6812      	ldr	r2, [r2, #0]
 8009e50:	3b04      	subs	r3, #4
 8009e52:	2a00      	cmp	r2, #0
 8009e54:	d1cc      	bne.n	8009df0 <quorem+0x9c>
 8009e56:	3c01      	subs	r4, #1
 8009e58:	e7c7      	b.n	8009dea <quorem+0x96>
 8009e5a:	6812      	ldr	r2, [r2, #0]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	2a00      	cmp	r2, #0
 8009e60:	d1f0      	bne.n	8009e44 <quorem+0xf0>
 8009e62:	3c01      	subs	r4, #1
 8009e64:	e7eb      	b.n	8009e3e <quorem+0xea>
 8009e66:	2000      	movs	r0, #0
 8009e68:	e7ee      	b.n	8009e48 <quorem+0xf4>
 8009e6a:	0000      	movs	r0, r0
 8009e6c:	0000      	movs	r0, r0
	...

08009e70 <_dtoa_r>:
 8009e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e74:	ed2d 8b02 	vpush	{d8}
 8009e78:	ec57 6b10 	vmov	r6, r7, d0
 8009e7c:	b095      	sub	sp, #84	; 0x54
 8009e7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009e80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009e84:	9105      	str	r1, [sp, #20]
 8009e86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e90:	b975      	cbnz	r5, 8009eb0 <_dtoa_r+0x40>
 8009e92:	2010      	movs	r0, #16
 8009e94:	f000 fddc 	bl	800aa50 <malloc>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6260      	str	r0, [r4, #36]	; 0x24
 8009e9c:	b920      	cbnz	r0, 8009ea8 <_dtoa_r+0x38>
 8009e9e:	4bb2      	ldr	r3, [pc, #712]	; (800a168 <_dtoa_r+0x2f8>)
 8009ea0:	21ea      	movs	r1, #234	; 0xea
 8009ea2:	48b2      	ldr	r0, [pc, #712]	; (800a16c <_dtoa_r+0x2fc>)
 8009ea4:	f001 fb8e 	bl	800b5c4 <__assert_func>
 8009ea8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009eac:	6005      	str	r5, [r0, #0]
 8009eae:	60c5      	str	r5, [r0, #12]
 8009eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009eb2:	6819      	ldr	r1, [r3, #0]
 8009eb4:	b151      	cbz	r1, 8009ecc <_dtoa_r+0x5c>
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	604a      	str	r2, [r1, #4]
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4093      	lsls	r3, r2
 8009ebe:	608b      	str	r3, [r1, #8]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fe1b 	bl	800aafc <_Bfree>
 8009ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ec8:	2200      	movs	r2, #0
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	1e3b      	subs	r3, r7, #0
 8009ece:	bfb9      	ittee	lt
 8009ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009ed4:	9303      	strlt	r3, [sp, #12]
 8009ed6:	2300      	movge	r3, #0
 8009ed8:	f8c8 3000 	strge.w	r3, [r8]
 8009edc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009ee0:	4ba3      	ldr	r3, [pc, #652]	; (800a170 <_dtoa_r+0x300>)
 8009ee2:	bfbc      	itt	lt
 8009ee4:	2201      	movlt	r2, #1
 8009ee6:	f8c8 2000 	strlt.w	r2, [r8]
 8009eea:	ea33 0309 	bics.w	r3, r3, r9
 8009eee:	d11b      	bne.n	8009f28 <_dtoa_r+0xb8>
 8009ef0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ef2:	f242 730f 	movw	r3, #9999	; 0x270f
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009efc:	4333      	orrs	r3, r6
 8009efe:	f000 857a 	beq.w	800a9f6 <_dtoa_r+0xb86>
 8009f02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f04:	b963      	cbnz	r3, 8009f20 <_dtoa_r+0xb0>
 8009f06:	4b9b      	ldr	r3, [pc, #620]	; (800a174 <_dtoa_r+0x304>)
 8009f08:	e024      	b.n	8009f54 <_dtoa_r+0xe4>
 8009f0a:	4b9b      	ldr	r3, [pc, #620]	; (800a178 <_dtoa_r+0x308>)
 8009f0c:	9300      	str	r3, [sp, #0]
 8009f0e:	3308      	adds	r3, #8
 8009f10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	9800      	ldr	r0, [sp, #0]
 8009f16:	b015      	add	sp, #84	; 0x54
 8009f18:	ecbd 8b02 	vpop	{d8}
 8009f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f20:	4b94      	ldr	r3, [pc, #592]	; (800a174 <_dtoa_r+0x304>)
 8009f22:	9300      	str	r3, [sp, #0]
 8009f24:	3303      	adds	r3, #3
 8009f26:	e7f3      	b.n	8009f10 <_dtoa_r+0xa0>
 8009f28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	ec51 0b17 	vmov	r0, r1, d7
 8009f32:	2300      	movs	r3, #0
 8009f34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009f38:	f7f6 fe46 	bl	8000bc8 <__aeabi_dcmpeq>
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	b158      	cbz	r0, 8009f58 <_dtoa_r+0xe8>
 8009f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009f42:	2301      	movs	r3, #1
 8009f44:	6013      	str	r3, [r2, #0]
 8009f46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 8551 	beq.w	800a9f0 <_dtoa_r+0xb80>
 8009f4e:	488b      	ldr	r0, [pc, #556]	; (800a17c <_dtoa_r+0x30c>)
 8009f50:	6018      	str	r0, [r3, #0]
 8009f52:	1e43      	subs	r3, r0, #1
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	e7dd      	b.n	8009f14 <_dtoa_r+0xa4>
 8009f58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009f5c:	aa12      	add	r2, sp, #72	; 0x48
 8009f5e:	a913      	add	r1, sp, #76	; 0x4c
 8009f60:	4620      	mov	r0, r4
 8009f62:	f001 f8ad 	bl	800b0c0 <__d2b>
 8009f66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f6a:	4683      	mov	fp, r0
 8009f6c:	2d00      	cmp	r5, #0
 8009f6e:	d07c      	beq.n	800a06a <_dtoa_r+0x1fa>
 8009f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009f76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009f7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009f82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009f86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009f8a:	4b7d      	ldr	r3, [pc, #500]	; (800a180 <_dtoa_r+0x310>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4630      	mov	r0, r6
 8009f90:	4639      	mov	r1, r7
 8009f92:	f7f6 f9f9 	bl	8000388 <__aeabi_dsub>
 8009f96:	a36e      	add	r3, pc, #440	; (adr r3, 800a150 <_dtoa_r+0x2e0>)
 8009f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f9c:	f7f6 fbac 	bl	80006f8 <__aeabi_dmul>
 8009fa0:	a36d      	add	r3, pc, #436	; (adr r3, 800a158 <_dtoa_r+0x2e8>)
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f7f6 f9f1 	bl	800038c <__adddf3>
 8009faa:	4606      	mov	r6, r0
 8009fac:	4628      	mov	r0, r5
 8009fae:	460f      	mov	r7, r1
 8009fb0:	f7f6 fb38 	bl	8000624 <__aeabi_i2d>
 8009fb4:	a36a      	add	r3, pc, #424	; (adr r3, 800a160 <_dtoa_r+0x2f0>)
 8009fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fba:	f7f6 fb9d 	bl	80006f8 <__aeabi_dmul>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	4639      	mov	r1, r7
 8009fc6:	f7f6 f9e1 	bl	800038c <__adddf3>
 8009fca:	4606      	mov	r6, r0
 8009fcc:	460f      	mov	r7, r1
 8009fce:	f7f6 fe43 	bl	8000c58 <__aeabi_d2iz>
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	4630      	mov	r0, r6
 8009fda:	4639      	mov	r1, r7
 8009fdc:	f7f6 fdfe 	bl	8000bdc <__aeabi_dcmplt>
 8009fe0:	b148      	cbz	r0, 8009ff6 <_dtoa_r+0x186>
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	f7f6 fb1e 	bl	8000624 <__aeabi_i2d>
 8009fe8:	4632      	mov	r2, r6
 8009fea:	463b      	mov	r3, r7
 8009fec:	f7f6 fdec 	bl	8000bc8 <__aeabi_dcmpeq>
 8009ff0:	b908      	cbnz	r0, 8009ff6 <_dtoa_r+0x186>
 8009ff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ff6:	f1ba 0f16 	cmp.w	sl, #22
 8009ffa:	d854      	bhi.n	800a0a6 <_dtoa_r+0x236>
 8009ffc:	4b61      	ldr	r3, [pc, #388]	; (800a184 <_dtoa_r+0x314>)
 8009ffe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a006:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a00a:	f7f6 fde7 	bl	8000bdc <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d04b      	beq.n	800a0aa <_dtoa_r+0x23a>
 800a012:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a016:	2300      	movs	r3, #0
 800a018:	930e      	str	r3, [sp, #56]	; 0x38
 800a01a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a01c:	1b5d      	subs	r5, r3, r5
 800a01e:	1e6b      	subs	r3, r5, #1
 800a020:	9304      	str	r3, [sp, #16]
 800a022:	bf43      	ittte	mi
 800a024:	2300      	movmi	r3, #0
 800a026:	f1c5 0801 	rsbmi	r8, r5, #1
 800a02a:	9304      	strmi	r3, [sp, #16]
 800a02c:	f04f 0800 	movpl.w	r8, #0
 800a030:	f1ba 0f00 	cmp.w	sl, #0
 800a034:	db3b      	blt.n	800a0ae <_dtoa_r+0x23e>
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a03c:	4453      	add	r3, sl
 800a03e:	9304      	str	r3, [sp, #16]
 800a040:	2300      	movs	r3, #0
 800a042:	9306      	str	r3, [sp, #24]
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	2b09      	cmp	r3, #9
 800a048:	d869      	bhi.n	800a11e <_dtoa_r+0x2ae>
 800a04a:	2b05      	cmp	r3, #5
 800a04c:	bfc4      	itt	gt
 800a04e:	3b04      	subgt	r3, #4
 800a050:	9305      	strgt	r3, [sp, #20]
 800a052:	9b05      	ldr	r3, [sp, #20]
 800a054:	f1a3 0302 	sub.w	r3, r3, #2
 800a058:	bfcc      	ite	gt
 800a05a:	2500      	movgt	r5, #0
 800a05c:	2501      	movle	r5, #1
 800a05e:	2b03      	cmp	r3, #3
 800a060:	d869      	bhi.n	800a136 <_dtoa_r+0x2c6>
 800a062:	e8df f003 	tbb	[pc, r3]
 800a066:	4e2c      	.short	0x4e2c
 800a068:	5a4c      	.short	0x5a4c
 800a06a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a06e:	441d      	add	r5, r3
 800a070:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a074:	2b20      	cmp	r3, #32
 800a076:	bfc1      	itttt	gt
 800a078:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a07c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a080:	fa09 f303 	lslgt.w	r3, r9, r3
 800a084:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a088:	bfda      	itte	le
 800a08a:	f1c3 0320 	rsble	r3, r3, #32
 800a08e:	fa06 f003 	lslle.w	r0, r6, r3
 800a092:	4318      	orrgt	r0, r3
 800a094:	f7f6 fab6 	bl	8000604 <__aeabi_ui2d>
 800a098:	2301      	movs	r3, #1
 800a09a:	4606      	mov	r6, r0
 800a09c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a0a0:	3d01      	subs	r5, #1
 800a0a2:	9310      	str	r3, [sp, #64]	; 0x40
 800a0a4:	e771      	b.n	8009f8a <_dtoa_r+0x11a>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e7b6      	b.n	800a018 <_dtoa_r+0x1a8>
 800a0aa:	900e      	str	r0, [sp, #56]	; 0x38
 800a0ac:	e7b5      	b.n	800a01a <_dtoa_r+0x1aa>
 800a0ae:	f1ca 0300 	rsb	r3, sl, #0
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	eba8 080a 	sub.w	r8, r8, sl
 800a0ba:	930d      	str	r3, [sp, #52]	; 0x34
 800a0bc:	e7c2      	b.n	800a044 <_dtoa_r+0x1d4>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	9308      	str	r3, [sp, #32]
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	dc39      	bgt.n	800a13c <_dtoa_r+0x2cc>
 800a0c8:	f04f 0901 	mov.w	r9, #1
 800a0cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a0d0:	464b      	mov	r3, r9
 800a0d2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a0d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a0d8:	2200      	movs	r2, #0
 800a0da:	6042      	str	r2, [r0, #4]
 800a0dc:	2204      	movs	r2, #4
 800a0de:	f102 0614 	add.w	r6, r2, #20
 800a0e2:	429e      	cmp	r6, r3
 800a0e4:	6841      	ldr	r1, [r0, #4]
 800a0e6:	d92f      	bls.n	800a148 <_dtoa_r+0x2d8>
 800a0e8:	4620      	mov	r0, r4
 800a0ea:	f000 fcc7 	bl	800aa7c <_Balloc>
 800a0ee:	9000      	str	r0, [sp, #0]
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d14b      	bne.n	800a18c <_dtoa_r+0x31c>
 800a0f4:	4b24      	ldr	r3, [pc, #144]	; (800a188 <_dtoa_r+0x318>)
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a0fc:	e6d1      	b.n	8009ea2 <_dtoa_r+0x32>
 800a0fe:	2301      	movs	r3, #1
 800a100:	e7de      	b.n	800a0c0 <_dtoa_r+0x250>
 800a102:	2300      	movs	r3, #0
 800a104:	9308      	str	r3, [sp, #32]
 800a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a108:	eb0a 0903 	add.w	r9, sl, r3
 800a10c:	f109 0301 	add.w	r3, r9, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	9301      	str	r3, [sp, #4]
 800a114:	bfb8      	it	lt
 800a116:	2301      	movlt	r3, #1
 800a118:	e7dd      	b.n	800a0d6 <_dtoa_r+0x266>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e7f2      	b.n	800a104 <_dtoa_r+0x294>
 800a11e:	2501      	movs	r5, #1
 800a120:	2300      	movs	r3, #0
 800a122:	9305      	str	r3, [sp, #20]
 800a124:	9508      	str	r5, [sp, #32]
 800a126:	f04f 39ff 	mov.w	r9, #4294967295
 800a12a:	2200      	movs	r2, #0
 800a12c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a130:	2312      	movs	r3, #18
 800a132:	9209      	str	r2, [sp, #36]	; 0x24
 800a134:	e7cf      	b.n	800a0d6 <_dtoa_r+0x266>
 800a136:	2301      	movs	r3, #1
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	e7f4      	b.n	800a126 <_dtoa_r+0x2b6>
 800a13c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a140:	f8cd 9004 	str.w	r9, [sp, #4]
 800a144:	464b      	mov	r3, r9
 800a146:	e7c6      	b.n	800a0d6 <_dtoa_r+0x266>
 800a148:	3101      	adds	r1, #1
 800a14a:	6041      	str	r1, [r0, #4]
 800a14c:	0052      	lsls	r2, r2, #1
 800a14e:	e7c6      	b.n	800a0de <_dtoa_r+0x26e>
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0801fba1 	.word	0x0801fba1
 800a16c:	0801fbb8 	.word	0x0801fbb8
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0801fb9d 	.word	0x0801fb9d
 800a178:	0801fb94 	.word	0x0801fb94
 800a17c:	0801fb71 	.word	0x0801fb71
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0801fcb0 	.word	0x0801fcb0
 800a188:	0801fc17 	.word	0x0801fc17
 800a18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a18e:	9a00      	ldr	r2, [sp, #0]
 800a190:	601a      	str	r2, [r3, #0]
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	2b0e      	cmp	r3, #14
 800a196:	f200 80ad 	bhi.w	800a2f4 <_dtoa_r+0x484>
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	f000 80aa 	beq.w	800a2f4 <_dtoa_r+0x484>
 800a1a0:	f1ba 0f00 	cmp.w	sl, #0
 800a1a4:	dd36      	ble.n	800a214 <_dtoa_r+0x3a4>
 800a1a6:	4ac3      	ldr	r2, [pc, #780]	; (800a4b4 <_dtoa_r+0x644>)
 800a1a8:	f00a 030f 	and.w	r3, sl, #15
 800a1ac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1b0:	ed93 7b00 	vldr	d7, [r3]
 800a1b4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a1b8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a1bc:	eeb0 8a47 	vmov.f32	s16, s14
 800a1c0:	eef0 8a67 	vmov.f32	s17, s15
 800a1c4:	d016      	beq.n	800a1f4 <_dtoa_r+0x384>
 800a1c6:	4bbc      	ldr	r3, [pc, #752]	; (800a4b8 <_dtoa_r+0x648>)
 800a1c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1d0:	f7f6 fbbc 	bl	800094c <__aeabi_ddiv>
 800a1d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d8:	f007 070f 	and.w	r7, r7, #15
 800a1dc:	2503      	movs	r5, #3
 800a1de:	4eb6      	ldr	r6, [pc, #728]	; (800a4b8 <_dtoa_r+0x648>)
 800a1e0:	b957      	cbnz	r7, 800a1f8 <_dtoa_r+0x388>
 800a1e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e6:	ec53 2b18 	vmov	r2, r3, d8
 800a1ea:	f7f6 fbaf 	bl	800094c <__aeabi_ddiv>
 800a1ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1f2:	e029      	b.n	800a248 <_dtoa_r+0x3d8>
 800a1f4:	2502      	movs	r5, #2
 800a1f6:	e7f2      	b.n	800a1de <_dtoa_r+0x36e>
 800a1f8:	07f9      	lsls	r1, r7, #31
 800a1fa:	d508      	bpl.n	800a20e <_dtoa_r+0x39e>
 800a1fc:	ec51 0b18 	vmov	r0, r1, d8
 800a200:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a204:	f7f6 fa78 	bl	80006f8 <__aeabi_dmul>
 800a208:	ec41 0b18 	vmov	d8, r0, r1
 800a20c:	3501      	adds	r5, #1
 800a20e:	107f      	asrs	r7, r7, #1
 800a210:	3608      	adds	r6, #8
 800a212:	e7e5      	b.n	800a1e0 <_dtoa_r+0x370>
 800a214:	f000 80a6 	beq.w	800a364 <_dtoa_r+0x4f4>
 800a218:	f1ca 0600 	rsb	r6, sl, #0
 800a21c:	4ba5      	ldr	r3, [pc, #660]	; (800a4b4 <_dtoa_r+0x644>)
 800a21e:	4fa6      	ldr	r7, [pc, #664]	; (800a4b8 <_dtoa_r+0x648>)
 800a220:	f006 020f 	and.w	r2, r6, #15
 800a224:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a230:	f7f6 fa62 	bl	80006f8 <__aeabi_dmul>
 800a234:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a238:	1136      	asrs	r6, r6, #4
 800a23a:	2300      	movs	r3, #0
 800a23c:	2502      	movs	r5, #2
 800a23e:	2e00      	cmp	r6, #0
 800a240:	f040 8085 	bne.w	800a34e <_dtoa_r+0x4de>
 800a244:	2b00      	cmp	r3, #0
 800a246:	d1d2      	bne.n	800a1ee <_dtoa_r+0x37e>
 800a248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 808c 	beq.w	800a368 <_dtoa_r+0x4f8>
 800a250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a254:	4b99      	ldr	r3, [pc, #612]	; (800a4bc <_dtoa_r+0x64c>)
 800a256:	2200      	movs	r2, #0
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fcbe 	bl	8000bdc <__aeabi_dcmplt>
 800a260:	2800      	cmp	r0, #0
 800a262:	f000 8081 	beq.w	800a368 <_dtoa_r+0x4f8>
 800a266:	9b01      	ldr	r3, [sp, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d07d      	beq.n	800a368 <_dtoa_r+0x4f8>
 800a26c:	f1b9 0f00 	cmp.w	r9, #0
 800a270:	dd3c      	ble.n	800a2ec <_dtoa_r+0x47c>
 800a272:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a276:	9307      	str	r3, [sp, #28]
 800a278:	2200      	movs	r2, #0
 800a27a:	4b91      	ldr	r3, [pc, #580]	; (800a4c0 <_dtoa_r+0x650>)
 800a27c:	4630      	mov	r0, r6
 800a27e:	4639      	mov	r1, r7
 800a280:	f7f6 fa3a 	bl	80006f8 <__aeabi_dmul>
 800a284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a288:	3501      	adds	r5, #1
 800a28a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a28e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a292:	4628      	mov	r0, r5
 800a294:	f7f6 f9c6 	bl	8000624 <__aeabi_i2d>
 800a298:	4632      	mov	r2, r6
 800a29a:	463b      	mov	r3, r7
 800a29c:	f7f6 fa2c 	bl	80006f8 <__aeabi_dmul>
 800a2a0:	4b88      	ldr	r3, [pc, #544]	; (800a4c4 <_dtoa_r+0x654>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	f7f6 f872 	bl	800038c <__adddf3>
 800a2a8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a2ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a2b0:	9303      	str	r3, [sp, #12]
 800a2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d15c      	bne.n	800a372 <_dtoa_r+0x502>
 800a2b8:	4b83      	ldr	r3, [pc, #524]	; (800a4c8 <_dtoa_r+0x658>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	4630      	mov	r0, r6
 800a2be:	4639      	mov	r1, r7
 800a2c0:	f7f6 f862 	bl	8000388 <__aeabi_dsub>
 800a2c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2c8:	4606      	mov	r6, r0
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	f7f6 fca4 	bl	8000c18 <__aeabi_dcmpgt>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	f040 8296 	bne.w	800a802 <_dtoa_r+0x992>
 800a2d6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	f7f6 fc7b 	bl	8000bdc <__aeabi_dcmplt>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	f040 8288 	bne.w	800a7fc <_dtoa_r+0x98c>
 800a2ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f2c0 8158 	blt.w	800a5ac <_dtoa_r+0x73c>
 800a2fc:	f1ba 0f0e 	cmp.w	sl, #14
 800a300:	f300 8154 	bgt.w	800a5ac <_dtoa_r+0x73c>
 800a304:	4b6b      	ldr	r3, [pc, #428]	; (800a4b4 <_dtoa_r+0x644>)
 800a306:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a30a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a30e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a310:	2b00      	cmp	r3, #0
 800a312:	f280 80e3 	bge.w	800a4dc <_dtoa_r+0x66c>
 800a316:	9b01      	ldr	r3, [sp, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f300 80df 	bgt.w	800a4dc <_dtoa_r+0x66c>
 800a31e:	f040 826d 	bne.w	800a7fc <_dtoa_r+0x98c>
 800a322:	4b69      	ldr	r3, [pc, #420]	; (800a4c8 <_dtoa_r+0x658>)
 800a324:	2200      	movs	r2, #0
 800a326:	4640      	mov	r0, r8
 800a328:	4649      	mov	r1, r9
 800a32a:	f7f6 f9e5 	bl	80006f8 <__aeabi_dmul>
 800a32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a332:	f7f6 fc67 	bl	8000c04 <__aeabi_dcmpge>
 800a336:	9e01      	ldr	r6, [sp, #4]
 800a338:	4637      	mov	r7, r6
 800a33a:	2800      	cmp	r0, #0
 800a33c:	f040 8243 	bne.w	800a7c6 <_dtoa_r+0x956>
 800a340:	9d00      	ldr	r5, [sp, #0]
 800a342:	2331      	movs	r3, #49	; 0x31
 800a344:	f805 3b01 	strb.w	r3, [r5], #1
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	e23f      	b.n	800a7ce <_dtoa_r+0x95e>
 800a34e:	07f2      	lsls	r2, r6, #31
 800a350:	d505      	bpl.n	800a35e <_dtoa_r+0x4ee>
 800a352:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a356:	f7f6 f9cf 	bl	80006f8 <__aeabi_dmul>
 800a35a:	3501      	adds	r5, #1
 800a35c:	2301      	movs	r3, #1
 800a35e:	1076      	asrs	r6, r6, #1
 800a360:	3708      	adds	r7, #8
 800a362:	e76c      	b.n	800a23e <_dtoa_r+0x3ce>
 800a364:	2502      	movs	r5, #2
 800a366:	e76f      	b.n	800a248 <_dtoa_r+0x3d8>
 800a368:	9b01      	ldr	r3, [sp, #4]
 800a36a:	f8cd a01c 	str.w	sl, [sp, #28]
 800a36e:	930c      	str	r3, [sp, #48]	; 0x30
 800a370:	e78d      	b.n	800a28e <_dtoa_r+0x41e>
 800a372:	9900      	ldr	r1, [sp, #0]
 800a374:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a378:	4b4e      	ldr	r3, [pc, #312]	; (800a4b4 <_dtoa_r+0x644>)
 800a37a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a37e:	4401      	add	r1, r0
 800a380:	9102      	str	r1, [sp, #8]
 800a382:	9908      	ldr	r1, [sp, #32]
 800a384:	eeb0 8a47 	vmov.f32	s16, s14
 800a388:	eef0 8a67 	vmov.f32	s17, s15
 800a38c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a390:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a394:	2900      	cmp	r1, #0
 800a396:	d045      	beq.n	800a424 <_dtoa_r+0x5b4>
 800a398:	494c      	ldr	r1, [pc, #304]	; (800a4cc <_dtoa_r+0x65c>)
 800a39a:	2000      	movs	r0, #0
 800a39c:	f7f6 fad6 	bl	800094c <__aeabi_ddiv>
 800a3a0:	ec53 2b18 	vmov	r2, r3, d8
 800a3a4:	f7f5 fff0 	bl	8000388 <__aeabi_dsub>
 800a3a8:	9d00      	ldr	r5, [sp, #0]
 800a3aa:	ec41 0b18 	vmov	d8, r0, r1
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7f6 fc51 	bl	8000c58 <__aeabi_d2iz>
 800a3b6:	900c      	str	r0, [sp, #48]	; 0x30
 800a3b8:	f7f6 f934 	bl	8000624 <__aeabi_i2d>
 800a3bc:	4602      	mov	r2, r0
 800a3be:	460b      	mov	r3, r1
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	f7f5 ffe0 	bl	8000388 <__aeabi_dsub>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3ca:	3330      	adds	r3, #48	; 0x30
 800a3cc:	f805 3b01 	strb.w	r3, [r5], #1
 800a3d0:	ec53 2b18 	vmov	r2, r3, d8
 800a3d4:	4606      	mov	r6, r0
 800a3d6:	460f      	mov	r7, r1
 800a3d8:	f7f6 fc00 	bl	8000bdc <__aeabi_dcmplt>
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d165      	bne.n	800a4ac <_dtoa_r+0x63c>
 800a3e0:	4632      	mov	r2, r6
 800a3e2:	463b      	mov	r3, r7
 800a3e4:	4935      	ldr	r1, [pc, #212]	; (800a4bc <_dtoa_r+0x64c>)
 800a3e6:	2000      	movs	r0, #0
 800a3e8:	f7f5 ffce 	bl	8000388 <__aeabi_dsub>
 800a3ec:	ec53 2b18 	vmov	r2, r3, d8
 800a3f0:	f7f6 fbf4 	bl	8000bdc <__aeabi_dcmplt>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	f040 80b9 	bne.w	800a56c <_dtoa_r+0x6fc>
 800a3fa:	9b02      	ldr	r3, [sp, #8]
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	f43f af75 	beq.w	800a2ec <_dtoa_r+0x47c>
 800a402:	4b2f      	ldr	r3, [pc, #188]	; (800a4c0 <_dtoa_r+0x650>)
 800a404:	ec51 0b18 	vmov	r0, r1, d8
 800a408:	2200      	movs	r2, #0
 800a40a:	f7f6 f975 	bl	80006f8 <__aeabi_dmul>
 800a40e:	4b2c      	ldr	r3, [pc, #176]	; (800a4c0 <_dtoa_r+0x650>)
 800a410:	ec41 0b18 	vmov	d8, r0, r1
 800a414:	2200      	movs	r2, #0
 800a416:	4630      	mov	r0, r6
 800a418:	4639      	mov	r1, r7
 800a41a:	f7f6 f96d 	bl	80006f8 <__aeabi_dmul>
 800a41e:	4606      	mov	r6, r0
 800a420:	460f      	mov	r7, r1
 800a422:	e7c4      	b.n	800a3ae <_dtoa_r+0x53e>
 800a424:	ec51 0b17 	vmov	r0, r1, d7
 800a428:	f7f6 f966 	bl	80006f8 <__aeabi_dmul>
 800a42c:	9b02      	ldr	r3, [sp, #8]
 800a42e:	9d00      	ldr	r5, [sp, #0]
 800a430:	930c      	str	r3, [sp, #48]	; 0x30
 800a432:	ec41 0b18 	vmov	d8, r0, r1
 800a436:	4639      	mov	r1, r7
 800a438:	4630      	mov	r0, r6
 800a43a:	f7f6 fc0d 	bl	8000c58 <__aeabi_d2iz>
 800a43e:	9011      	str	r0, [sp, #68]	; 0x44
 800a440:	f7f6 f8f0 	bl	8000624 <__aeabi_i2d>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4630      	mov	r0, r6
 800a44a:	4639      	mov	r1, r7
 800a44c:	f7f5 ff9c 	bl	8000388 <__aeabi_dsub>
 800a450:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a452:	3330      	adds	r3, #48	; 0x30
 800a454:	f805 3b01 	strb.w	r3, [r5], #1
 800a458:	9b02      	ldr	r3, [sp, #8]
 800a45a:	429d      	cmp	r5, r3
 800a45c:	4606      	mov	r6, r0
 800a45e:	460f      	mov	r7, r1
 800a460:	f04f 0200 	mov.w	r2, #0
 800a464:	d134      	bne.n	800a4d0 <_dtoa_r+0x660>
 800a466:	4b19      	ldr	r3, [pc, #100]	; (800a4cc <_dtoa_r+0x65c>)
 800a468:	ec51 0b18 	vmov	r0, r1, d8
 800a46c:	f7f5 ff8e 	bl	800038c <__adddf3>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f6 fbce 	bl	8000c18 <__aeabi_dcmpgt>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d175      	bne.n	800a56c <_dtoa_r+0x6fc>
 800a480:	ec53 2b18 	vmov	r2, r3, d8
 800a484:	4911      	ldr	r1, [pc, #68]	; (800a4cc <_dtoa_r+0x65c>)
 800a486:	2000      	movs	r0, #0
 800a488:	f7f5 ff7e 	bl	8000388 <__aeabi_dsub>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4630      	mov	r0, r6
 800a492:	4639      	mov	r1, r7
 800a494:	f7f6 fba2 	bl	8000bdc <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f43f af27 	beq.w	800a2ec <_dtoa_r+0x47c>
 800a49e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a4a0:	1e6b      	subs	r3, r5, #1
 800a4a2:	930c      	str	r3, [sp, #48]	; 0x30
 800a4a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4a8:	2b30      	cmp	r3, #48	; 0x30
 800a4aa:	d0f8      	beq.n	800a49e <_dtoa_r+0x62e>
 800a4ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a4b0:	e04a      	b.n	800a548 <_dtoa_r+0x6d8>
 800a4b2:	bf00      	nop
 800a4b4:	0801fcb0 	.word	0x0801fcb0
 800a4b8:	0801fc88 	.word	0x0801fc88
 800a4bc:	3ff00000 	.word	0x3ff00000
 800a4c0:	40240000 	.word	0x40240000
 800a4c4:	401c0000 	.word	0x401c0000
 800a4c8:	40140000 	.word	0x40140000
 800a4cc:	3fe00000 	.word	0x3fe00000
 800a4d0:	4baf      	ldr	r3, [pc, #700]	; (800a790 <_dtoa_r+0x920>)
 800a4d2:	f7f6 f911 	bl	80006f8 <__aeabi_dmul>
 800a4d6:	4606      	mov	r6, r0
 800a4d8:	460f      	mov	r7, r1
 800a4da:	e7ac      	b.n	800a436 <_dtoa_r+0x5c6>
 800a4dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4e0:	9d00      	ldr	r5, [sp, #0]
 800a4e2:	4642      	mov	r2, r8
 800a4e4:	464b      	mov	r3, r9
 800a4e6:	4630      	mov	r0, r6
 800a4e8:	4639      	mov	r1, r7
 800a4ea:	f7f6 fa2f 	bl	800094c <__aeabi_ddiv>
 800a4ee:	f7f6 fbb3 	bl	8000c58 <__aeabi_d2iz>
 800a4f2:	9002      	str	r0, [sp, #8]
 800a4f4:	f7f6 f896 	bl	8000624 <__aeabi_i2d>
 800a4f8:	4642      	mov	r2, r8
 800a4fa:	464b      	mov	r3, r9
 800a4fc:	f7f6 f8fc 	bl	80006f8 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f5 ff3e 	bl	8000388 <__aeabi_dsub>
 800a50c:	9e02      	ldr	r6, [sp, #8]
 800a50e:	9f01      	ldr	r7, [sp, #4]
 800a510:	3630      	adds	r6, #48	; 0x30
 800a512:	f805 6b01 	strb.w	r6, [r5], #1
 800a516:	9e00      	ldr	r6, [sp, #0]
 800a518:	1bae      	subs	r6, r5, r6
 800a51a:	42b7      	cmp	r7, r6
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	d137      	bne.n	800a592 <_dtoa_r+0x722>
 800a522:	f7f5 ff33 	bl	800038c <__adddf3>
 800a526:	4642      	mov	r2, r8
 800a528:	464b      	mov	r3, r9
 800a52a:	4606      	mov	r6, r0
 800a52c:	460f      	mov	r7, r1
 800a52e:	f7f6 fb73 	bl	8000c18 <__aeabi_dcmpgt>
 800a532:	b9c8      	cbnz	r0, 800a568 <_dtoa_r+0x6f8>
 800a534:	4642      	mov	r2, r8
 800a536:	464b      	mov	r3, r9
 800a538:	4630      	mov	r0, r6
 800a53a:	4639      	mov	r1, r7
 800a53c:	f7f6 fb44 	bl	8000bc8 <__aeabi_dcmpeq>
 800a540:	b110      	cbz	r0, 800a548 <_dtoa_r+0x6d8>
 800a542:	9b02      	ldr	r3, [sp, #8]
 800a544:	07d9      	lsls	r1, r3, #31
 800a546:	d40f      	bmi.n	800a568 <_dtoa_r+0x6f8>
 800a548:	4620      	mov	r0, r4
 800a54a:	4659      	mov	r1, fp
 800a54c:	f000 fad6 	bl	800aafc <_Bfree>
 800a550:	2300      	movs	r3, #0
 800a552:	702b      	strb	r3, [r5, #0]
 800a554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a556:	f10a 0001 	add.w	r0, sl, #1
 800a55a:	6018      	str	r0, [r3, #0]
 800a55c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f43f acd8 	beq.w	8009f14 <_dtoa_r+0xa4>
 800a564:	601d      	str	r5, [r3, #0]
 800a566:	e4d5      	b.n	8009f14 <_dtoa_r+0xa4>
 800a568:	f8cd a01c 	str.w	sl, [sp, #28]
 800a56c:	462b      	mov	r3, r5
 800a56e:	461d      	mov	r5, r3
 800a570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a574:	2a39      	cmp	r2, #57	; 0x39
 800a576:	d108      	bne.n	800a58a <_dtoa_r+0x71a>
 800a578:	9a00      	ldr	r2, [sp, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d1f7      	bne.n	800a56e <_dtoa_r+0x6fe>
 800a57e:	9a07      	ldr	r2, [sp, #28]
 800a580:	9900      	ldr	r1, [sp, #0]
 800a582:	3201      	adds	r2, #1
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	2230      	movs	r2, #48	; 0x30
 800a588:	700a      	strb	r2, [r1, #0]
 800a58a:	781a      	ldrb	r2, [r3, #0]
 800a58c:	3201      	adds	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e78c      	b.n	800a4ac <_dtoa_r+0x63c>
 800a592:	4b7f      	ldr	r3, [pc, #508]	; (800a790 <_dtoa_r+0x920>)
 800a594:	2200      	movs	r2, #0
 800a596:	f7f6 f8af 	bl	80006f8 <__aeabi_dmul>
 800a59a:	2200      	movs	r2, #0
 800a59c:	2300      	movs	r3, #0
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	f7f6 fb11 	bl	8000bc8 <__aeabi_dcmpeq>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d09b      	beq.n	800a4e2 <_dtoa_r+0x672>
 800a5aa:	e7cd      	b.n	800a548 <_dtoa_r+0x6d8>
 800a5ac:	9a08      	ldr	r2, [sp, #32]
 800a5ae:	2a00      	cmp	r2, #0
 800a5b0:	f000 80c4 	beq.w	800a73c <_dtoa_r+0x8cc>
 800a5b4:	9a05      	ldr	r2, [sp, #20]
 800a5b6:	2a01      	cmp	r2, #1
 800a5b8:	f300 80a8 	bgt.w	800a70c <_dtoa_r+0x89c>
 800a5bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a5be:	2a00      	cmp	r2, #0
 800a5c0:	f000 80a0 	beq.w	800a704 <_dtoa_r+0x894>
 800a5c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a5c8:	9e06      	ldr	r6, [sp, #24]
 800a5ca:	4645      	mov	r5, r8
 800a5cc:	9a04      	ldr	r2, [sp, #16]
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	441a      	add	r2, r3
 800a5d2:	4620      	mov	r0, r4
 800a5d4:	4498      	add	r8, r3
 800a5d6:	9204      	str	r2, [sp, #16]
 800a5d8:	f000 fb4c 	bl	800ac74 <__i2b>
 800a5dc:	4607      	mov	r7, r0
 800a5de:	2d00      	cmp	r5, #0
 800a5e0:	dd0b      	ble.n	800a5fa <_dtoa_r+0x78a>
 800a5e2:	9b04      	ldr	r3, [sp, #16]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dd08      	ble.n	800a5fa <_dtoa_r+0x78a>
 800a5e8:	42ab      	cmp	r3, r5
 800a5ea:	9a04      	ldr	r2, [sp, #16]
 800a5ec:	bfa8      	it	ge
 800a5ee:	462b      	movge	r3, r5
 800a5f0:	eba8 0803 	sub.w	r8, r8, r3
 800a5f4:	1aed      	subs	r5, r5, r3
 800a5f6:	1ad3      	subs	r3, r2, r3
 800a5f8:	9304      	str	r3, [sp, #16]
 800a5fa:	9b06      	ldr	r3, [sp, #24]
 800a5fc:	b1fb      	cbz	r3, 800a63e <_dtoa_r+0x7ce>
 800a5fe:	9b08      	ldr	r3, [sp, #32]
 800a600:	2b00      	cmp	r3, #0
 800a602:	f000 809f 	beq.w	800a744 <_dtoa_r+0x8d4>
 800a606:	2e00      	cmp	r6, #0
 800a608:	dd11      	ble.n	800a62e <_dtoa_r+0x7be>
 800a60a:	4639      	mov	r1, r7
 800a60c:	4632      	mov	r2, r6
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 fbec 	bl	800adec <__pow5mult>
 800a614:	465a      	mov	r2, fp
 800a616:	4601      	mov	r1, r0
 800a618:	4607      	mov	r7, r0
 800a61a:	4620      	mov	r0, r4
 800a61c:	f000 fb40 	bl	800aca0 <__multiply>
 800a620:	4659      	mov	r1, fp
 800a622:	9007      	str	r0, [sp, #28]
 800a624:	4620      	mov	r0, r4
 800a626:	f000 fa69 	bl	800aafc <_Bfree>
 800a62a:	9b07      	ldr	r3, [sp, #28]
 800a62c:	469b      	mov	fp, r3
 800a62e:	9b06      	ldr	r3, [sp, #24]
 800a630:	1b9a      	subs	r2, r3, r6
 800a632:	d004      	beq.n	800a63e <_dtoa_r+0x7ce>
 800a634:	4659      	mov	r1, fp
 800a636:	4620      	mov	r0, r4
 800a638:	f000 fbd8 	bl	800adec <__pow5mult>
 800a63c:	4683      	mov	fp, r0
 800a63e:	2101      	movs	r1, #1
 800a640:	4620      	mov	r0, r4
 800a642:	f000 fb17 	bl	800ac74 <__i2b>
 800a646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a648:	2b00      	cmp	r3, #0
 800a64a:	4606      	mov	r6, r0
 800a64c:	dd7c      	ble.n	800a748 <_dtoa_r+0x8d8>
 800a64e:	461a      	mov	r2, r3
 800a650:	4601      	mov	r1, r0
 800a652:	4620      	mov	r0, r4
 800a654:	f000 fbca 	bl	800adec <__pow5mult>
 800a658:	9b05      	ldr	r3, [sp, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	4606      	mov	r6, r0
 800a65e:	dd76      	ble.n	800a74e <_dtoa_r+0x8de>
 800a660:	2300      	movs	r3, #0
 800a662:	9306      	str	r3, [sp, #24]
 800a664:	6933      	ldr	r3, [r6, #16]
 800a666:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a66a:	6918      	ldr	r0, [r3, #16]
 800a66c:	f000 fab2 	bl	800abd4 <__hi0bits>
 800a670:	f1c0 0020 	rsb	r0, r0, #32
 800a674:	9b04      	ldr	r3, [sp, #16]
 800a676:	4418      	add	r0, r3
 800a678:	f010 001f 	ands.w	r0, r0, #31
 800a67c:	f000 8086 	beq.w	800a78c <_dtoa_r+0x91c>
 800a680:	f1c0 0320 	rsb	r3, r0, #32
 800a684:	2b04      	cmp	r3, #4
 800a686:	dd7f      	ble.n	800a788 <_dtoa_r+0x918>
 800a688:	f1c0 001c 	rsb	r0, r0, #28
 800a68c:	9b04      	ldr	r3, [sp, #16]
 800a68e:	4403      	add	r3, r0
 800a690:	4480      	add	r8, r0
 800a692:	4405      	add	r5, r0
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	f1b8 0f00 	cmp.w	r8, #0
 800a69a:	dd05      	ble.n	800a6a8 <_dtoa_r+0x838>
 800a69c:	4659      	mov	r1, fp
 800a69e:	4642      	mov	r2, r8
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fbfd 	bl	800aea0 <__lshift>
 800a6a6:	4683      	mov	fp, r0
 800a6a8:	9b04      	ldr	r3, [sp, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	dd05      	ble.n	800a6ba <_dtoa_r+0x84a>
 800a6ae:	4631      	mov	r1, r6
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	4620      	mov	r0, r4
 800a6b4:	f000 fbf4 	bl	800aea0 <__lshift>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d069      	beq.n	800a794 <_dtoa_r+0x924>
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4658      	mov	r0, fp
 800a6c4:	f000 fc58 	bl	800af78 <__mcmp>
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	da63      	bge.n	800a794 <_dtoa_r+0x924>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4659      	mov	r1, fp
 800a6d0:	220a      	movs	r2, #10
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f000 fa34 	bl	800ab40 <__multadd>
 800a6d8:	9b08      	ldr	r3, [sp, #32]
 800a6da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a6de:	4683      	mov	fp, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	f000 818f 	beq.w	800aa04 <_dtoa_r+0xb94>
 800a6e6:	4639      	mov	r1, r7
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4620      	mov	r0, r4
 800a6ee:	f000 fa27 	bl	800ab40 <__multadd>
 800a6f2:	f1b9 0f00 	cmp.w	r9, #0
 800a6f6:	4607      	mov	r7, r0
 800a6f8:	f300 808e 	bgt.w	800a818 <_dtoa_r+0x9a8>
 800a6fc:	9b05      	ldr	r3, [sp, #20]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	dc50      	bgt.n	800a7a4 <_dtoa_r+0x934>
 800a702:	e089      	b.n	800a818 <_dtoa_r+0x9a8>
 800a704:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a70a:	e75d      	b.n	800a5c8 <_dtoa_r+0x758>
 800a70c:	9b01      	ldr	r3, [sp, #4]
 800a70e:	1e5e      	subs	r6, r3, #1
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	42b3      	cmp	r3, r6
 800a714:	bfbf      	itttt	lt
 800a716:	9b06      	ldrlt	r3, [sp, #24]
 800a718:	9606      	strlt	r6, [sp, #24]
 800a71a:	1af2      	sublt	r2, r6, r3
 800a71c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a71e:	bfb6      	itet	lt
 800a720:	189b      	addlt	r3, r3, r2
 800a722:	1b9e      	subge	r6, r3, r6
 800a724:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a726:	9b01      	ldr	r3, [sp, #4]
 800a728:	bfb8      	it	lt
 800a72a:	2600      	movlt	r6, #0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	bfb5      	itete	lt
 800a730:	eba8 0503 	sublt.w	r5, r8, r3
 800a734:	9b01      	ldrge	r3, [sp, #4]
 800a736:	2300      	movlt	r3, #0
 800a738:	4645      	movge	r5, r8
 800a73a:	e747      	b.n	800a5cc <_dtoa_r+0x75c>
 800a73c:	9e06      	ldr	r6, [sp, #24]
 800a73e:	9f08      	ldr	r7, [sp, #32]
 800a740:	4645      	mov	r5, r8
 800a742:	e74c      	b.n	800a5de <_dtoa_r+0x76e>
 800a744:	9a06      	ldr	r2, [sp, #24]
 800a746:	e775      	b.n	800a634 <_dtoa_r+0x7c4>
 800a748:	9b05      	ldr	r3, [sp, #20]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	dc18      	bgt.n	800a780 <_dtoa_r+0x910>
 800a74e:	9b02      	ldr	r3, [sp, #8]
 800a750:	b9b3      	cbnz	r3, 800a780 <_dtoa_r+0x910>
 800a752:	9b03      	ldr	r3, [sp, #12]
 800a754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a758:	b9a3      	cbnz	r3, 800a784 <_dtoa_r+0x914>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a760:	0d1b      	lsrs	r3, r3, #20
 800a762:	051b      	lsls	r3, r3, #20
 800a764:	b12b      	cbz	r3, 800a772 <_dtoa_r+0x902>
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	3301      	adds	r3, #1
 800a76a:	9304      	str	r3, [sp, #16]
 800a76c:	f108 0801 	add.w	r8, r8, #1
 800a770:	2301      	movs	r3, #1
 800a772:	9306      	str	r3, [sp, #24]
 800a774:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a776:	2b00      	cmp	r3, #0
 800a778:	f47f af74 	bne.w	800a664 <_dtoa_r+0x7f4>
 800a77c:	2001      	movs	r0, #1
 800a77e:	e779      	b.n	800a674 <_dtoa_r+0x804>
 800a780:	2300      	movs	r3, #0
 800a782:	e7f6      	b.n	800a772 <_dtoa_r+0x902>
 800a784:	9b02      	ldr	r3, [sp, #8]
 800a786:	e7f4      	b.n	800a772 <_dtoa_r+0x902>
 800a788:	d085      	beq.n	800a696 <_dtoa_r+0x826>
 800a78a:	4618      	mov	r0, r3
 800a78c:	301c      	adds	r0, #28
 800a78e:	e77d      	b.n	800a68c <_dtoa_r+0x81c>
 800a790:	40240000 	.word	0x40240000
 800a794:	9b01      	ldr	r3, [sp, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	dc38      	bgt.n	800a80c <_dtoa_r+0x99c>
 800a79a:	9b05      	ldr	r3, [sp, #20]
 800a79c:	2b02      	cmp	r3, #2
 800a79e:	dd35      	ble.n	800a80c <_dtoa_r+0x99c>
 800a7a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a7a4:	f1b9 0f00 	cmp.w	r9, #0
 800a7a8:	d10d      	bne.n	800a7c6 <_dtoa_r+0x956>
 800a7aa:	4631      	mov	r1, r6
 800a7ac:	464b      	mov	r3, r9
 800a7ae:	2205      	movs	r2, #5
 800a7b0:	4620      	mov	r0, r4
 800a7b2:	f000 f9c5 	bl	800ab40 <__multadd>
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4606      	mov	r6, r0
 800a7ba:	4658      	mov	r0, fp
 800a7bc:	f000 fbdc 	bl	800af78 <__mcmp>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f73f adbd 	bgt.w	800a340 <_dtoa_r+0x4d0>
 800a7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7c8:	9d00      	ldr	r5, [sp, #0]
 800a7ca:	ea6f 0a03 	mvn.w	sl, r3
 800a7ce:	f04f 0800 	mov.w	r8, #0
 800a7d2:	4631      	mov	r1, r6
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f000 f991 	bl	800aafc <_Bfree>
 800a7da:	2f00      	cmp	r7, #0
 800a7dc:	f43f aeb4 	beq.w	800a548 <_dtoa_r+0x6d8>
 800a7e0:	f1b8 0f00 	cmp.w	r8, #0
 800a7e4:	d005      	beq.n	800a7f2 <_dtoa_r+0x982>
 800a7e6:	45b8      	cmp	r8, r7
 800a7e8:	d003      	beq.n	800a7f2 <_dtoa_r+0x982>
 800a7ea:	4641      	mov	r1, r8
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 f985 	bl	800aafc <_Bfree>
 800a7f2:	4639      	mov	r1, r7
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 f981 	bl	800aafc <_Bfree>
 800a7fa:	e6a5      	b.n	800a548 <_dtoa_r+0x6d8>
 800a7fc:	2600      	movs	r6, #0
 800a7fe:	4637      	mov	r7, r6
 800a800:	e7e1      	b.n	800a7c6 <_dtoa_r+0x956>
 800a802:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a804:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a808:	4637      	mov	r7, r6
 800a80a:	e599      	b.n	800a340 <_dtoa_r+0x4d0>
 800a80c:	9b08      	ldr	r3, [sp, #32]
 800a80e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f000 80fd 	beq.w	800aa12 <_dtoa_r+0xba2>
 800a818:	2d00      	cmp	r5, #0
 800a81a:	dd05      	ble.n	800a828 <_dtoa_r+0x9b8>
 800a81c:	4639      	mov	r1, r7
 800a81e:	462a      	mov	r2, r5
 800a820:	4620      	mov	r0, r4
 800a822:	f000 fb3d 	bl	800aea0 <__lshift>
 800a826:	4607      	mov	r7, r0
 800a828:	9b06      	ldr	r3, [sp, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d05c      	beq.n	800a8e8 <_dtoa_r+0xa78>
 800a82e:	6879      	ldr	r1, [r7, #4]
 800a830:	4620      	mov	r0, r4
 800a832:	f000 f923 	bl	800aa7c <_Balloc>
 800a836:	4605      	mov	r5, r0
 800a838:	b928      	cbnz	r0, 800a846 <_dtoa_r+0x9d6>
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <_dtoa_r+0xbcc>)
 800a83c:	4602      	mov	r2, r0
 800a83e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a842:	f7ff bb2e 	b.w	8009ea2 <_dtoa_r+0x32>
 800a846:	693a      	ldr	r2, [r7, #16]
 800a848:	3202      	adds	r2, #2
 800a84a:	0092      	lsls	r2, r2, #2
 800a84c:	f107 010c 	add.w	r1, r7, #12
 800a850:	300c      	adds	r0, #12
 800a852:	f000 f905 	bl	800aa60 <memcpy>
 800a856:	2201      	movs	r2, #1
 800a858:	4629      	mov	r1, r5
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fb20 	bl	800aea0 <__lshift>
 800a860:	9b00      	ldr	r3, [sp, #0]
 800a862:	3301      	adds	r3, #1
 800a864:	9301      	str	r3, [sp, #4]
 800a866:	9b00      	ldr	r3, [sp, #0]
 800a868:	444b      	add	r3, r9
 800a86a:	9307      	str	r3, [sp, #28]
 800a86c:	9b02      	ldr	r3, [sp, #8]
 800a86e:	f003 0301 	and.w	r3, r3, #1
 800a872:	46b8      	mov	r8, r7
 800a874:	9306      	str	r3, [sp, #24]
 800a876:	4607      	mov	r7, r0
 800a878:	9b01      	ldr	r3, [sp, #4]
 800a87a:	4631      	mov	r1, r6
 800a87c:	3b01      	subs	r3, #1
 800a87e:	4658      	mov	r0, fp
 800a880:	9302      	str	r3, [sp, #8]
 800a882:	f7ff fa67 	bl	8009d54 <quorem>
 800a886:	4603      	mov	r3, r0
 800a888:	3330      	adds	r3, #48	; 0x30
 800a88a:	9004      	str	r0, [sp, #16]
 800a88c:	4641      	mov	r1, r8
 800a88e:	4658      	mov	r0, fp
 800a890:	9308      	str	r3, [sp, #32]
 800a892:	f000 fb71 	bl	800af78 <__mcmp>
 800a896:	463a      	mov	r2, r7
 800a898:	4681      	mov	r9, r0
 800a89a:	4631      	mov	r1, r6
 800a89c:	4620      	mov	r0, r4
 800a89e:	f000 fb87 	bl	800afb0 <__mdiff>
 800a8a2:	68c2      	ldr	r2, [r0, #12]
 800a8a4:	9b08      	ldr	r3, [sp, #32]
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	bb02      	cbnz	r2, 800a8ec <_dtoa_r+0xa7c>
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	4658      	mov	r0, fp
 800a8ae:	f000 fb63 	bl	800af78 <__mcmp>
 800a8b2:	9b08      	ldr	r3, [sp, #32]
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	4629      	mov	r1, r5
 800a8b8:	4620      	mov	r0, r4
 800a8ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a8be:	f000 f91d 	bl	800aafc <_Bfree>
 800a8c2:	9b05      	ldr	r3, [sp, #20]
 800a8c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8c6:	9d01      	ldr	r5, [sp, #4]
 800a8c8:	ea43 0102 	orr.w	r1, r3, r2
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	9b08      	ldr	r3, [sp, #32]
 800a8d2:	d10d      	bne.n	800a8f0 <_dtoa_r+0xa80>
 800a8d4:	2b39      	cmp	r3, #57	; 0x39
 800a8d6:	d029      	beq.n	800a92c <_dtoa_r+0xabc>
 800a8d8:	f1b9 0f00 	cmp.w	r9, #0
 800a8dc:	dd01      	ble.n	800a8e2 <_dtoa_r+0xa72>
 800a8de:	9b04      	ldr	r3, [sp, #16]
 800a8e0:	3331      	adds	r3, #49	; 0x31
 800a8e2:	9a02      	ldr	r2, [sp, #8]
 800a8e4:	7013      	strb	r3, [r2, #0]
 800a8e6:	e774      	b.n	800a7d2 <_dtoa_r+0x962>
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	e7b9      	b.n	800a860 <_dtoa_r+0x9f0>
 800a8ec:	2201      	movs	r2, #1
 800a8ee:	e7e2      	b.n	800a8b6 <_dtoa_r+0xa46>
 800a8f0:	f1b9 0f00 	cmp.w	r9, #0
 800a8f4:	db06      	blt.n	800a904 <_dtoa_r+0xa94>
 800a8f6:	9905      	ldr	r1, [sp, #20]
 800a8f8:	ea41 0909 	orr.w	r9, r1, r9
 800a8fc:	9906      	ldr	r1, [sp, #24]
 800a8fe:	ea59 0101 	orrs.w	r1, r9, r1
 800a902:	d120      	bne.n	800a946 <_dtoa_r+0xad6>
 800a904:	2a00      	cmp	r2, #0
 800a906:	ddec      	ble.n	800a8e2 <_dtoa_r+0xa72>
 800a908:	4659      	mov	r1, fp
 800a90a:	2201      	movs	r2, #1
 800a90c:	4620      	mov	r0, r4
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	f000 fac6 	bl	800aea0 <__lshift>
 800a914:	4631      	mov	r1, r6
 800a916:	4683      	mov	fp, r0
 800a918:	f000 fb2e 	bl	800af78 <__mcmp>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	9b01      	ldr	r3, [sp, #4]
 800a920:	dc02      	bgt.n	800a928 <_dtoa_r+0xab8>
 800a922:	d1de      	bne.n	800a8e2 <_dtoa_r+0xa72>
 800a924:	07da      	lsls	r2, r3, #31
 800a926:	d5dc      	bpl.n	800a8e2 <_dtoa_r+0xa72>
 800a928:	2b39      	cmp	r3, #57	; 0x39
 800a92a:	d1d8      	bne.n	800a8de <_dtoa_r+0xa6e>
 800a92c:	9a02      	ldr	r2, [sp, #8]
 800a92e:	2339      	movs	r3, #57	; 0x39
 800a930:	7013      	strb	r3, [r2, #0]
 800a932:	462b      	mov	r3, r5
 800a934:	461d      	mov	r5, r3
 800a936:	3b01      	subs	r3, #1
 800a938:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a93c:	2a39      	cmp	r2, #57	; 0x39
 800a93e:	d050      	beq.n	800a9e2 <_dtoa_r+0xb72>
 800a940:	3201      	adds	r2, #1
 800a942:	701a      	strb	r2, [r3, #0]
 800a944:	e745      	b.n	800a7d2 <_dtoa_r+0x962>
 800a946:	2a00      	cmp	r2, #0
 800a948:	dd03      	ble.n	800a952 <_dtoa_r+0xae2>
 800a94a:	2b39      	cmp	r3, #57	; 0x39
 800a94c:	d0ee      	beq.n	800a92c <_dtoa_r+0xabc>
 800a94e:	3301      	adds	r3, #1
 800a950:	e7c7      	b.n	800a8e2 <_dtoa_r+0xa72>
 800a952:	9a01      	ldr	r2, [sp, #4]
 800a954:	9907      	ldr	r1, [sp, #28]
 800a956:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a95a:	428a      	cmp	r2, r1
 800a95c:	d02a      	beq.n	800a9b4 <_dtoa_r+0xb44>
 800a95e:	4659      	mov	r1, fp
 800a960:	2300      	movs	r3, #0
 800a962:	220a      	movs	r2, #10
 800a964:	4620      	mov	r0, r4
 800a966:	f000 f8eb 	bl	800ab40 <__multadd>
 800a96a:	45b8      	cmp	r8, r7
 800a96c:	4683      	mov	fp, r0
 800a96e:	f04f 0300 	mov.w	r3, #0
 800a972:	f04f 020a 	mov.w	r2, #10
 800a976:	4641      	mov	r1, r8
 800a978:	4620      	mov	r0, r4
 800a97a:	d107      	bne.n	800a98c <_dtoa_r+0xb1c>
 800a97c:	f000 f8e0 	bl	800ab40 <__multadd>
 800a980:	4680      	mov	r8, r0
 800a982:	4607      	mov	r7, r0
 800a984:	9b01      	ldr	r3, [sp, #4]
 800a986:	3301      	adds	r3, #1
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	e775      	b.n	800a878 <_dtoa_r+0xa08>
 800a98c:	f000 f8d8 	bl	800ab40 <__multadd>
 800a990:	4639      	mov	r1, r7
 800a992:	4680      	mov	r8, r0
 800a994:	2300      	movs	r3, #0
 800a996:	220a      	movs	r2, #10
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 f8d1 	bl	800ab40 <__multadd>
 800a99e:	4607      	mov	r7, r0
 800a9a0:	e7f0      	b.n	800a984 <_dtoa_r+0xb14>
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	9a00      	ldr	r2, [sp, #0]
 800a9a8:	bfcc      	ite	gt
 800a9aa:	464d      	movgt	r5, r9
 800a9ac:	2501      	movle	r5, #1
 800a9ae:	4415      	add	r5, r2
 800a9b0:	f04f 0800 	mov.w	r8, #0
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	9301      	str	r3, [sp, #4]
 800a9bc:	f000 fa70 	bl	800aea0 <__lshift>
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4683      	mov	fp, r0
 800a9c4:	f000 fad8 	bl	800af78 <__mcmp>
 800a9c8:	2800      	cmp	r0, #0
 800a9ca:	dcb2      	bgt.n	800a932 <_dtoa_r+0xac2>
 800a9cc:	d102      	bne.n	800a9d4 <_dtoa_r+0xb64>
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	07db      	lsls	r3, r3, #31
 800a9d2:	d4ae      	bmi.n	800a932 <_dtoa_r+0xac2>
 800a9d4:	462b      	mov	r3, r5
 800a9d6:	461d      	mov	r5, r3
 800a9d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9dc:	2a30      	cmp	r2, #48	; 0x30
 800a9de:	d0fa      	beq.n	800a9d6 <_dtoa_r+0xb66>
 800a9e0:	e6f7      	b.n	800a7d2 <_dtoa_r+0x962>
 800a9e2:	9a00      	ldr	r2, [sp, #0]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d1a5      	bne.n	800a934 <_dtoa_r+0xac4>
 800a9e8:	f10a 0a01 	add.w	sl, sl, #1
 800a9ec:	2331      	movs	r3, #49	; 0x31
 800a9ee:	e779      	b.n	800a8e4 <_dtoa_r+0xa74>
 800a9f0:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <_dtoa_r+0xbd0>)
 800a9f2:	f7ff baaf 	b.w	8009f54 <_dtoa_r+0xe4>
 800a9f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f47f aa86 	bne.w	8009f0a <_dtoa_r+0x9a>
 800a9fe:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <_dtoa_r+0xbd4>)
 800aa00:	f7ff baa8 	b.w	8009f54 <_dtoa_r+0xe4>
 800aa04:	f1b9 0f00 	cmp.w	r9, #0
 800aa08:	dc03      	bgt.n	800aa12 <_dtoa_r+0xba2>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	2b02      	cmp	r3, #2
 800aa0e:	f73f aec9 	bgt.w	800a7a4 <_dtoa_r+0x934>
 800aa12:	9d00      	ldr	r5, [sp, #0]
 800aa14:	4631      	mov	r1, r6
 800aa16:	4658      	mov	r0, fp
 800aa18:	f7ff f99c 	bl	8009d54 <quorem>
 800aa1c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800aa20:	f805 3b01 	strb.w	r3, [r5], #1
 800aa24:	9a00      	ldr	r2, [sp, #0]
 800aa26:	1aaa      	subs	r2, r5, r2
 800aa28:	4591      	cmp	r9, r2
 800aa2a:	ddba      	ble.n	800a9a2 <_dtoa_r+0xb32>
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	2300      	movs	r3, #0
 800aa30:	220a      	movs	r2, #10
 800aa32:	4620      	mov	r0, r4
 800aa34:	f000 f884 	bl	800ab40 <__multadd>
 800aa38:	4683      	mov	fp, r0
 800aa3a:	e7eb      	b.n	800aa14 <_dtoa_r+0xba4>
 800aa3c:	0801fc17 	.word	0x0801fc17
 800aa40:	0801fb70 	.word	0x0801fb70
 800aa44:	0801fb94 	.word	0x0801fb94

0800aa48 <_localeconv_r>:
 800aa48:	4800      	ldr	r0, [pc, #0]	; (800aa4c <_localeconv_r+0x4>)
 800aa4a:	4770      	bx	lr
 800aa4c:	20000164 	.word	0x20000164

0800aa50 <malloc>:
 800aa50:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <malloc+0xc>)
 800aa52:	4601      	mov	r1, r0
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f000 bbef 	b.w	800b238 <_malloc_r>
 800aa5a:	bf00      	nop
 800aa5c:	20000010 	.word	0x20000010

0800aa60 <memcpy>:
 800aa60:	440a      	add	r2, r1
 800aa62:	4291      	cmp	r1, r2
 800aa64:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa68:	d100      	bne.n	800aa6c <memcpy+0xc>
 800aa6a:	4770      	bx	lr
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa76:	4291      	cmp	r1, r2
 800aa78:	d1f9      	bne.n	800aa6e <memcpy+0xe>
 800aa7a:	bd10      	pop	{r4, pc}

0800aa7c <_Balloc>:
 800aa7c:	b570      	push	{r4, r5, r6, lr}
 800aa7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa80:	4604      	mov	r4, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	b976      	cbnz	r6, 800aaa4 <_Balloc+0x28>
 800aa86:	2010      	movs	r0, #16
 800aa88:	f7ff ffe2 	bl	800aa50 <malloc>
 800aa8c:	4602      	mov	r2, r0
 800aa8e:	6260      	str	r0, [r4, #36]	; 0x24
 800aa90:	b920      	cbnz	r0, 800aa9c <_Balloc+0x20>
 800aa92:	4b18      	ldr	r3, [pc, #96]	; (800aaf4 <_Balloc+0x78>)
 800aa94:	4818      	ldr	r0, [pc, #96]	; (800aaf8 <_Balloc+0x7c>)
 800aa96:	2166      	movs	r1, #102	; 0x66
 800aa98:	f000 fd94 	bl	800b5c4 <__assert_func>
 800aa9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aaa0:	6006      	str	r6, [r0, #0]
 800aaa2:	60c6      	str	r6, [r0, #12]
 800aaa4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aaa6:	68f3      	ldr	r3, [r6, #12]
 800aaa8:	b183      	cbz	r3, 800aacc <_Balloc+0x50>
 800aaaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aab2:	b9b8      	cbnz	r0, 800aae4 <_Balloc+0x68>
 800aab4:	2101      	movs	r1, #1
 800aab6:	fa01 f605 	lsl.w	r6, r1, r5
 800aaba:	1d72      	adds	r2, r6, #5
 800aabc:	0092      	lsls	r2, r2, #2
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 fb5a 	bl	800b178 <_calloc_r>
 800aac4:	b160      	cbz	r0, 800aae0 <_Balloc+0x64>
 800aac6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aaca:	e00e      	b.n	800aaea <_Balloc+0x6e>
 800aacc:	2221      	movs	r2, #33	; 0x21
 800aace:	2104      	movs	r1, #4
 800aad0:	4620      	mov	r0, r4
 800aad2:	f000 fb51 	bl	800b178 <_calloc_r>
 800aad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aad8:	60f0      	str	r0, [r6, #12]
 800aada:	68db      	ldr	r3, [r3, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1e4      	bne.n	800aaaa <_Balloc+0x2e>
 800aae0:	2000      	movs	r0, #0
 800aae2:	bd70      	pop	{r4, r5, r6, pc}
 800aae4:	6802      	ldr	r2, [r0, #0]
 800aae6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aaea:	2300      	movs	r3, #0
 800aaec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aaf0:	e7f7      	b.n	800aae2 <_Balloc+0x66>
 800aaf2:	bf00      	nop
 800aaf4:	0801fba1 	.word	0x0801fba1
 800aaf8:	0801fc28 	.word	0x0801fc28

0800aafc <_Bfree>:
 800aafc:	b570      	push	{r4, r5, r6, lr}
 800aafe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab00:	4605      	mov	r5, r0
 800ab02:	460c      	mov	r4, r1
 800ab04:	b976      	cbnz	r6, 800ab24 <_Bfree+0x28>
 800ab06:	2010      	movs	r0, #16
 800ab08:	f7ff ffa2 	bl	800aa50 <malloc>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	6268      	str	r0, [r5, #36]	; 0x24
 800ab10:	b920      	cbnz	r0, 800ab1c <_Bfree+0x20>
 800ab12:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <_Bfree+0x3c>)
 800ab14:	4809      	ldr	r0, [pc, #36]	; (800ab3c <_Bfree+0x40>)
 800ab16:	218a      	movs	r1, #138	; 0x8a
 800ab18:	f000 fd54 	bl	800b5c4 <__assert_func>
 800ab1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab20:	6006      	str	r6, [r0, #0]
 800ab22:	60c6      	str	r6, [r0, #12]
 800ab24:	b13c      	cbz	r4, 800ab36 <_Bfree+0x3a>
 800ab26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ab28:	6862      	ldr	r2, [r4, #4]
 800ab2a:	68db      	ldr	r3, [r3, #12]
 800ab2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab30:	6021      	str	r1, [r4, #0]
 800ab32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab36:	bd70      	pop	{r4, r5, r6, pc}
 800ab38:	0801fba1 	.word	0x0801fba1
 800ab3c:	0801fc28 	.word	0x0801fc28

0800ab40 <__multadd>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	690e      	ldr	r6, [r1, #16]
 800ab46:	4607      	mov	r7, r0
 800ab48:	4698      	mov	r8, r3
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	f101 0014 	add.w	r0, r1, #20
 800ab50:	2300      	movs	r3, #0
 800ab52:	6805      	ldr	r5, [r0, #0]
 800ab54:	b2a9      	uxth	r1, r5
 800ab56:	fb02 8101 	mla	r1, r2, r1, r8
 800ab5a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ab5e:	0c2d      	lsrs	r5, r5, #16
 800ab60:	fb02 c505 	mla	r5, r2, r5, ip
 800ab64:	b289      	uxth	r1, r1
 800ab66:	3301      	adds	r3, #1
 800ab68:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ab6c:	429e      	cmp	r6, r3
 800ab6e:	f840 1b04 	str.w	r1, [r0], #4
 800ab72:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ab76:	dcec      	bgt.n	800ab52 <__multadd+0x12>
 800ab78:	f1b8 0f00 	cmp.w	r8, #0
 800ab7c:	d022      	beq.n	800abc4 <__multadd+0x84>
 800ab7e:	68a3      	ldr	r3, [r4, #8]
 800ab80:	42b3      	cmp	r3, r6
 800ab82:	dc19      	bgt.n	800abb8 <__multadd+0x78>
 800ab84:	6861      	ldr	r1, [r4, #4]
 800ab86:	4638      	mov	r0, r7
 800ab88:	3101      	adds	r1, #1
 800ab8a:	f7ff ff77 	bl	800aa7c <_Balloc>
 800ab8e:	4605      	mov	r5, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <__multadd+0x5e>
 800ab92:	4602      	mov	r2, r0
 800ab94:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <__multadd+0x8c>)
 800ab96:	480e      	ldr	r0, [pc, #56]	; (800abd0 <__multadd+0x90>)
 800ab98:	21b5      	movs	r1, #181	; 0xb5
 800ab9a:	f000 fd13 	bl	800b5c4 <__assert_func>
 800ab9e:	6922      	ldr	r2, [r4, #16]
 800aba0:	3202      	adds	r2, #2
 800aba2:	f104 010c 	add.w	r1, r4, #12
 800aba6:	0092      	lsls	r2, r2, #2
 800aba8:	300c      	adds	r0, #12
 800abaa:	f7ff ff59 	bl	800aa60 <memcpy>
 800abae:	4621      	mov	r1, r4
 800abb0:	4638      	mov	r0, r7
 800abb2:	f7ff ffa3 	bl	800aafc <_Bfree>
 800abb6:	462c      	mov	r4, r5
 800abb8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800abbc:	3601      	adds	r6, #1
 800abbe:	f8c3 8014 	str.w	r8, [r3, #20]
 800abc2:	6126      	str	r6, [r4, #16]
 800abc4:	4620      	mov	r0, r4
 800abc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abca:	bf00      	nop
 800abcc:	0801fc17 	.word	0x0801fc17
 800abd0:	0801fc28 	.word	0x0801fc28

0800abd4 <__hi0bits>:
 800abd4:	0c03      	lsrs	r3, r0, #16
 800abd6:	041b      	lsls	r3, r3, #16
 800abd8:	b9d3      	cbnz	r3, 800ac10 <__hi0bits+0x3c>
 800abda:	0400      	lsls	r0, r0, #16
 800abdc:	2310      	movs	r3, #16
 800abde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800abe2:	bf04      	itt	eq
 800abe4:	0200      	lsleq	r0, r0, #8
 800abe6:	3308      	addeq	r3, #8
 800abe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800abec:	bf04      	itt	eq
 800abee:	0100      	lsleq	r0, r0, #4
 800abf0:	3304      	addeq	r3, #4
 800abf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abf6:	bf04      	itt	eq
 800abf8:	0080      	lsleq	r0, r0, #2
 800abfa:	3302      	addeq	r3, #2
 800abfc:	2800      	cmp	r0, #0
 800abfe:	db05      	blt.n	800ac0c <__hi0bits+0x38>
 800ac00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ac04:	f103 0301 	add.w	r3, r3, #1
 800ac08:	bf08      	it	eq
 800ac0a:	2320      	moveq	r3, #32
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	4770      	bx	lr
 800ac10:	2300      	movs	r3, #0
 800ac12:	e7e4      	b.n	800abde <__hi0bits+0xa>

0800ac14 <__lo0bits>:
 800ac14:	6803      	ldr	r3, [r0, #0]
 800ac16:	f013 0207 	ands.w	r2, r3, #7
 800ac1a:	4601      	mov	r1, r0
 800ac1c:	d00b      	beq.n	800ac36 <__lo0bits+0x22>
 800ac1e:	07da      	lsls	r2, r3, #31
 800ac20:	d424      	bmi.n	800ac6c <__lo0bits+0x58>
 800ac22:	0798      	lsls	r0, r3, #30
 800ac24:	bf49      	itett	mi
 800ac26:	085b      	lsrmi	r3, r3, #1
 800ac28:	089b      	lsrpl	r3, r3, #2
 800ac2a:	2001      	movmi	r0, #1
 800ac2c:	600b      	strmi	r3, [r1, #0]
 800ac2e:	bf5c      	itt	pl
 800ac30:	600b      	strpl	r3, [r1, #0]
 800ac32:	2002      	movpl	r0, #2
 800ac34:	4770      	bx	lr
 800ac36:	b298      	uxth	r0, r3
 800ac38:	b9b0      	cbnz	r0, 800ac68 <__lo0bits+0x54>
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	2010      	movs	r0, #16
 800ac3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ac42:	bf04      	itt	eq
 800ac44:	0a1b      	lsreq	r3, r3, #8
 800ac46:	3008      	addeq	r0, #8
 800ac48:	071a      	lsls	r2, r3, #28
 800ac4a:	bf04      	itt	eq
 800ac4c:	091b      	lsreq	r3, r3, #4
 800ac4e:	3004      	addeq	r0, #4
 800ac50:	079a      	lsls	r2, r3, #30
 800ac52:	bf04      	itt	eq
 800ac54:	089b      	lsreq	r3, r3, #2
 800ac56:	3002      	addeq	r0, #2
 800ac58:	07da      	lsls	r2, r3, #31
 800ac5a:	d403      	bmi.n	800ac64 <__lo0bits+0x50>
 800ac5c:	085b      	lsrs	r3, r3, #1
 800ac5e:	f100 0001 	add.w	r0, r0, #1
 800ac62:	d005      	beq.n	800ac70 <__lo0bits+0x5c>
 800ac64:	600b      	str	r3, [r1, #0]
 800ac66:	4770      	bx	lr
 800ac68:	4610      	mov	r0, r2
 800ac6a:	e7e8      	b.n	800ac3e <__lo0bits+0x2a>
 800ac6c:	2000      	movs	r0, #0
 800ac6e:	4770      	bx	lr
 800ac70:	2020      	movs	r0, #32
 800ac72:	4770      	bx	lr

0800ac74 <__i2b>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	2101      	movs	r1, #1
 800ac7a:	f7ff feff 	bl	800aa7c <_Balloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <__i2b+0x1a>
 800ac82:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <__i2b+0x24>)
 800ac84:	4805      	ldr	r0, [pc, #20]	; (800ac9c <__i2b+0x28>)
 800ac86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac8a:	f000 fc9b 	bl	800b5c4 <__assert_func>
 800ac8e:	2301      	movs	r3, #1
 800ac90:	6144      	str	r4, [r0, #20]
 800ac92:	6103      	str	r3, [r0, #16]
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	bf00      	nop
 800ac98:	0801fc17 	.word	0x0801fc17
 800ac9c:	0801fc28 	.word	0x0801fc28

0800aca0 <__multiply>:
 800aca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	4614      	mov	r4, r2
 800aca6:	690a      	ldr	r2, [r1, #16]
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	429a      	cmp	r2, r3
 800acac:	bfb8      	it	lt
 800acae:	460b      	movlt	r3, r1
 800acb0:	460d      	mov	r5, r1
 800acb2:	bfbc      	itt	lt
 800acb4:	4625      	movlt	r5, r4
 800acb6:	461c      	movlt	r4, r3
 800acb8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800acbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800acc0:	68ab      	ldr	r3, [r5, #8]
 800acc2:	6869      	ldr	r1, [r5, #4]
 800acc4:	eb0a 0709 	add.w	r7, sl, r9
 800acc8:	42bb      	cmp	r3, r7
 800acca:	b085      	sub	sp, #20
 800accc:	bfb8      	it	lt
 800acce:	3101      	addlt	r1, #1
 800acd0:	f7ff fed4 	bl	800aa7c <_Balloc>
 800acd4:	b930      	cbnz	r0, 800ace4 <__multiply+0x44>
 800acd6:	4602      	mov	r2, r0
 800acd8:	4b42      	ldr	r3, [pc, #264]	; (800ade4 <__multiply+0x144>)
 800acda:	4843      	ldr	r0, [pc, #268]	; (800ade8 <__multiply+0x148>)
 800acdc:	f240 115d 	movw	r1, #349	; 0x15d
 800ace0:	f000 fc70 	bl	800b5c4 <__assert_func>
 800ace4:	f100 0614 	add.w	r6, r0, #20
 800ace8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800acec:	4633      	mov	r3, r6
 800acee:	2200      	movs	r2, #0
 800acf0:	4543      	cmp	r3, r8
 800acf2:	d31e      	bcc.n	800ad32 <__multiply+0x92>
 800acf4:	f105 0c14 	add.w	ip, r5, #20
 800acf8:	f104 0314 	add.w	r3, r4, #20
 800acfc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ad00:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ad04:	9202      	str	r2, [sp, #8]
 800ad06:	ebac 0205 	sub.w	r2, ip, r5
 800ad0a:	3a15      	subs	r2, #21
 800ad0c:	f022 0203 	bic.w	r2, r2, #3
 800ad10:	3204      	adds	r2, #4
 800ad12:	f105 0115 	add.w	r1, r5, #21
 800ad16:	458c      	cmp	ip, r1
 800ad18:	bf38      	it	cc
 800ad1a:	2204      	movcc	r2, #4
 800ad1c:	9201      	str	r2, [sp, #4]
 800ad1e:	9a02      	ldr	r2, [sp, #8]
 800ad20:	9303      	str	r3, [sp, #12]
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d808      	bhi.n	800ad38 <__multiply+0x98>
 800ad26:	2f00      	cmp	r7, #0
 800ad28:	dc55      	bgt.n	800add6 <__multiply+0x136>
 800ad2a:	6107      	str	r7, [r0, #16]
 800ad2c:	b005      	add	sp, #20
 800ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad32:	f843 2b04 	str.w	r2, [r3], #4
 800ad36:	e7db      	b.n	800acf0 <__multiply+0x50>
 800ad38:	f8b3 a000 	ldrh.w	sl, [r3]
 800ad3c:	f1ba 0f00 	cmp.w	sl, #0
 800ad40:	d020      	beq.n	800ad84 <__multiply+0xe4>
 800ad42:	f105 0e14 	add.w	lr, r5, #20
 800ad46:	46b1      	mov	r9, r6
 800ad48:	2200      	movs	r2, #0
 800ad4a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ad4e:	f8d9 b000 	ldr.w	fp, [r9]
 800ad52:	b2a1      	uxth	r1, r4
 800ad54:	fa1f fb8b 	uxth.w	fp, fp
 800ad58:	fb0a b101 	mla	r1, sl, r1, fp
 800ad5c:	4411      	add	r1, r2
 800ad5e:	f8d9 2000 	ldr.w	r2, [r9]
 800ad62:	0c24      	lsrs	r4, r4, #16
 800ad64:	0c12      	lsrs	r2, r2, #16
 800ad66:	fb0a 2404 	mla	r4, sl, r4, r2
 800ad6a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ad6e:	b289      	uxth	r1, r1
 800ad70:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ad74:	45f4      	cmp	ip, lr
 800ad76:	f849 1b04 	str.w	r1, [r9], #4
 800ad7a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ad7e:	d8e4      	bhi.n	800ad4a <__multiply+0xaa>
 800ad80:	9901      	ldr	r1, [sp, #4]
 800ad82:	5072      	str	r2, [r6, r1]
 800ad84:	9a03      	ldr	r2, [sp, #12]
 800ad86:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad8a:	3304      	adds	r3, #4
 800ad8c:	f1b9 0f00 	cmp.w	r9, #0
 800ad90:	d01f      	beq.n	800add2 <__multiply+0x132>
 800ad92:	6834      	ldr	r4, [r6, #0]
 800ad94:	f105 0114 	add.w	r1, r5, #20
 800ad98:	46b6      	mov	lr, r6
 800ad9a:	f04f 0a00 	mov.w	sl, #0
 800ad9e:	880a      	ldrh	r2, [r1, #0]
 800ada0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ada4:	fb09 b202 	mla	r2, r9, r2, fp
 800ada8:	4492      	add	sl, r2
 800adaa:	b2a4      	uxth	r4, r4
 800adac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800adb0:	f84e 4b04 	str.w	r4, [lr], #4
 800adb4:	f851 4b04 	ldr.w	r4, [r1], #4
 800adb8:	f8be 2000 	ldrh.w	r2, [lr]
 800adbc:	0c24      	lsrs	r4, r4, #16
 800adbe:	fb09 2404 	mla	r4, r9, r4, r2
 800adc2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800adc6:	458c      	cmp	ip, r1
 800adc8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800adcc:	d8e7      	bhi.n	800ad9e <__multiply+0xfe>
 800adce:	9a01      	ldr	r2, [sp, #4]
 800add0:	50b4      	str	r4, [r6, r2]
 800add2:	3604      	adds	r6, #4
 800add4:	e7a3      	b.n	800ad1e <__multiply+0x7e>
 800add6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1a5      	bne.n	800ad2a <__multiply+0x8a>
 800adde:	3f01      	subs	r7, #1
 800ade0:	e7a1      	b.n	800ad26 <__multiply+0x86>
 800ade2:	bf00      	nop
 800ade4:	0801fc17 	.word	0x0801fc17
 800ade8:	0801fc28 	.word	0x0801fc28

0800adec <__pow5mult>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	4615      	mov	r5, r2
 800adf2:	f012 0203 	ands.w	r2, r2, #3
 800adf6:	4606      	mov	r6, r0
 800adf8:	460f      	mov	r7, r1
 800adfa:	d007      	beq.n	800ae0c <__pow5mult+0x20>
 800adfc:	4c25      	ldr	r4, [pc, #148]	; (800ae94 <__pow5mult+0xa8>)
 800adfe:	3a01      	subs	r2, #1
 800ae00:	2300      	movs	r3, #0
 800ae02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae06:	f7ff fe9b 	bl	800ab40 <__multadd>
 800ae0a:	4607      	mov	r7, r0
 800ae0c:	10ad      	asrs	r5, r5, #2
 800ae0e:	d03d      	beq.n	800ae8c <__pow5mult+0xa0>
 800ae10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ae12:	b97c      	cbnz	r4, 800ae34 <__pow5mult+0x48>
 800ae14:	2010      	movs	r0, #16
 800ae16:	f7ff fe1b 	bl	800aa50 <malloc>
 800ae1a:	4602      	mov	r2, r0
 800ae1c:	6270      	str	r0, [r6, #36]	; 0x24
 800ae1e:	b928      	cbnz	r0, 800ae2c <__pow5mult+0x40>
 800ae20:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <__pow5mult+0xac>)
 800ae22:	481e      	ldr	r0, [pc, #120]	; (800ae9c <__pow5mult+0xb0>)
 800ae24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ae28:	f000 fbcc 	bl	800b5c4 <__assert_func>
 800ae2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae30:	6004      	str	r4, [r0, #0]
 800ae32:	60c4      	str	r4, [r0, #12]
 800ae34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ae38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae3c:	b94c      	cbnz	r4, 800ae52 <__pow5mult+0x66>
 800ae3e:	f240 2171 	movw	r1, #625	; 0x271
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ff16 	bl	800ac74 <__i2b>
 800ae48:	2300      	movs	r3, #0
 800ae4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae4e:	4604      	mov	r4, r0
 800ae50:	6003      	str	r3, [r0, #0]
 800ae52:	f04f 0900 	mov.w	r9, #0
 800ae56:	07eb      	lsls	r3, r5, #31
 800ae58:	d50a      	bpl.n	800ae70 <__pow5mult+0x84>
 800ae5a:	4639      	mov	r1, r7
 800ae5c:	4622      	mov	r2, r4
 800ae5e:	4630      	mov	r0, r6
 800ae60:	f7ff ff1e 	bl	800aca0 <__multiply>
 800ae64:	4639      	mov	r1, r7
 800ae66:	4680      	mov	r8, r0
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff fe47 	bl	800aafc <_Bfree>
 800ae6e:	4647      	mov	r7, r8
 800ae70:	106d      	asrs	r5, r5, #1
 800ae72:	d00b      	beq.n	800ae8c <__pow5mult+0xa0>
 800ae74:	6820      	ldr	r0, [r4, #0]
 800ae76:	b938      	cbnz	r0, 800ae88 <__pow5mult+0x9c>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f7ff ff0f 	bl	800aca0 <__multiply>
 800ae82:	6020      	str	r0, [r4, #0]
 800ae84:	f8c0 9000 	str.w	r9, [r0]
 800ae88:	4604      	mov	r4, r0
 800ae8a:	e7e4      	b.n	800ae56 <__pow5mult+0x6a>
 800ae8c:	4638      	mov	r0, r7
 800ae8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae92:	bf00      	nop
 800ae94:	0801fd78 	.word	0x0801fd78
 800ae98:	0801fba1 	.word	0x0801fba1
 800ae9c:	0801fc28 	.word	0x0801fc28

0800aea0 <__lshift>:
 800aea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aea4:	460c      	mov	r4, r1
 800aea6:	6849      	ldr	r1, [r1, #4]
 800aea8:	6923      	ldr	r3, [r4, #16]
 800aeaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeae:	68a3      	ldr	r3, [r4, #8]
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	4691      	mov	r9, r2
 800aeb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aeb8:	f108 0601 	add.w	r6, r8, #1
 800aebc:	42b3      	cmp	r3, r6
 800aebe:	db0b      	blt.n	800aed8 <__lshift+0x38>
 800aec0:	4638      	mov	r0, r7
 800aec2:	f7ff fddb 	bl	800aa7c <_Balloc>
 800aec6:	4605      	mov	r5, r0
 800aec8:	b948      	cbnz	r0, 800aede <__lshift+0x3e>
 800aeca:	4602      	mov	r2, r0
 800aecc:	4b28      	ldr	r3, [pc, #160]	; (800af70 <__lshift+0xd0>)
 800aece:	4829      	ldr	r0, [pc, #164]	; (800af74 <__lshift+0xd4>)
 800aed0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aed4:	f000 fb76 	bl	800b5c4 <__assert_func>
 800aed8:	3101      	adds	r1, #1
 800aeda:	005b      	lsls	r3, r3, #1
 800aedc:	e7ee      	b.n	800aebc <__lshift+0x1c>
 800aede:	2300      	movs	r3, #0
 800aee0:	f100 0114 	add.w	r1, r0, #20
 800aee4:	f100 0210 	add.w	r2, r0, #16
 800aee8:	4618      	mov	r0, r3
 800aeea:	4553      	cmp	r3, sl
 800aeec:	db33      	blt.n	800af56 <__lshift+0xb6>
 800aeee:	6920      	ldr	r0, [r4, #16]
 800aef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aef4:	f104 0314 	add.w	r3, r4, #20
 800aef8:	f019 091f 	ands.w	r9, r9, #31
 800aefc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af04:	d02b      	beq.n	800af5e <__lshift+0xbe>
 800af06:	f1c9 0e20 	rsb	lr, r9, #32
 800af0a:	468a      	mov	sl, r1
 800af0c:	2200      	movs	r2, #0
 800af0e:	6818      	ldr	r0, [r3, #0]
 800af10:	fa00 f009 	lsl.w	r0, r0, r9
 800af14:	4302      	orrs	r2, r0
 800af16:	f84a 2b04 	str.w	r2, [sl], #4
 800af1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af1e:	459c      	cmp	ip, r3
 800af20:	fa22 f20e 	lsr.w	r2, r2, lr
 800af24:	d8f3      	bhi.n	800af0e <__lshift+0x6e>
 800af26:	ebac 0304 	sub.w	r3, ip, r4
 800af2a:	3b15      	subs	r3, #21
 800af2c:	f023 0303 	bic.w	r3, r3, #3
 800af30:	3304      	adds	r3, #4
 800af32:	f104 0015 	add.w	r0, r4, #21
 800af36:	4584      	cmp	ip, r0
 800af38:	bf38      	it	cc
 800af3a:	2304      	movcc	r3, #4
 800af3c:	50ca      	str	r2, [r1, r3]
 800af3e:	b10a      	cbz	r2, 800af44 <__lshift+0xa4>
 800af40:	f108 0602 	add.w	r6, r8, #2
 800af44:	3e01      	subs	r6, #1
 800af46:	4638      	mov	r0, r7
 800af48:	612e      	str	r6, [r5, #16]
 800af4a:	4621      	mov	r1, r4
 800af4c:	f7ff fdd6 	bl	800aafc <_Bfree>
 800af50:	4628      	mov	r0, r5
 800af52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af56:	f842 0f04 	str.w	r0, [r2, #4]!
 800af5a:	3301      	adds	r3, #1
 800af5c:	e7c5      	b.n	800aeea <__lshift+0x4a>
 800af5e:	3904      	subs	r1, #4
 800af60:	f853 2b04 	ldr.w	r2, [r3], #4
 800af64:	f841 2f04 	str.w	r2, [r1, #4]!
 800af68:	459c      	cmp	ip, r3
 800af6a:	d8f9      	bhi.n	800af60 <__lshift+0xc0>
 800af6c:	e7ea      	b.n	800af44 <__lshift+0xa4>
 800af6e:	bf00      	nop
 800af70:	0801fc17 	.word	0x0801fc17
 800af74:	0801fc28 	.word	0x0801fc28

0800af78 <__mcmp>:
 800af78:	b530      	push	{r4, r5, lr}
 800af7a:	6902      	ldr	r2, [r0, #16]
 800af7c:	690c      	ldr	r4, [r1, #16]
 800af7e:	1b12      	subs	r2, r2, r4
 800af80:	d10e      	bne.n	800afa0 <__mcmp+0x28>
 800af82:	f100 0314 	add.w	r3, r0, #20
 800af86:	3114      	adds	r1, #20
 800af88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af98:	42a5      	cmp	r5, r4
 800af9a:	d003      	beq.n	800afa4 <__mcmp+0x2c>
 800af9c:	d305      	bcc.n	800afaa <__mcmp+0x32>
 800af9e:	2201      	movs	r2, #1
 800afa0:	4610      	mov	r0, r2
 800afa2:	bd30      	pop	{r4, r5, pc}
 800afa4:	4283      	cmp	r3, r0
 800afa6:	d3f3      	bcc.n	800af90 <__mcmp+0x18>
 800afa8:	e7fa      	b.n	800afa0 <__mcmp+0x28>
 800afaa:	f04f 32ff 	mov.w	r2, #4294967295
 800afae:	e7f7      	b.n	800afa0 <__mcmp+0x28>

0800afb0 <__mdiff>:
 800afb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	4606      	mov	r6, r0
 800afb8:	4611      	mov	r1, r2
 800afba:	4620      	mov	r0, r4
 800afbc:	4617      	mov	r7, r2
 800afbe:	f7ff ffdb 	bl	800af78 <__mcmp>
 800afc2:	1e05      	subs	r5, r0, #0
 800afc4:	d110      	bne.n	800afe8 <__mdiff+0x38>
 800afc6:	4629      	mov	r1, r5
 800afc8:	4630      	mov	r0, r6
 800afca:	f7ff fd57 	bl	800aa7c <_Balloc>
 800afce:	b930      	cbnz	r0, 800afde <__mdiff+0x2e>
 800afd0:	4b39      	ldr	r3, [pc, #228]	; (800b0b8 <__mdiff+0x108>)
 800afd2:	4602      	mov	r2, r0
 800afd4:	f240 2132 	movw	r1, #562	; 0x232
 800afd8:	4838      	ldr	r0, [pc, #224]	; (800b0bc <__mdiff+0x10c>)
 800afda:	f000 faf3 	bl	800b5c4 <__assert_func>
 800afde:	2301      	movs	r3, #1
 800afe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afe4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe8:	bfa4      	itt	ge
 800afea:	463b      	movge	r3, r7
 800afec:	4627      	movge	r7, r4
 800afee:	4630      	mov	r0, r6
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	bfa6      	itte	ge
 800aff4:	461c      	movge	r4, r3
 800aff6:	2500      	movge	r5, #0
 800aff8:	2501      	movlt	r5, #1
 800affa:	f7ff fd3f 	bl	800aa7c <_Balloc>
 800affe:	b920      	cbnz	r0, 800b00a <__mdiff+0x5a>
 800b000:	4b2d      	ldr	r3, [pc, #180]	; (800b0b8 <__mdiff+0x108>)
 800b002:	4602      	mov	r2, r0
 800b004:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b008:	e7e6      	b.n	800afd8 <__mdiff+0x28>
 800b00a:	693e      	ldr	r6, [r7, #16]
 800b00c:	60c5      	str	r5, [r0, #12]
 800b00e:	6925      	ldr	r5, [r4, #16]
 800b010:	f107 0114 	add.w	r1, r7, #20
 800b014:	f104 0914 	add.w	r9, r4, #20
 800b018:	f100 0e14 	add.w	lr, r0, #20
 800b01c:	f107 0210 	add.w	r2, r7, #16
 800b020:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b024:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b028:	46f2      	mov	sl, lr
 800b02a:	2700      	movs	r7, #0
 800b02c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b030:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b034:	fa1f f883 	uxth.w	r8, r3
 800b038:	fa17 f78b 	uxtah	r7, r7, fp
 800b03c:	0c1b      	lsrs	r3, r3, #16
 800b03e:	eba7 0808 	sub.w	r8, r7, r8
 800b042:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b046:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b04a:	fa1f f888 	uxth.w	r8, r8
 800b04e:	141f      	asrs	r7, r3, #16
 800b050:	454d      	cmp	r5, r9
 800b052:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b056:	f84a 3b04 	str.w	r3, [sl], #4
 800b05a:	d8e7      	bhi.n	800b02c <__mdiff+0x7c>
 800b05c:	1b2b      	subs	r3, r5, r4
 800b05e:	3b15      	subs	r3, #21
 800b060:	f023 0303 	bic.w	r3, r3, #3
 800b064:	3304      	adds	r3, #4
 800b066:	3415      	adds	r4, #21
 800b068:	42a5      	cmp	r5, r4
 800b06a:	bf38      	it	cc
 800b06c:	2304      	movcc	r3, #4
 800b06e:	4419      	add	r1, r3
 800b070:	4473      	add	r3, lr
 800b072:	469e      	mov	lr, r3
 800b074:	460d      	mov	r5, r1
 800b076:	4565      	cmp	r5, ip
 800b078:	d30e      	bcc.n	800b098 <__mdiff+0xe8>
 800b07a:	f10c 0203 	add.w	r2, ip, #3
 800b07e:	1a52      	subs	r2, r2, r1
 800b080:	f022 0203 	bic.w	r2, r2, #3
 800b084:	3903      	subs	r1, #3
 800b086:	458c      	cmp	ip, r1
 800b088:	bf38      	it	cc
 800b08a:	2200      	movcc	r2, #0
 800b08c:	441a      	add	r2, r3
 800b08e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b092:	b17b      	cbz	r3, 800b0b4 <__mdiff+0x104>
 800b094:	6106      	str	r6, [r0, #16]
 800b096:	e7a5      	b.n	800afe4 <__mdiff+0x34>
 800b098:	f855 8b04 	ldr.w	r8, [r5], #4
 800b09c:	fa17 f488 	uxtah	r4, r7, r8
 800b0a0:	1422      	asrs	r2, r4, #16
 800b0a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b0a6:	b2a4      	uxth	r4, r4
 800b0a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b0ac:	f84e 4b04 	str.w	r4, [lr], #4
 800b0b0:	1417      	asrs	r7, r2, #16
 800b0b2:	e7e0      	b.n	800b076 <__mdiff+0xc6>
 800b0b4:	3e01      	subs	r6, #1
 800b0b6:	e7ea      	b.n	800b08e <__mdiff+0xde>
 800b0b8:	0801fc17 	.word	0x0801fc17
 800b0bc:	0801fc28 	.word	0x0801fc28

0800b0c0 <__d2b>:
 800b0c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b0c4:	4689      	mov	r9, r1
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	ec57 6b10 	vmov	r6, r7, d0
 800b0cc:	4690      	mov	r8, r2
 800b0ce:	f7ff fcd5 	bl	800aa7c <_Balloc>
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	b930      	cbnz	r0, 800b0e4 <__d2b+0x24>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	4b25      	ldr	r3, [pc, #148]	; (800b170 <__d2b+0xb0>)
 800b0da:	4826      	ldr	r0, [pc, #152]	; (800b174 <__d2b+0xb4>)
 800b0dc:	f240 310a 	movw	r1, #778	; 0x30a
 800b0e0:	f000 fa70 	bl	800b5c4 <__assert_func>
 800b0e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b0e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b0ec:	bb35      	cbnz	r5, 800b13c <__d2b+0x7c>
 800b0ee:	2e00      	cmp	r6, #0
 800b0f0:	9301      	str	r3, [sp, #4]
 800b0f2:	d028      	beq.n	800b146 <__d2b+0x86>
 800b0f4:	4668      	mov	r0, sp
 800b0f6:	9600      	str	r6, [sp, #0]
 800b0f8:	f7ff fd8c 	bl	800ac14 <__lo0bits>
 800b0fc:	9900      	ldr	r1, [sp, #0]
 800b0fe:	b300      	cbz	r0, 800b142 <__d2b+0x82>
 800b100:	9a01      	ldr	r2, [sp, #4]
 800b102:	f1c0 0320 	rsb	r3, r0, #32
 800b106:	fa02 f303 	lsl.w	r3, r2, r3
 800b10a:	430b      	orrs	r3, r1
 800b10c:	40c2      	lsrs	r2, r0
 800b10e:	6163      	str	r3, [r4, #20]
 800b110:	9201      	str	r2, [sp, #4]
 800b112:	9b01      	ldr	r3, [sp, #4]
 800b114:	61a3      	str	r3, [r4, #24]
 800b116:	2b00      	cmp	r3, #0
 800b118:	bf14      	ite	ne
 800b11a:	2202      	movne	r2, #2
 800b11c:	2201      	moveq	r2, #1
 800b11e:	6122      	str	r2, [r4, #16]
 800b120:	b1d5      	cbz	r5, 800b158 <__d2b+0x98>
 800b122:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b126:	4405      	add	r5, r0
 800b128:	f8c9 5000 	str.w	r5, [r9]
 800b12c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b130:	f8c8 0000 	str.w	r0, [r8]
 800b134:	4620      	mov	r0, r4
 800b136:	b003      	add	sp, #12
 800b138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b13c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b140:	e7d5      	b.n	800b0ee <__d2b+0x2e>
 800b142:	6161      	str	r1, [r4, #20]
 800b144:	e7e5      	b.n	800b112 <__d2b+0x52>
 800b146:	a801      	add	r0, sp, #4
 800b148:	f7ff fd64 	bl	800ac14 <__lo0bits>
 800b14c:	9b01      	ldr	r3, [sp, #4]
 800b14e:	6163      	str	r3, [r4, #20]
 800b150:	2201      	movs	r2, #1
 800b152:	6122      	str	r2, [r4, #16]
 800b154:	3020      	adds	r0, #32
 800b156:	e7e3      	b.n	800b120 <__d2b+0x60>
 800b158:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b15c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b160:	f8c9 0000 	str.w	r0, [r9]
 800b164:	6918      	ldr	r0, [r3, #16]
 800b166:	f7ff fd35 	bl	800abd4 <__hi0bits>
 800b16a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b16e:	e7df      	b.n	800b130 <__d2b+0x70>
 800b170:	0801fc17 	.word	0x0801fc17
 800b174:	0801fc28 	.word	0x0801fc28

0800b178 <_calloc_r>:
 800b178:	b513      	push	{r0, r1, r4, lr}
 800b17a:	434a      	muls	r2, r1
 800b17c:	4611      	mov	r1, r2
 800b17e:	9201      	str	r2, [sp, #4]
 800b180:	f000 f85a 	bl	800b238 <_malloc_r>
 800b184:	4604      	mov	r4, r0
 800b186:	b118      	cbz	r0, 800b190 <_calloc_r+0x18>
 800b188:	9a01      	ldr	r2, [sp, #4]
 800b18a:	2100      	movs	r1, #0
 800b18c:	f7fe f950 	bl	8009430 <memset>
 800b190:	4620      	mov	r0, r4
 800b192:	b002      	add	sp, #8
 800b194:	bd10      	pop	{r4, pc}
	...

0800b198 <_free_r>:
 800b198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b19a:	2900      	cmp	r1, #0
 800b19c:	d048      	beq.n	800b230 <_free_r+0x98>
 800b19e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1a2:	9001      	str	r0, [sp, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1aa:	bfb8      	it	lt
 800b1ac:	18e4      	addlt	r4, r4, r3
 800b1ae:	f000 fa65 	bl	800b67c <__malloc_lock>
 800b1b2:	4a20      	ldr	r2, [pc, #128]	; (800b234 <_free_r+0x9c>)
 800b1b4:	9801      	ldr	r0, [sp, #4]
 800b1b6:	6813      	ldr	r3, [r2, #0]
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	b933      	cbnz	r3, 800b1ca <_free_r+0x32>
 800b1bc:	6063      	str	r3, [r4, #4]
 800b1be:	6014      	str	r4, [r2, #0]
 800b1c0:	b003      	add	sp, #12
 800b1c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1c6:	f000 ba5f 	b.w	800b688 <__malloc_unlock>
 800b1ca:	42a3      	cmp	r3, r4
 800b1cc:	d90b      	bls.n	800b1e6 <_free_r+0x4e>
 800b1ce:	6821      	ldr	r1, [r4, #0]
 800b1d0:	1862      	adds	r2, r4, r1
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	bf04      	itt	eq
 800b1d6:	681a      	ldreq	r2, [r3, #0]
 800b1d8:	685b      	ldreq	r3, [r3, #4]
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	bf04      	itt	eq
 800b1de:	1852      	addeq	r2, r2, r1
 800b1e0:	6022      	streq	r2, [r4, #0]
 800b1e2:	602c      	str	r4, [r5, #0]
 800b1e4:	e7ec      	b.n	800b1c0 <_free_r+0x28>
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	685b      	ldr	r3, [r3, #4]
 800b1ea:	b10b      	cbz	r3, 800b1f0 <_free_r+0x58>
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d9fa      	bls.n	800b1e6 <_free_r+0x4e>
 800b1f0:	6811      	ldr	r1, [r2, #0]
 800b1f2:	1855      	adds	r5, r2, r1
 800b1f4:	42a5      	cmp	r5, r4
 800b1f6:	d10b      	bne.n	800b210 <_free_r+0x78>
 800b1f8:	6824      	ldr	r4, [r4, #0]
 800b1fa:	4421      	add	r1, r4
 800b1fc:	1854      	adds	r4, r2, r1
 800b1fe:	42a3      	cmp	r3, r4
 800b200:	6011      	str	r1, [r2, #0]
 800b202:	d1dd      	bne.n	800b1c0 <_free_r+0x28>
 800b204:	681c      	ldr	r4, [r3, #0]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	6053      	str	r3, [r2, #4]
 800b20a:	4421      	add	r1, r4
 800b20c:	6011      	str	r1, [r2, #0]
 800b20e:	e7d7      	b.n	800b1c0 <_free_r+0x28>
 800b210:	d902      	bls.n	800b218 <_free_r+0x80>
 800b212:	230c      	movs	r3, #12
 800b214:	6003      	str	r3, [r0, #0]
 800b216:	e7d3      	b.n	800b1c0 <_free_r+0x28>
 800b218:	6825      	ldr	r5, [r4, #0]
 800b21a:	1961      	adds	r1, r4, r5
 800b21c:	428b      	cmp	r3, r1
 800b21e:	bf04      	itt	eq
 800b220:	6819      	ldreq	r1, [r3, #0]
 800b222:	685b      	ldreq	r3, [r3, #4]
 800b224:	6063      	str	r3, [r4, #4]
 800b226:	bf04      	itt	eq
 800b228:	1949      	addeq	r1, r1, r5
 800b22a:	6021      	streq	r1, [r4, #0]
 800b22c:	6054      	str	r4, [r2, #4]
 800b22e:	e7c7      	b.n	800b1c0 <_free_r+0x28>
 800b230:	b003      	add	sp, #12
 800b232:	bd30      	pop	{r4, r5, pc}
 800b234:	20000608 	.word	0x20000608

0800b238 <_malloc_r>:
 800b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b23a:	1ccd      	adds	r5, r1, #3
 800b23c:	f025 0503 	bic.w	r5, r5, #3
 800b240:	3508      	adds	r5, #8
 800b242:	2d0c      	cmp	r5, #12
 800b244:	bf38      	it	cc
 800b246:	250c      	movcc	r5, #12
 800b248:	2d00      	cmp	r5, #0
 800b24a:	4606      	mov	r6, r0
 800b24c:	db01      	blt.n	800b252 <_malloc_r+0x1a>
 800b24e:	42a9      	cmp	r1, r5
 800b250:	d903      	bls.n	800b25a <_malloc_r+0x22>
 800b252:	230c      	movs	r3, #12
 800b254:	6033      	str	r3, [r6, #0]
 800b256:	2000      	movs	r0, #0
 800b258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b25a:	f000 fa0f 	bl	800b67c <__malloc_lock>
 800b25e:	4921      	ldr	r1, [pc, #132]	; (800b2e4 <_malloc_r+0xac>)
 800b260:	680a      	ldr	r2, [r1, #0]
 800b262:	4614      	mov	r4, r2
 800b264:	b99c      	cbnz	r4, 800b28e <_malloc_r+0x56>
 800b266:	4f20      	ldr	r7, [pc, #128]	; (800b2e8 <_malloc_r+0xb0>)
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	b923      	cbnz	r3, 800b276 <_malloc_r+0x3e>
 800b26c:	4621      	mov	r1, r4
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 f998 	bl	800b5a4 <_sbrk_r>
 800b274:	6038      	str	r0, [r7, #0]
 800b276:	4629      	mov	r1, r5
 800b278:	4630      	mov	r0, r6
 800b27a:	f000 f993 	bl	800b5a4 <_sbrk_r>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	d123      	bne.n	800b2ca <_malloc_r+0x92>
 800b282:	230c      	movs	r3, #12
 800b284:	6033      	str	r3, [r6, #0]
 800b286:	4630      	mov	r0, r6
 800b288:	f000 f9fe 	bl	800b688 <__malloc_unlock>
 800b28c:	e7e3      	b.n	800b256 <_malloc_r+0x1e>
 800b28e:	6823      	ldr	r3, [r4, #0]
 800b290:	1b5b      	subs	r3, r3, r5
 800b292:	d417      	bmi.n	800b2c4 <_malloc_r+0x8c>
 800b294:	2b0b      	cmp	r3, #11
 800b296:	d903      	bls.n	800b2a0 <_malloc_r+0x68>
 800b298:	6023      	str	r3, [r4, #0]
 800b29a:	441c      	add	r4, r3
 800b29c:	6025      	str	r5, [r4, #0]
 800b29e:	e004      	b.n	800b2aa <_malloc_r+0x72>
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	42a2      	cmp	r2, r4
 800b2a4:	bf0c      	ite	eq
 800b2a6:	600b      	streq	r3, [r1, #0]
 800b2a8:	6053      	strne	r3, [r2, #4]
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f9ec 	bl	800b688 <__malloc_unlock>
 800b2b0:	f104 000b 	add.w	r0, r4, #11
 800b2b4:	1d23      	adds	r3, r4, #4
 800b2b6:	f020 0007 	bic.w	r0, r0, #7
 800b2ba:	1ac2      	subs	r2, r0, r3
 800b2bc:	d0cc      	beq.n	800b258 <_malloc_r+0x20>
 800b2be:	1a1b      	subs	r3, r3, r0
 800b2c0:	50a3      	str	r3, [r4, r2]
 800b2c2:	e7c9      	b.n	800b258 <_malloc_r+0x20>
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	6864      	ldr	r4, [r4, #4]
 800b2c8:	e7cc      	b.n	800b264 <_malloc_r+0x2c>
 800b2ca:	1cc4      	adds	r4, r0, #3
 800b2cc:	f024 0403 	bic.w	r4, r4, #3
 800b2d0:	42a0      	cmp	r0, r4
 800b2d2:	d0e3      	beq.n	800b29c <_malloc_r+0x64>
 800b2d4:	1a21      	subs	r1, r4, r0
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f000 f964 	bl	800b5a4 <_sbrk_r>
 800b2dc:	3001      	adds	r0, #1
 800b2de:	d1dd      	bne.n	800b29c <_malloc_r+0x64>
 800b2e0:	e7cf      	b.n	800b282 <_malloc_r+0x4a>
 800b2e2:	bf00      	nop
 800b2e4:	20000608 	.word	0x20000608
 800b2e8:	2000060c 	.word	0x2000060c

0800b2ec <__ssputs_r>:
 800b2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f0:	688e      	ldr	r6, [r1, #8]
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	4690      	mov	r8, r2
 800b2fa:	461f      	mov	r7, r3
 800b2fc:	d838      	bhi.n	800b370 <__ssputs_r+0x84>
 800b2fe:	898a      	ldrh	r2, [r1, #12]
 800b300:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b304:	d032      	beq.n	800b36c <__ssputs_r+0x80>
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	6909      	ldr	r1, [r1, #16]
 800b30a:	eba5 0901 	sub.w	r9, r5, r1
 800b30e:	6965      	ldr	r5, [r4, #20]
 800b310:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b314:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b318:	3301      	adds	r3, #1
 800b31a:	444b      	add	r3, r9
 800b31c:	106d      	asrs	r5, r5, #1
 800b31e:	429d      	cmp	r5, r3
 800b320:	bf38      	it	cc
 800b322:	461d      	movcc	r5, r3
 800b324:	0553      	lsls	r3, r2, #21
 800b326:	d531      	bpl.n	800b38c <__ssputs_r+0xa0>
 800b328:	4629      	mov	r1, r5
 800b32a:	f7ff ff85 	bl	800b238 <_malloc_r>
 800b32e:	4606      	mov	r6, r0
 800b330:	b950      	cbnz	r0, 800b348 <__ssputs_r+0x5c>
 800b332:	230c      	movs	r3, #12
 800b334:	f8ca 3000 	str.w	r3, [sl]
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b33e:	81a3      	strh	r3, [r4, #12]
 800b340:	f04f 30ff 	mov.w	r0, #4294967295
 800b344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b348:	6921      	ldr	r1, [r4, #16]
 800b34a:	464a      	mov	r2, r9
 800b34c:	f7ff fb88 	bl	800aa60 <memcpy>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	6126      	str	r6, [r4, #16]
 800b35e:	6165      	str	r5, [r4, #20]
 800b360:	444e      	add	r6, r9
 800b362:	eba5 0509 	sub.w	r5, r5, r9
 800b366:	6026      	str	r6, [r4, #0]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	463e      	mov	r6, r7
 800b36c:	42be      	cmp	r6, r7
 800b36e:	d900      	bls.n	800b372 <__ssputs_r+0x86>
 800b370:	463e      	mov	r6, r7
 800b372:	4632      	mov	r2, r6
 800b374:	6820      	ldr	r0, [r4, #0]
 800b376:	4641      	mov	r1, r8
 800b378:	f000 f966 	bl	800b648 <memmove>
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	6822      	ldr	r2, [r4, #0]
 800b380:	1b9b      	subs	r3, r3, r6
 800b382:	4432      	add	r2, r6
 800b384:	60a3      	str	r3, [r4, #8]
 800b386:	6022      	str	r2, [r4, #0]
 800b388:	2000      	movs	r0, #0
 800b38a:	e7db      	b.n	800b344 <__ssputs_r+0x58>
 800b38c:	462a      	mov	r2, r5
 800b38e:	f000 f981 	bl	800b694 <_realloc_r>
 800b392:	4606      	mov	r6, r0
 800b394:	2800      	cmp	r0, #0
 800b396:	d1e1      	bne.n	800b35c <__ssputs_r+0x70>
 800b398:	6921      	ldr	r1, [r4, #16]
 800b39a:	4650      	mov	r0, sl
 800b39c:	f7ff fefc 	bl	800b198 <_free_r>
 800b3a0:	e7c7      	b.n	800b332 <__ssputs_r+0x46>
	...

0800b3a4 <_svfiprintf_r>:
 800b3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4698      	mov	r8, r3
 800b3aa:	898b      	ldrh	r3, [r1, #12]
 800b3ac:	061b      	lsls	r3, r3, #24
 800b3ae:	b09d      	sub	sp, #116	; 0x74
 800b3b0:	4607      	mov	r7, r0
 800b3b2:	460d      	mov	r5, r1
 800b3b4:	4614      	mov	r4, r2
 800b3b6:	d50e      	bpl.n	800b3d6 <_svfiprintf_r+0x32>
 800b3b8:	690b      	ldr	r3, [r1, #16]
 800b3ba:	b963      	cbnz	r3, 800b3d6 <_svfiprintf_r+0x32>
 800b3bc:	2140      	movs	r1, #64	; 0x40
 800b3be:	f7ff ff3b 	bl	800b238 <_malloc_r>
 800b3c2:	6028      	str	r0, [r5, #0]
 800b3c4:	6128      	str	r0, [r5, #16]
 800b3c6:	b920      	cbnz	r0, 800b3d2 <_svfiprintf_r+0x2e>
 800b3c8:	230c      	movs	r3, #12
 800b3ca:	603b      	str	r3, [r7, #0]
 800b3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d0:	e0d1      	b.n	800b576 <_svfiprintf_r+0x1d2>
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	616b      	str	r3, [r5, #20]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800b3da:	2320      	movs	r3, #32
 800b3dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b3e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3e4:	2330      	movs	r3, #48	; 0x30
 800b3e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b590 <_svfiprintf_r+0x1ec>
 800b3ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b3ee:	f04f 0901 	mov.w	r9, #1
 800b3f2:	4623      	mov	r3, r4
 800b3f4:	469a      	mov	sl, r3
 800b3f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3fa:	b10a      	cbz	r2, 800b400 <_svfiprintf_r+0x5c>
 800b3fc:	2a25      	cmp	r2, #37	; 0x25
 800b3fe:	d1f9      	bne.n	800b3f4 <_svfiprintf_r+0x50>
 800b400:	ebba 0b04 	subs.w	fp, sl, r4
 800b404:	d00b      	beq.n	800b41e <_svfiprintf_r+0x7a>
 800b406:	465b      	mov	r3, fp
 800b408:	4622      	mov	r2, r4
 800b40a:	4629      	mov	r1, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff ff6d 	bl	800b2ec <__ssputs_r>
 800b412:	3001      	adds	r0, #1
 800b414:	f000 80aa 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b418:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b41a:	445a      	add	r2, fp
 800b41c:	9209      	str	r2, [sp, #36]	; 0x24
 800b41e:	f89a 3000 	ldrb.w	r3, [sl]
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 80a2 	beq.w	800b56c <_svfiprintf_r+0x1c8>
 800b428:	2300      	movs	r3, #0
 800b42a:	f04f 32ff 	mov.w	r2, #4294967295
 800b42e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b432:	f10a 0a01 	add.w	sl, sl, #1
 800b436:	9304      	str	r3, [sp, #16]
 800b438:	9307      	str	r3, [sp, #28]
 800b43a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b43e:	931a      	str	r3, [sp, #104]	; 0x68
 800b440:	4654      	mov	r4, sl
 800b442:	2205      	movs	r2, #5
 800b444:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b448:	4851      	ldr	r0, [pc, #324]	; (800b590 <_svfiprintf_r+0x1ec>)
 800b44a:	f7f4 ff49 	bl	80002e0 <memchr>
 800b44e:	9a04      	ldr	r2, [sp, #16]
 800b450:	b9d8      	cbnz	r0, 800b48a <_svfiprintf_r+0xe6>
 800b452:	06d0      	lsls	r0, r2, #27
 800b454:	bf44      	itt	mi
 800b456:	2320      	movmi	r3, #32
 800b458:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b45c:	0711      	lsls	r1, r2, #28
 800b45e:	bf44      	itt	mi
 800b460:	232b      	movmi	r3, #43	; 0x2b
 800b462:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b466:	f89a 3000 	ldrb.w	r3, [sl]
 800b46a:	2b2a      	cmp	r3, #42	; 0x2a
 800b46c:	d015      	beq.n	800b49a <_svfiprintf_r+0xf6>
 800b46e:	9a07      	ldr	r2, [sp, #28]
 800b470:	4654      	mov	r4, sl
 800b472:	2000      	movs	r0, #0
 800b474:	f04f 0c0a 	mov.w	ip, #10
 800b478:	4621      	mov	r1, r4
 800b47a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b47e:	3b30      	subs	r3, #48	; 0x30
 800b480:	2b09      	cmp	r3, #9
 800b482:	d94e      	bls.n	800b522 <_svfiprintf_r+0x17e>
 800b484:	b1b0      	cbz	r0, 800b4b4 <_svfiprintf_r+0x110>
 800b486:	9207      	str	r2, [sp, #28]
 800b488:	e014      	b.n	800b4b4 <_svfiprintf_r+0x110>
 800b48a:	eba0 0308 	sub.w	r3, r0, r8
 800b48e:	fa09 f303 	lsl.w	r3, r9, r3
 800b492:	4313      	orrs	r3, r2
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	46a2      	mov	sl, r4
 800b498:	e7d2      	b.n	800b440 <_svfiprintf_r+0x9c>
 800b49a:	9b03      	ldr	r3, [sp, #12]
 800b49c:	1d19      	adds	r1, r3, #4
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	9103      	str	r1, [sp, #12]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	bfbb      	ittet	lt
 800b4a6:	425b      	neglt	r3, r3
 800b4a8:	f042 0202 	orrlt.w	r2, r2, #2
 800b4ac:	9307      	strge	r3, [sp, #28]
 800b4ae:	9307      	strlt	r3, [sp, #28]
 800b4b0:	bfb8      	it	lt
 800b4b2:	9204      	strlt	r2, [sp, #16]
 800b4b4:	7823      	ldrb	r3, [r4, #0]
 800b4b6:	2b2e      	cmp	r3, #46	; 0x2e
 800b4b8:	d10c      	bne.n	800b4d4 <_svfiprintf_r+0x130>
 800b4ba:	7863      	ldrb	r3, [r4, #1]
 800b4bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b4be:	d135      	bne.n	800b52c <_svfiprintf_r+0x188>
 800b4c0:	9b03      	ldr	r3, [sp, #12]
 800b4c2:	1d1a      	adds	r2, r3, #4
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	9203      	str	r2, [sp, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	bfb8      	it	lt
 800b4cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b4d0:	3402      	adds	r4, #2
 800b4d2:	9305      	str	r3, [sp, #20]
 800b4d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b5a0 <_svfiprintf_r+0x1fc>
 800b4d8:	7821      	ldrb	r1, [r4, #0]
 800b4da:	2203      	movs	r2, #3
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f7f4 feff 	bl	80002e0 <memchr>
 800b4e2:	b140      	cbz	r0, 800b4f6 <_svfiprintf_r+0x152>
 800b4e4:	2340      	movs	r3, #64	; 0x40
 800b4e6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ea:	fa03 f000 	lsl.w	r0, r3, r0
 800b4ee:	9b04      	ldr	r3, [sp, #16]
 800b4f0:	4303      	orrs	r3, r0
 800b4f2:	3401      	adds	r4, #1
 800b4f4:	9304      	str	r3, [sp, #16]
 800b4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fa:	4826      	ldr	r0, [pc, #152]	; (800b594 <_svfiprintf_r+0x1f0>)
 800b4fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b500:	2206      	movs	r2, #6
 800b502:	f7f4 feed 	bl	80002e0 <memchr>
 800b506:	2800      	cmp	r0, #0
 800b508:	d038      	beq.n	800b57c <_svfiprintf_r+0x1d8>
 800b50a:	4b23      	ldr	r3, [pc, #140]	; (800b598 <_svfiprintf_r+0x1f4>)
 800b50c:	bb1b      	cbnz	r3, 800b556 <_svfiprintf_r+0x1b2>
 800b50e:	9b03      	ldr	r3, [sp, #12]
 800b510:	3307      	adds	r3, #7
 800b512:	f023 0307 	bic.w	r3, r3, #7
 800b516:	3308      	adds	r3, #8
 800b518:	9303      	str	r3, [sp, #12]
 800b51a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51c:	4433      	add	r3, r6
 800b51e:	9309      	str	r3, [sp, #36]	; 0x24
 800b520:	e767      	b.n	800b3f2 <_svfiprintf_r+0x4e>
 800b522:	fb0c 3202 	mla	r2, ip, r2, r3
 800b526:	460c      	mov	r4, r1
 800b528:	2001      	movs	r0, #1
 800b52a:	e7a5      	b.n	800b478 <_svfiprintf_r+0xd4>
 800b52c:	2300      	movs	r3, #0
 800b52e:	3401      	adds	r4, #1
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	4619      	mov	r1, r3
 800b534:	f04f 0c0a 	mov.w	ip, #10
 800b538:	4620      	mov	r0, r4
 800b53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b53e:	3a30      	subs	r2, #48	; 0x30
 800b540:	2a09      	cmp	r2, #9
 800b542:	d903      	bls.n	800b54c <_svfiprintf_r+0x1a8>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d0c5      	beq.n	800b4d4 <_svfiprintf_r+0x130>
 800b548:	9105      	str	r1, [sp, #20]
 800b54a:	e7c3      	b.n	800b4d4 <_svfiprintf_r+0x130>
 800b54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b550:	4604      	mov	r4, r0
 800b552:	2301      	movs	r3, #1
 800b554:	e7f0      	b.n	800b538 <_svfiprintf_r+0x194>
 800b556:	ab03      	add	r3, sp, #12
 800b558:	9300      	str	r3, [sp, #0]
 800b55a:	462a      	mov	r2, r5
 800b55c:	4b0f      	ldr	r3, [pc, #60]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b55e:	a904      	add	r1, sp, #16
 800b560:	4638      	mov	r0, r7
 800b562:	f7fe f80d 	bl	8009580 <_printf_float>
 800b566:	1c42      	adds	r2, r0, #1
 800b568:	4606      	mov	r6, r0
 800b56a:	d1d6      	bne.n	800b51a <_svfiprintf_r+0x176>
 800b56c:	89ab      	ldrh	r3, [r5, #12]
 800b56e:	065b      	lsls	r3, r3, #25
 800b570:	f53f af2c 	bmi.w	800b3cc <_svfiprintf_r+0x28>
 800b574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b576:	b01d      	add	sp, #116	; 0x74
 800b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b57c:	ab03      	add	r3, sp, #12
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	462a      	mov	r2, r5
 800b582:	4b06      	ldr	r3, [pc, #24]	; (800b59c <_svfiprintf_r+0x1f8>)
 800b584:	a904      	add	r1, sp, #16
 800b586:	4638      	mov	r0, r7
 800b588:	f7fe fa9e 	bl	8009ac8 <_printf_i>
 800b58c:	e7eb      	b.n	800b566 <_svfiprintf_r+0x1c2>
 800b58e:	bf00      	nop
 800b590:	0801fd84 	.word	0x0801fd84
 800b594:	0801fd8e 	.word	0x0801fd8e
 800b598:	08009581 	.word	0x08009581
 800b59c:	0800b2ed 	.word	0x0800b2ed
 800b5a0:	0801fd8a 	.word	0x0801fd8a

0800b5a4 <_sbrk_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4d06      	ldr	r5, [pc, #24]	; (800b5c0 <_sbrk_r+0x1c>)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	4604      	mov	r4, r0
 800b5ac:	4608      	mov	r0, r1
 800b5ae:	602b      	str	r3, [r5, #0]
 800b5b0:	f7f7 f902 	bl	80027b8 <_sbrk>
 800b5b4:	1c43      	adds	r3, r0, #1
 800b5b6:	d102      	bne.n	800b5be <_sbrk_r+0x1a>
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	b103      	cbz	r3, 800b5be <_sbrk_r+0x1a>
 800b5bc:	6023      	str	r3, [r4, #0]
 800b5be:	bd38      	pop	{r3, r4, r5, pc}
 800b5c0:	2000307c 	.word	0x2000307c

0800b5c4 <__assert_func>:
 800b5c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5c6:	4614      	mov	r4, r2
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	4b09      	ldr	r3, [pc, #36]	; (800b5f0 <__assert_func+0x2c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4605      	mov	r5, r0
 800b5d0:	68d8      	ldr	r0, [r3, #12]
 800b5d2:	b14c      	cbz	r4, 800b5e8 <__assert_func+0x24>
 800b5d4:	4b07      	ldr	r3, [pc, #28]	; (800b5f4 <__assert_func+0x30>)
 800b5d6:	9100      	str	r1, [sp, #0]
 800b5d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5dc:	4906      	ldr	r1, [pc, #24]	; (800b5f8 <__assert_func+0x34>)
 800b5de:	462b      	mov	r3, r5
 800b5e0:	f000 f80e 	bl	800b600 <fiprintf>
 800b5e4:	f000 faa4 	bl	800bb30 <abort>
 800b5e8:	4b04      	ldr	r3, [pc, #16]	; (800b5fc <__assert_func+0x38>)
 800b5ea:	461c      	mov	r4, r3
 800b5ec:	e7f3      	b.n	800b5d6 <__assert_func+0x12>
 800b5ee:	bf00      	nop
 800b5f0:	20000010 	.word	0x20000010
 800b5f4:	0801fd95 	.word	0x0801fd95
 800b5f8:	0801fda2 	.word	0x0801fda2
 800b5fc:	0801fdd0 	.word	0x0801fdd0

0800b600 <fiprintf>:
 800b600:	b40e      	push	{r1, r2, r3}
 800b602:	b503      	push	{r0, r1, lr}
 800b604:	4601      	mov	r1, r0
 800b606:	ab03      	add	r3, sp, #12
 800b608:	4805      	ldr	r0, [pc, #20]	; (800b620 <fiprintf+0x20>)
 800b60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60e:	6800      	ldr	r0, [r0, #0]
 800b610:	9301      	str	r3, [sp, #4]
 800b612:	f000 f88f 	bl	800b734 <_vfiprintf_r>
 800b616:	b002      	add	sp, #8
 800b618:	f85d eb04 	ldr.w	lr, [sp], #4
 800b61c:	b003      	add	sp, #12
 800b61e:	4770      	bx	lr
 800b620:	20000010 	.word	0x20000010

0800b624 <__ascii_mbtowc>:
 800b624:	b082      	sub	sp, #8
 800b626:	b901      	cbnz	r1, 800b62a <__ascii_mbtowc+0x6>
 800b628:	a901      	add	r1, sp, #4
 800b62a:	b142      	cbz	r2, 800b63e <__ascii_mbtowc+0x1a>
 800b62c:	b14b      	cbz	r3, 800b642 <__ascii_mbtowc+0x1e>
 800b62e:	7813      	ldrb	r3, [r2, #0]
 800b630:	600b      	str	r3, [r1, #0]
 800b632:	7812      	ldrb	r2, [r2, #0]
 800b634:	1e10      	subs	r0, r2, #0
 800b636:	bf18      	it	ne
 800b638:	2001      	movne	r0, #1
 800b63a:	b002      	add	sp, #8
 800b63c:	4770      	bx	lr
 800b63e:	4610      	mov	r0, r2
 800b640:	e7fb      	b.n	800b63a <__ascii_mbtowc+0x16>
 800b642:	f06f 0001 	mvn.w	r0, #1
 800b646:	e7f8      	b.n	800b63a <__ascii_mbtowc+0x16>

0800b648 <memmove>:
 800b648:	4288      	cmp	r0, r1
 800b64a:	b510      	push	{r4, lr}
 800b64c:	eb01 0402 	add.w	r4, r1, r2
 800b650:	d902      	bls.n	800b658 <memmove+0x10>
 800b652:	4284      	cmp	r4, r0
 800b654:	4623      	mov	r3, r4
 800b656:	d807      	bhi.n	800b668 <memmove+0x20>
 800b658:	1e43      	subs	r3, r0, #1
 800b65a:	42a1      	cmp	r1, r4
 800b65c:	d008      	beq.n	800b670 <memmove+0x28>
 800b65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b662:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b666:	e7f8      	b.n	800b65a <memmove+0x12>
 800b668:	4402      	add	r2, r0
 800b66a:	4601      	mov	r1, r0
 800b66c:	428a      	cmp	r2, r1
 800b66e:	d100      	bne.n	800b672 <memmove+0x2a>
 800b670:	bd10      	pop	{r4, pc}
 800b672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b67a:	e7f7      	b.n	800b66c <memmove+0x24>

0800b67c <__malloc_lock>:
 800b67c:	4801      	ldr	r0, [pc, #4]	; (800b684 <__malloc_lock+0x8>)
 800b67e:	f000 bc17 	b.w	800beb0 <__retarget_lock_acquire_recursive>
 800b682:	bf00      	nop
 800b684:	20003084 	.word	0x20003084

0800b688 <__malloc_unlock>:
 800b688:	4801      	ldr	r0, [pc, #4]	; (800b690 <__malloc_unlock+0x8>)
 800b68a:	f000 bc12 	b.w	800beb2 <__retarget_lock_release_recursive>
 800b68e:	bf00      	nop
 800b690:	20003084 	.word	0x20003084

0800b694 <_realloc_r>:
 800b694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b696:	4607      	mov	r7, r0
 800b698:	4614      	mov	r4, r2
 800b69a:	460e      	mov	r6, r1
 800b69c:	b921      	cbnz	r1, 800b6a8 <_realloc_r+0x14>
 800b69e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	f7ff bdc8 	b.w	800b238 <_malloc_r>
 800b6a8:	b922      	cbnz	r2, 800b6b4 <_realloc_r+0x20>
 800b6aa:	f7ff fd75 	bl	800b198 <_free_r>
 800b6ae:	4625      	mov	r5, r4
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b4:	f000 fc62 	bl	800bf7c <_malloc_usable_size_r>
 800b6b8:	42a0      	cmp	r0, r4
 800b6ba:	d20f      	bcs.n	800b6dc <_realloc_r+0x48>
 800b6bc:	4621      	mov	r1, r4
 800b6be:	4638      	mov	r0, r7
 800b6c0:	f7ff fdba 	bl	800b238 <_malloc_r>
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	2800      	cmp	r0, #0
 800b6c8:	d0f2      	beq.n	800b6b0 <_realloc_r+0x1c>
 800b6ca:	4631      	mov	r1, r6
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	f7ff f9c7 	bl	800aa60 <memcpy>
 800b6d2:	4631      	mov	r1, r6
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	f7ff fd5f 	bl	800b198 <_free_r>
 800b6da:	e7e9      	b.n	800b6b0 <_realloc_r+0x1c>
 800b6dc:	4635      	mov	r5, r6
 800b6de:	e7e7      	b.n	800b6b0 <_realloc_r+0x1c>

0800b6e0 <__sfputc_r>:
 800b6e0:	6893      	ldr	r3, [r2, #8]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	b410      	push	{r4}
 800b6e8:	6093      	str	r3, [r2, #8]
 800b6ea:	da08      	bge.n	800b6fe <__sfputc_r+0x1e>
 800b6ec:	6994      	ldr	r4, [r2, #24]
 800b6ee:	42a3      	cmp	r3, r4
 800b6f0:	db01      	blt.n	800b6f6 <__sfputc_r+0x16>
 800b6f2:	290a      	cmp	r1, #10
 800b6f4:	d103      	bne.n	800b6fe <__sfputc_r+0x1e>
 800b6f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6fa:	f000 b94b 	b.w	800b994 <__swbuf_r>
 800b6fe:	6813      	ldr	r3, [r2, #0]
 800b700:	1c58      	adds	r0, r3, #1
 800b702:	6010      	str	r0, [r2, #0]
 800b704:	7019      	strb	r1, [r3, #0]
 800b706:	4608      	mov	r0, r1
 800b708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <__sfputs_r>:
 800b70e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b710:	4606      	mov	r6, r0
 800b712:	460f      	mov	r7, r1
 800b714:	4614      	mov	r4, r2
 800b716:	18d5      	adds	r5, r2, r3
 800b718:	42ac      	cmp	r4, r5
 800b71a:	d101      	bne.n	800b720 <__sfputs_r+0x12>
 800b71c:	2000      	movs	r0, #0
 800b71e:	e007      	b.n	800b730 <__sfputs_r+0x22>
 800b720:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b724:	463a      	mov	r2, r7
 800b726:	4630      	mov	r0, r6
 800b728:	f7ff ffda 	bl	800b6e0 <__sfputc_r>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d1f3      	bne.n	800b718 <__sfputs_r+0xa>
 800b730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b734 <_vfiprintf_r>:
 800b734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b738:	460d      	mov	r5, r1
 800b73a:	b09d      	sub	sp, #116	; 0x74
 800b73c:	4614      	mov	r4, r2
 800b73e:	4698      	mov	r8, r3
 800b740:	4606      	mov	r6, r0
 800b742:	b118      	cbz	r0, 800b74c <_vfiprintf_r+0x18>
 800b744:	6983      	ldr	r3, [r0, #24]
 800b746:	b90b      	cbnz	r3, 800b74c <_vfiprintf_r+0x18>
 800b748:	f000 fb14 	bl	800bd74 <__sinit>
 800b74c:	4b89      	ldr	r3, [pc, #548]	; (800b974 <_vfiprintf_r+0x240>)
 800b74e:	429d      	cmp	r5, r3
 800b750:	d11b      	bne.n	800b78a <_vfiprintf_r+0x56>
 800b752:	6875      	ldr	r5, [r6, #4]
 800b754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b756:	07d9      	lsls	r1, r3, #31
 800b758:	d405      	bmi.n	800b766 <_vfiprintf_r+0x32>
 800b75a:	89ab      	ldrh	r3, [r5, #12]
 800b75c:	059a      	lsls	r2, r3, #22
 800b75e:	d402      	bmi.n	800b766 <_vfiprintf_r+0x32>
 800b760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b762:	f000 fba5 	bl	800beb0 <__retarget_lock_acquire_recursive>
 800b766:	89ab      	ldrh	r3, [r5, #12]
 800b768:	071b      	lsls	r3, r3, #28
 800b76a:	d501      	bpl.n	800b770 <_vfiprintf_r+0x3c>
 800b76c:	692b      	ldr	r3, [r5, #16]
 800b76e:	b9eb      	cbnz	r3, 800b7ac <_vfiprintf_r+0x78>
 800b770:	4629      	mov	r1, r5
 800b772:	4630      	mov	r0, r6
 800b774:	f000 f96e 	bl	800ba54 <__swsetup_r>
 800b778:	b1c0      	cbz	r0, 800b7ac <_vfiprintf_r+0x78>
 800b77a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b77c:	07dc      	lsls	r4, r3, #31
 800b77e:	d50e      	bpl.n	800b79e <_vfiprintf_r+0x6a>
 800b780:	f04f 30ff 	mov.w	r0, #4294967295
 800b784:	b01d      	add	sp, #116	; 0x74
 800b786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78a:	4b7b      	ldr	r3, [pc, #492]	; (800b978 <_vfiprintf_r+0x244>)
 800b78c:	429d      	cmp	r5, r3
 800b78e:	d101      	bne.n	800b794 <_vfiprintf_r+0x60>
 800b790:	68b5      	ldr	r5, [r6, #8]
 800b792:	e7df      	b.n	800b754 <_vfiprintf_r+0x20>
 800b794:	4b79      	ldr	r3, [pc, #484]	; (800b97c <_vfiprintf_r+0x248>)
 800b796:	429d      	cmp	r5, r3
 800b798:	bf08      	it	eq
 800b79a:	68f5      	ldreq	r5, [r6, #12]
 800b79c:	e7da      	b.n	800b754 <_vfiprintf_r+0x20>
 800b79e:	89ab      	ldrh	r3, [r5, #12]
 800b7a0:	0598      	lsls	r0, r3, #22
 800b7a2:	d4ed      	bmi.n	800b780 <_vfiprintf_r+0x4c>
 800b7a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7a6:	f000 fb84 	bl	800beb2 <__retarget_lock_release_recursive>
 800b7aa:	e7e9      	b.n	800b780 <_vfiprintf_r+0x4c>
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b0:	2320      	movs	r3, #32
 800b7b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b7b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b7ba:	2330      	movs	r3, #48	; 0x30
 800b7bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b980 <_vfiprintf_r+0x24c>
 800b7c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b7c4:	f04f 0901 	mov.w	r9, #1
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	469a      	mov	sl, r3
 800b7cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b7d0:	b10a      	cbz	r2, 800b7d6 <_vfiprintf_r+0xa2>
 800b7d2:	2a25      	cmp	r2, #37	; 0x25
 800b7d4:	d1f9      	bne.n	800b7ca <_vfiprintf_r+0x96>
 800b7d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b7da:	d00b      	beq.n	800b7f4 <_vfiprintf_r+0xc0>
 800b7dc:	465b      	mov	r3, fp
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4629      	mov	r1, r5
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7ff ff93 	bl	800b70e <__sfputs_r>
 800b7e8:	3001      	adds	r0, #1
 800b7ea:	f000 80aa 	beq.w	800b942 <_vfiprintf_r+0x20e>
 800b7ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f0:	445a      	add	r2, fp
 800b7f2:	9209      	str	r2, [sp, #36]	; 0x24
 800b7f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 80a2 	beq.w	800b942 <_vfiprintf_r+0x20e>
 800b7fe:	2300      	movs	r3, #0
 800b800:	f04f 32ff 	mov.w	r2, #4294967295
 800b804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b808:	f10a 0a01 	add.w	sl, sl, #1
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	9307      	str	r3, [sp, #28]
 800b810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b814:	931a      	str	r3, [sp, #104]	; 0x68
 800b816:	4654      	mov	r4, sl
 800b818:	2205      	movs	r2, #5
 800b81a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81e:	4858      	ldr	r0, [pc, #352]	; (800b980 <_vfiprintf_r+0x24c>)
 800b820:	f7f4 fd5e 	bl	80002e0 <memchr>
 800b824:	9a04      	ldr	r2, [sp, #16]
 800b826:	b9d8      	cbnz	r0, 800b860 <_vfiprintf_r+0x12c>
 800b828:	06d1      	lsls	r1, r2, #27
 800b82a:	bf44      	itt	mi
 800b82c:	2320      	movmi	r3, #32
 800b82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b832:	0713      	lsls	r3, r2, #28
 800b834:	bf44      	itt	mi
 800b836:	232b      	movmi	r3, #43	; 0x2b
 800b838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b83c:	f89a 3000 	ldrb.w	r3, [sl]
 800b840:	2b2a      	cmp	r3, #42	; 0x2a
 800b842:	d015      	beq.n	800b870 <_vfiprintf_r+0x13c>
 800b844:	9a07      	ldr	r2, [sp, #28]
 800b846:	4654      	mov	r4, sl
 800b848:	2000      	movs	r0, #0
 800b84a:	f04f 0c0a 	mov.w	ip, #10
 800b84e:	4621      	mov	r1, r4
 800b850:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b854:	3b30      	subs	r3, #48	; 0x30
 800b856:	2b09      	cmp	r3, #9
 800b858:	d94e      	bls.n	800b8f8 <_vfiprintf_r+0x1c4>
 800b85a:	b1b0      	cbz	r0, 800b88a <_vfiprintf_r+0x156>
 800b85c:	9207      	str	r2, [sp, #28]
 800b85e:	e014      	b.n	800b88a <_vfiprintf_r+0x156>
 800b860:	eba0 0308 	sub.w	r3, r0, r8
 800b864:	fa09 f303 	lsl.w	r3, r9, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	46a2      	mov	sl, r4
 800b86e:	e7d2      	b.n	800b816 <_vfiprintf_r+0xe2>
 800b870:	9b03      	ldr	r3, [sp, #12]
 800b872:	1d19      	adds	r1, r3, #4
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	9103      	str	r1, [sp, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	bfbb      	ittet	lt
 800b87c:	425b      	neglt	r3, r3
 800b87e:	f042 0202 	orrlt.w	r2, r2, #2
 800b882:	9307      	strge	r3, [sp, #28]
 800b884:	9307      	strlt	r3, [sp, #28]
 800b886:	bfb8      	it	lt
 800b888:	9204      	strlt	r2, [sp, #16]
 800b88a:	7823      	ldrb	r3, [r4, #0]
 800b88c:	2b2e      	cmp	r3, #46	; 0x2e
 800b88e:	d10c      	bne.n	800b8aa <_vfiprintf_r+0x176>
 800b890:	7863      	ldrb	r3, [r4, #1]
 800b892:	2b2a      	cmp	r3, #42	; 0x2a
 800b894:	d135      	bne.n	800b902 <_vfiprintf_r+0x1ce>
 800b896:	9b03      	ldr	r3, [sp, #12]
 800b898:	1d1a      	adds	r2, r3, #4
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	9203      	str	r2, [sp, #12]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfb8      	it	lt
 800b8a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8a6:	3402      	adds	r4, #2
 800b8a8:	9305      	str	r3, [sp, #20]
 800b8aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b990 <_vfiprintf_r+0x25c>
 800b8ae:	7821      	ldrb	r1, [r4, #0]
 800b8b0:	2203      	movs	r2, #3
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	f7f4 fd14 	bl	80002e0 <memchr>
 800b8b8:	b140      	cbz	r0, 800b8cc <_vfiprintf_r+0x198>
 800b8ba:	2340      	movs	r3, #64	; 0x40
 800b8bc:	eba0 000a 	sub.w	r0, r0, sl
 800b8c0:	fa03 f000 	lsl.w	r0, r3, r0
 800b8c4:	9b04      	ldr	r3, [sp, #16]
 800b8c6:	4303      	orrs	r3, r0
 800b8c8:	3401      	adds	r4, #1
 800b8ca:	9304      	str	r3, [sp, #16]
 800b8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d0:	482c      	ldr	r0, [pc, #176]	; (800b984 <_vfiprintf_r+0x250>)
 800b8d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8d6:	2206      	movs	r2, #6
 800b8d8:	f7f4 fd02 	bl	80002e0 <memchr>
 800b8dc:	2800      	cmp	r0, #0
 800b8de:	d03f      	beq.n	800b960 <_vfiprintf_r+0x22c>
 800b8e0:	4b29      	ldr	r3, [pc, #164]	; (800b988 <_vfiprintf_r+0x254>)
 800b8e2:	bb1b      	cbnz	r3, 800b92c <_vfiprintf_r+0x1f8>
 800b8e4:	9b03      	ldr	r3, [sp, #12]
 800b8e6:	3307      	adds	r3, #7
 800b8e8:	f023 0307 	bic.w	r3, r3, #7
 800b8ec:	3308      	adds	r3, #8
 800b8ee:	9303      	str	r3, [sp, #12]
 800b8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f2:	443b      	add	r3, r7
 800b8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f6:	e767      	b.n	800b7c8 <_vfiprintf_r+0x94>
 800b8f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8fc:	460c      	mov	r4, r1
 800b8fe:	2001      	movs	r0, #1
 800b900:	e7a5      	b.n	800b84e <_vfiprintf_r+0x11a>
 800b902:	2300      	movs	r3, #0
 800b904:	3401      	adds	r4, #1
 800b906:	9305      	str	r3, [sp, #20]
 800b908:	4619      	mov	r1, r3
 800b90a:	f04f 0c0a 	mov.w	ip, #10
 800b90e:	4620      	mov	r0, r4
 800b910:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b914:	3a30      	subs	r2, #48	; 0x30
 800b916:	2a09      	cmp	r2, #9
 800b918:	d903      	bls.n	800b922 <_vfiprintf_r+0x1ee>
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d0c5      	beq.n	800b8aa <_vfiprintf_r+0x176>
 800b91e:	9105      	str	r1, [sp, #20]
 800b920:	e7c3      	b.n	800b8aa <_vfiprintf_r+0x176>
 800b922:	fb0c 2101 	mla	r1, ip, r1, r2
 800b926:	4604      	mov	r4, r0
 800b928:	2301      	movs	r3, #1
 800b92a:	e7f0      	b.n	800b90e <_vfiprintf_r+0x1da>
 800b92c:	ab03      	add	r3, sp, #12
 800b92e:	9300      	str	r3, [sp, #0]
 800b930:	462a      	mov	r2, r5
 800b932:	4b16      	ldr	r3, [pc, #88]	; (800b98c <_vfiprintf_r+0x258>)
 800b934:	a904      	add	r1, sp, #16
 800b936:	4630      	mov	r0, r6
 800b938:	f7fd fe22 	bl	8009580 <_printf_float>
 800b93c:	4607      	mov	r7, r0
 800b93e:	1c78      	adds	r0, r7, #1
 800b940:	d1d6      	bne.n	800b8f0 <_vfiprintf_r+0x1bc>
 800b942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b944:	07d9      	lsls	r1, r3, #31
 800b946:	d405      	bmi.n	800b954 <_vfiprintf_r+0x220>
 800b948:	89ab      	ldrh	r3, [r5, #12]
 800b94a:	059a      	lsls	r2, r3, #22
 800b94c:	d402      	bmi.n	800b954 <_vfiprintf_r+0x220>
 800b94e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b950:	f000 faaf 	bl	800beb2 <__retarget_lock_release_recursive>
 800b954:	89ab      	ldrh	r3, [r5, #12]
 800b956:	065b      	lsls	r3, r3, #25
 800b958:	f53f af12 	bmi.w	800b780 <_vfiprintf_r+0x4c>
 800b95c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b95e:	e711      	b.n	800b784 <_vfiprintf_r+0x50>
 800b960:	ab03      	add	r3, sp, #12
 800b962:	9300      	str	r3, [sp, #0]
 800b964:	462a      	mov	r2, r5
 800b966:	4b09      	ldr	r3, [pc, #36]	; (800b98c <_vfiprintf_r+0x258>)
 800b968:	a904      	add	r1, sp, #16
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7fe f8ac 	bl	8009ac8 <_printf_i>
 800b970:	e7e4      	b.n	800b93c <_vfiprintf_r+0x208>
 800b972:	bf00      	nop
 800b974:	0801fefc 	.word	0x0801fefc
 800b978:	0801ff1c 	.word	0x0801ff1c
 800b97c:	0801fedc 	.word	0x0801fedc
 800b980:	0801fd84 	.word	0x0801fd84
 800b984:	0801fd8e 	.word	0x0801fd8e
 800b988:	08009581 	.word	0x08009581
 800b98c:	0800b70f 	.word	0x0800b70f
 800b990:	0801fd8a 	.word	0x0801fd8a

0800b994 <__swbuf_r>:
 800b994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b996:	460e      	mov	r6, r1
 800b998:	4614      	mov	r4, r2
 800b99a:	4605      	mov	r5, r0
 800b99c:	b118      	cbz	r0, 800b9a6 <__swbuf_r+0x12>
 800b99e:	6983      	ldr	r3, [r0, #24]
 800b9a0:	b90b      	cbnz	r3, 800b9a6 <__swbuf_r+0x12>
 800b9a2:	f000 f9e7 	bl	800bd74 <__sinit>
 800b9a6:	4b21      	ldr	r3, [pc, #132]	; (800ba2c <__swbuf_r+0x98>)
 800b9a8:	429c      	cmp	r4, r3
 800b9aa:	d12b      	bne.n	800ba04 <__swbuf_r+0x70>
 800b9ac:	686c      	ldr	r4, [r5, #4]
 800b9ae:	69a3      	ldr	r3, [r4, #24]
 800b9b0:	60a3      	str	r3, [r4, #8]
 800b9b2:	89a3      	ldrh	r3, [r4, #12]
 800b9b4:	071a      	lsls	r2, r3, #28
 800b9b6:	d52f      	bpl.n	800ba18 <__swbuf_r+0x84>
 800b9b8:	6923      	ldr	r3, [r4, #16]
 800b9ba:	b36b      	cbz	r3, 800ba18 <__swbuf_r+0x84>
 800b9bc:	6923      	ldr	r3, [r4, #16]
 800b9be:	6820      	ldr	r0, [r4, #0]
 800b9c0:	1ac0      	subs	r0, r0, r3
 800b9c2:	6963      	ldr	r3, [r4, #20]
 800b9c4:	b2f6      	uxtb	r6, r6
 800b9c6:	4283      	cmp	r3, r0
 800b9c8:	4637      	mov	r7, r6
 800b9ca:	dc04      	bgt.n	800b9d6 <__swbuf_r+0x42>
 800b9cc:	4621      	mov	r1, r4
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	f000 f93c 	bl	800bc4c <_fflush_r>
 800b9d4:	bb30      	cbnz	r0, 800ba24 <__swbuf_r+0x90>
 800b9d6:	68a3      	ldr	r3, [r4, #8]
 800b9d8:	3b01      	subs	r3, #1
 800b9da:	60a3      	str	r3, [r4, #8]
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	1c5a      	adds	r2, r3, #1
 800b9e0:	6022      	str	r2, [r4, #0]
 800b9e2:	701e      	strb	r6, [r3, #0]
 800b9e4:	6963      	ldr	r3, [r4, #20]
 800b9e6:	3001      	adds	r0, #1
 800b9e8:	4283      	cmp	r3, r0
 800b9ea:	d004      	beq.n	800b9f6 <__swbuf_r+0x62>
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	07db      	lsls	r3, r3, #31
 800b9f0:	d506      	bpl.n	800ba00 <__swbuf_r+0x6c>
 800b9f2:	2e0a      	cmp	r6, #10
 800b9f4:	d104      	bne.n	800ba00 <__swbuf_r+0x6c>
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	4628      	mov	r0, r5
 800b9fa:	f000 f927 	bl	800bc4c <_fflush_r>
 800b9fe:	b988      	cbnz	r0, 800ba24 <__swbuf_r+0x90>
 800ba00:	4638      	mov	r0, r7
 800ba02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba04:	4b0a      	ldr	r3, [pc, #40]	; (800ba30 <__swbuf_r+0x9c>)
 800ba06:	429c      	cmp	r4, r3
 800ba08:	d101      	bne.n	800ba0e <__swbuf_r+0x7a>
 800ba0a:	68ac      	ldr	r4, [r5, #8]
 800ba0c:	e7cf      	b.n	800b9ae <__swbuf_r+0x1a>
 800ba0e:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <__swbuf_r+0xa0>)
 800ba10:	429c      	cmp	r4, r3
 800ba12:	bf08      	it	eq
 800ba14:	68ec      	ldreq	r4, [r5, #12]
 800ba16:	e7ca      	b.n	800b9ae <__swbuf_r+0x1a>
 800ba18:	4621      	mov	r1, r4
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	f000 f81a 	bl	800ba54 <__swsetup_r>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d0cb      	beq.n	800b9bc <__swbuf_r+0x28>
 800ba24:	f04f 37ff 	mov.w	r7, #4294967295
 800ba28:	e7ea      	b.n	800ba00 <__swbuf_r+0x6c>
 800ba2a:	bf00      	nop
 800ba2c:	0801fefc 	.word	0x0801fefc
 800ba30:	0801ff1c 	.word	0x0801ff1c
 800ba34:	0801fedc 	.word	0x0801fedc

0800ba38 <__ascii_wctomb>:
 800ba38:	b149      	cbz	r1, 800ba4e <__ascii_wctomb+0x16>
 800ba3a:	2aff      	cmp	r2, #255	; 0xff
 800ba3c:	bf85      	ittet	hi
 800ba3e:	238a      	movhi	r3, #138	; 0x8a
 800ba40:	6003      	strhi	r3, [r0, #0]
 800ba42:	700a      	strbls	r2, [r1, #0]
 800ba44:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba48:	bf98      	it	ls
 800ba4a:	2001      	movls	r0, #1
 800ba4c:	4770      	bx	lr
 800ba4e:	4608      	mov	r0, r1
 800ba50:	4770      	bx	lr
	...

0800ba54 <__swsetup_r>:
 800ba54:	4b32      	ldr	r3, [pc, #200]	; (800bb20 <__swsetup_r+0xcc>)
 800ba56:	b570      	push	{r4, r5, r6, lr}
 800ba58:	681d      	ldr	r5, [r3, #0]
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	460c      	mov	r4, r1
 800ba5e:	b125      	cbz	r5, 800ba6a <__swsetup_r+0x16>
 800ba60:	69ab      	ldr	r3, [r5, #24]
 800ba62:	b913      	cbnz	r3, 800ba6a <__swsetup_r+0x16>
 800ba64:	4628      	mov	r0, r5
 800ba66:	f000 f985 	bl	800bd74 <__sinit>
 800ba6a:	4b2e      	ldr	r3, [pc, #184]	; (800bb24 <__swsetup_r+0xd0>)
 800ba6c:	429c      	cmp	r4, r3
 800ba6e:	d10f      	bne.n	800ba90 <__swsetup_r+0x3c>
 800ba70:	686c      	ldr	r4, [r5, #4]
 800ba72:	89a3      	ldrh	r3, [r4, #12]
 800ba74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba78:	0719      	lsls	r1, r3, #28
 800ba7a:	d42c      	bmi.n	800bad6 <__swsetup_r+0x82>
 800ba7c:	06dd      	lsls	r5, r3, #27
 800ba7e:	d411      	bmi.n	800baa4 <__swsetup_r+0x50>
 800ba80:	2309      	movs	r3, #9
 800ba82:	6033      	str	r3, [r6, #0]
 800ba84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8e:	e03e      	b.n	800bb0e <__swsetup_r+0xba>
 800ba90:	4b25      	ldr	r3, [pc, #148]	; (800bb28 <__swsetup_r+0xd4>)
 800ba92:	429c      	cmp	r4, r3
 800ba94:	d101      	bne.n	800ba9a <__swsetup_r+0x46>
 800ba96:	68ac      	ldr	r4, [r5, #8]
 800ba98:	e7eb      	b.n	800ba72 <__swsetup_r+0x1e>
 800ba9a:	4b24      	ldr	r3, [pc, #144]	; (800bb2c <__swsetup_r+0xd8>)
 800ba9c:	429c      	cmp	r4, r3
 800ba9e:	bf08      	it	eq
 800baa0:	68ec      	ldreq	r4, [r5, #12]
 800baa2:	e7e6      	b.n	800ba72 <__swsetup_r+0x1e>
 800baa4:	0758      	lsls	r0, r3, #29
 800baa6:	d512      	bpl.n	800bace <__swsetup_r+0x7a>
 800baa8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800baaa:	b141      	cbz	r1, 800babe <__swsetup_r+0x6a>
 800baac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bab0:	4299      	cmp	r1, r3
 800bab2:	d002      	beq.n	800baba <__swsetup_r+0x66>
 800bab4:	4630      	mov	r0, r6
 800bab6:	f7ff fb6f 	bl	800b198 <_free_r>
 800baba:	2300      	movs	r3, #0
 800babc:	6363      	str	r3, [r4, #52]	; 0x34
 800babe:	89a3      	ldrh	r3, [r4, #12]
 800bac0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bac4:	81a3      	strh	r3, [r4, #12]
 800bac6:	2300      	movs	r3, #0
 800bac8:	6063      	str	r3, [r4, #4]
 800baca:	6923      	ldr	r3, [r4, #16]
 800bacc:	6023      	str	r3, [r4, #0]
 800bace:	89a3      	ldrh	r3, [r4, #12]
 800bad0:	f043 0308 	orr.w	r3, r3, #8
 800bad4:	81a3      	strh	r3, [r4, #12]
 800bad6:	6923      	ldr	r3, [r4, #16]
 800bad8:	b94b      	cbnz	r3, 800baee <__swsetup_r+0x9a>
 800bada:	89a3      	ldrh	r3, [r4, #12]
 800badc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bae4:	d003      	beq.n	800baee <__swsetup_r+0x9a>
 800bae6:	4621      	mov	r1, r4
 800bae8:	4630      	mov	r0, r6
 800baea:	f000 fa07 	bl	800befc <__smakebuf_r>
 800baee:	89a0      	ldrh	r0, [r4, #12]
 800baf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800baf4:	f010 0301 	ands.w	r3, r0, #1
 800baf8:	d00a      	beq.n	800bb10 <__swsetup_r+0xbc>
 800bafa:	2300      	movs	r3, #0
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	6963      	ldr	r3, [r4, #20]
 800bb00:	425b      	negs	r3, r3
 800bb02:	61a3      	str	r3, [r4, #24]
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	b943      	cbnz	r3, 800bb1a <__swsetup_r+0xc6>
 800bb08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bb0c:	d1ba      	bne.n	800ba84 <__swsetup_r+0x30>
 800bb0e:	bd70      	pop	{r4, r5, r6, pc}
 800bb10:	0781      	lsls	r1, r0, #30
 800bb12:	bf58      	it	pl
 800bb14:	6963      	ldrpl	r3, [r4, #20]
 800bb16:	60a3      	str	r3, [r4, #8]
 800bb18:	e7f4      	b.n	800bb04 <__swsetup_r+0xb0>
 800bb1a:	2000      	movs	r0, #0
 800bb1c:	e7f7      	b.n	800bb0e <__swsetup_r+0xba>
 800bb1e:	bf00      	nop
 800bb20:	20000010 	.word	0x20000010
 800bb24:	0801fefc 	.word	0x0801fefc
 800bb28:	0801ff1c 	.word	0x0801ff1c
 800bb2c:	0801fedc 	.word	0x0801fedc

0800bb30 <abort>:
 800bb30:	b508      	push	{r3, lr}
 800bb32:	2006      	movs	r0, #6
 800bb34:	f000 fa52 	bl	800bfdc <raise>
 800bb38:	2001      	movs	r0, #1
 800bb3a:	f7f6 fdc5 	bl	80026c8 <_exit>
	...

0800bb40 <__sflush_r>:
 800bb40:	898a      	ldrh	r2, [r1, #12]
 800bb42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb46:	4605      	mov	r5, r0
 800bb48:	0710      	lsls	r0, r2, #28
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	d458      	bmi.n	800bc00 <__sflush_r+0xc0>
 800bb4e:	684b      	ldr	r3, [r1, #4]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	dc05      	bgt.n	800bb60 <__sflush_r+0x20>
 800bb54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	dc02      	bgt.n	800bb60 <__sflush_r+0x20>
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb62:	2e00      	cmp	r6, #0
 800bb64:	d0f9      	beq.n	800bb5a <__sflush_r+0x1a>
 800bb66:	2300      	movs	r3, #0
 800bb68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bb6c:	682f      	ldr	r7, [r5, #0]
 800bb6e:	602b      	str	r3, [r5, #0]
 800bb70:	d032      	beq.n	800bbd8 <__sflush_r+0x98>
 800bb72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb74:	89a3      	ldrh	r3, [r4, #12]
 800bb76:	075a      	lsls	r2, r3, #29
 800bb78:	d505      	bpl.n	800bb86 <__sflush_r+0x46>
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	1ac0      	subs	r0, r0, r3
 800bb7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb80:	b10b      	cbz	r3, 800bb86 <__sflush_r+0x46>
 800bb82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb84:	1ac0      	subs	r0, r0, r3
 800bb86:	2300      	movs	r3, #0
 800bb88:	4602      	mov	r2, r0
 800bb8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bb8c:	6a21      	ldr	r1, [r4, #32]
 800bb8e:	4628      	mov	r0, r5
 800bb90:	47b0      	blx	r6
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	89a3      	ldrh	r3, [r4, #12]
 800bb96:	d106      	bne.n	800bba6 <__sflush_r+0x66>
 800bb98:	6829      	ldr	r1, [r5, #0]
 800bb9a:	291d      	cmp	r1, #29
 800bb9c:	d82c      	bhi.n	800bbf8 <__sflush_r+0xb8>
 800bb9e:	4a2a      	ldr	r2, [pc, #168]	; (800bc48 <__sflush_r+0x108>)
 800bba0:	40ca      	lsrs	r2, r1
 800bba2:	07d6      	lsls	r6, r2, #31
 800bba4:	d528      	bpl.n	800bbf8 <__sflush_r+0xb8>
 800bba6:	2200      	movs	r2, #0
 800bba8:	6062      	str	r2, [r4, #4]
 800bbaa:	04d9      	lsls	r1, r3, #19
 800bbac:	6922      	ldr	r2, [r4, #16]
 800bbae:	6022      	str	r2, [r4, #0]
 800bbb0:	d504      	bpl.n	800bbbc <__sflush_r+0x7c>
 800bbb2:	1c42      	adds	r2, r0, #1
 800bbb4:	d101      	bne.n	800bbba <__sflush_r+0x7a>
 800bbb6:	682b      	ldr	r3, [r5, #0]
 800bbb8:	b903      	cbnz	r3, 800bbbc <__sflush_r+0x7c>
 800bbba:	6560      	str	r0, [r4, #84]	; 0x54
 800bbbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbbe:	602f      	str	r7, [r5, #0]
 800bbc0:	2900      	cmp	r1, #0
 800bbc2:	d0ca      	beq.n	800bb5a <__sflush_r+0x1a>
 800bbc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbc8:	4299      	cmp	r1, r3
 800bbca:	d002      	beq.n	800bbd2 <__sflush_r+0x92>
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f7ff fae3 	bl	800b198 <_free_r>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	6360      	str	r0, [r4, #52]	; 0x34
 800bbd6:	e7c1      	b.n	800bb5c <__sflush_r+0x1c>
 800bbd8:	6a21      	ldr	r1, [r4, #32]
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b0      	blx	r6
 800bbe0:	1c41      	adds	r1, r0, #1
 800bbe2:	d1c7      	bne.n	800bb74 <__sflush_r+0x34>
 800bbe4:	682b      	ldr	r3, [r5, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d0c4      	beq.n	800bb74 <__sflush_r+0x34>
 800bbea:	2b1d      	cmp	r3, #29
 800bbec:	d001      	beq.n	800bbf2 <__sflush_r+0xb2>
 800bbee:	2b16      	cmp	r3, #22
 800bbf0:	d101      	bne.n	800bbf6 <__sflush_r+0xb6>
 800bbf2:	602f      	str	r7, [r5, #0]
 800bbf4:	e7b1      	b.n	800bb5a <__sflush_r+0x1a>
 800bbf6:	89a3      	ldrh	r3, [r4, #12]
 800bbf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbfc:	81a3      	strh	r3, [r4, #12]
 800bbfe:	e7ad      	b.n	800bb5c <__sflush_r+0x1c>
 800bc00:	690f      	ldr	r7, [r1, #16]
 800bc02:	2f00      	cmp	r7, #0
 800bc04:	d0a9      	beq.n	800bb5a <__sflush_r+0x1a>
 800bc06:	0793      	lsls	r3, r2, #30
 800bc08:	680e      	ldr	r6, [r1, #0]
 800bc0a:	bf08      	it	eq
 800bc0c:	694b      	ldreq	r3, [r1, #20]
 800bc0e:	600f      	str	r7, [r1, #0]
 800bc10:	bf18      	it	ne
 800bc12:	2300      	movne	r3, #0
 800bc14:	eba6 0807 	sub.w	r8, r6, r7
 800bc18:	608b      	str	r3, [r1, #8]
 800bc1a:	f1b8 0f00 	cmp.w	r8, #0
 800bc1e:	dd9c      	ble.n	800bb5a <__sflush_r+0x1a>
 800bc20:	6a21      	ldr	r1, [r4, #32]
 800bc22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc24:	4643      	mov	r3, r8
 800bc26:	463a      	mov	r2, r7
 800bc28:	4628      	mov	r0, r5
 800bc2a:	47b0      	blx	r6
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	dc06      	bgt.n	800bc3e <__sflush_r+0xfe>
 800bc30:	89a3      	ldrh	r3, [r4, #12]
 800bc32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc36:	81a3      	strh	r3, [r4, #12]
 800bc38:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3c:	e78e      	b.n	800bb5c <__sflush_r+0x1c>
 800bc3e:	4407      	add	r7, r0
 800bc40:	eba8 0800 	sub.w	r8, r8, r0
 800bc44:	e7e9      	b.n	800bc1a <__sflush_r+0xda>
 800bc46:	bf00      	nop
 800bc48:	20400001 	.word	0x20400001

0800bc4c <_fflush_r>:
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	690b      	ldr	r3, [r1, #16]
 800bc50:	4605      	mov	r5, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	b913      	cbnz	r3, 800bc5c <_fflush_r+0x10>
 800bc56:	2500      	movs	r5, #0
 800bc58:	4628      	mov	r0, r5
 800bc5a:	bd38      	pop	{r3, r4, r5, pc}
 800bc5c:	b118      	cbz	r0, 800bc66 <_fflush_r+0x1a>
 800bc5e:	6983      	ldr	r3, [r0, #24]
 800bc60:	b90b      	cbnz	r3, 800bc66 <_fflush_r+0x1a>
 800bc62:	f000 f887 	bl	800bd74 <__sinit>
 800bc66:	4b14      	ldr	r3, [pc, #80]	; (800bcb8 <_fflush_r+0x6c>)
 800bc68:	429c      	cmp	r4, r3
 800bc6a:	d11b      	bne.n	800bca4 <_fflush_r+0x58>
 800bc6c:	686c      	ldr	r4, [r5, #4]
 800bc6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d0ef      	beq.n	800bc56 <_fflush_r+0xa>
 800bc76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc78:	07d0      	lsls	r0, r2, #31
 800bc7a:	d404      	bmi.n	800bc86 <_fflush_r+0x3a>
 800bc7c:	0599      	lsls	r1, r3, #22
 800bc7e:	d402      	bmi.n	800bc86 <_fflush_r+0x3a>
 800bc80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc82:	f000 f915 	bl	800beb0 <__retarget_lock_acquire_recursive>
 800bc86:	4628      	mov	r0, r5
 800bc88:	4621      	mov	r1, r4
 800bc8a:	f7ff ff59 	bl	800bb40 <__sflush_r>
 800bc8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc90:	07da      	lsls	r2, r3, #31
 800bc92:	4605      	mov	r5, r0
 800bc94:	d4e0      	bmi.n	800bc58 <_fflush_r+0xc>
 800bc96:	89a3      	ldrh	r3, [r4, #12]
 800bc98:	059b      	lsls	r3, r3, #22
 800bc9a:	d4dd      	bmi.n	800bc58 <_fflush_r+0xc>
 800bc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc9e:	f000 f908 	bl	800beb2 <__retarget_lock_release_recursive>
 800bca2:	e7d9      	b.n	800bc58 <_fflush_r+0xc>
 800bca4:	4b05      	ldr	r3, [pc, #20]	; (800bcbc <_fflush_r+0x70>)
 800bca6:	429c      	cmp	r4, r3
 800bca8:	d101      	bne.n	800bcae <_fflush_r+0x62>
 800bcaa:	68ac      	ldr	r4, [r5, #8]
 800bcac:	e7df      	b.n	800bc6e <_fflush_r+0x22>
 800bcae:	4b04      	ldr	r3, [pc, #16]	; (800bcc0 <_fflush_r+0x74>)
 800bcb0:	429c      	cmp	r4, r3
 800bcb2:	bf08      	it	eq
 800bcb4:	68ec      	ldreq	r4, [r5, #12]
 800bcb6:	e7da      	b.n	800bc6e <_fflush_r+0x22>
 800bcb8:	0801fefc 	.word	0x0801fefc
 800bcbc:	0801ff1c 	.word	0x0801ff1c
 800bcc0:	0801fedc 	.word	0x0801fedc

0800bcc4 <std>:
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	b510      	push	{r4, lr}
 800bcc8:	4604      	mov	r4, r0
 800bcca:	e9c0 3300 	strd	r3, r3, [r0]
 800bcce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bcd2:	6083      	str	r3, [r0, #8]
 800bcd4:	8181      	strh	r1, [r0, #12]
 800bcd6:	6643      	str	r3, [r0, #100]	; 0x64
 800bcd8:	81c2      	strh	r2, [r0, #14]
 800bcda:	6183      	str	r3, [r0, #24]
 800bcdc:	4619      	mov	r1, r3
 800bcde:	2208      	movs	r2, #8
 800bce0:	305c      	adds	r0, #92	; 0x5c
 800bce2:	f7fd fba5 	bl	8009430 <memset>
 800bce6:	4b05      	ldr	r3, [pc, #20]	; (800bcfc <std+0x38>)
 800bce8:	6263      	str	r3, [r4, #36]	; 0x24
 800bcea:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <std+0x3c>)
 800bcec:	62a3      	str	r3, [r4, #40]	; 0x28
 800bcee:	4b05      	ldr	r3, [pc, #20]	; (800bd04 <std+0x40>)
 800bcf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bcf2:	4b05      	ldr	r3, [pc, #20]	; (800bd08 <std+0x44>)
 800bcf4:	6224      	str	r4, [r4, #32]
 800bcf6:	6323      	str	r3, [r4, #48]	; 0x30
 800bcf8:	bd10      	pop	{r4, pc}
 800bcfa:	bf00      	nop
 800bcfc:	0800c015 	.word	0x0800c015
 800bd00:	0800c037 	.word	0x0800c037
 800bd04:	0800c06f 	.word	0x0800c06f
 800bd08:	0800c093 	.word	0x0800c093

0800bd0c <_cleanup_r>:
 800bd0c:	4901      	ldr	r1, [pc, #4]	; (800bd14 <_cleanup_r+0x8>)
 800bd0e:	f000 b8af 	b.w	800be70 <_fwalk_reent>
 800bd12:	bf00      	nop
 800bd14:	0800bc4d 	.word	0x0800bc4d

0800bd18 <__sfmoreglue>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	1e4a      	subs	r2, r1, #1
 800bd1c:	2568      	movs	r5, #104	; 0x68
 800bd1e:	4355      	muls	r5, r2
 800bd20:	460e      	mov	r6, r1
 800bd22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd26:	f7ff fa87 	bl	800b238 <_malloc_r>
 800bd2a:	4604      	mov	r4, r0
 800bd2c:	b140      	cbz	r0, 800bd40 <__sfmoreglue+0x28>
 800bd2e:	2100      	movs	r1, #0
 800bd30:	e9c0 1600 	strd	r1, r6, [r0]
 800bd34:	300c      	adds	r0, #12
 800bd36:	60a0      	str	r0, [r4, #8]
 800bd38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd3c:	f7fd fb78 	bl	8009430 <memset>
 800bd40:	4620      	mov	r0, r4
 800bd42:	bd70      	pop	{r4, r5, r6, pc}

0800bd44 <__sfp_lock_acquire>:
 800bd44:	4801      	ldr	r0, [pc, #4]	; (800bd4c <__sfp_lock_acquire+0x8>)
 800bd46:	f000 b8b3 	b.w	800beb0 <__retarget_lock_acquire_recursive>
 800bd4a:	bf00      	nop
 800bd4c:	20003088 	.word	0x20003088

0800bd50 <__sfp_lock_release>:
 800bd50:	4801      	ldr	r0, [pc, #4]	; (800bd58 <__sfp_lock_release+0x8>)
 800bd52:	f000 b8ae 	b.w	800beb2 <__retarget_lock_release_recursive>
 800bd56:	bf00      	nop
 800bd58:	20003088 	.word	0x20003088

0800bd5c <__sinit_lock_acquire>:
 800bd5c:	4801      	ldr	r0, [pc, #4]	; (800bd64 <__sinit_lock_acquire+0x8>)
 800bd5e:	f000 b8a7 	b.w	800beb0 <__retarget_lock_acquire_recursive>
 800bd62:	bf00      	nop
 800bd64:	20003083 	.word	0x20003083

0800bd68 <__sinit_lock_release>:
 800bd68:	4801      	ldr	r0, [pc, #4]	; (800bd70 <__sinit_lock_release+0x8>)
 800bd6a:	f000 b8a2 	b.w	800beb2 <__retarget_lock_release_recursive>
 800bd6e:	bf00      	nop
 800bd70:	20003083 	.word	0x20003083

0800bd74 <__sinit>:
 800bd74:	b510      	push	{r4, lr}
 800bd76:	4604      	mov	r4, r0
 800bd78:	f7ff fff0 	bl	800bd5c <__sinit_lock_acquire>
 800bd7c:	69a3      	ldr	r3, [r4, #24]
 800bd7e:	b11b      	cbz	r3, 800bd88 <__sinit+0x14>
 800bd80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd84:	f7ff bff0 	b.w	800bd68 <__sinit_lock_release>
 800bd88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bd8c:	6523      	str	r3, [r4, #80]	; 0x50
 800bd8e:	4b13      	ldr	r3, [pc, #76]	; (800bddc <__sinit+0x68>)
 800bd90:	4a13      	ldr	r2, [pc, #76]	; (800bde0 <__sinit+0x6c>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	62a2      	str	r2, [r4, #40]	; 0x28
 800bd96:	42a3      	cmp	r3, r4
 800bd98:	bf04      	itt	eq
 800bd9a:	2301      	moveq	r3, #1
 800bd9c:	61a3      	streq	r3, [r4, #24]
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f820 	bl	800bde4 <__sfp>
 800bda4:	6060      	str	r0, [r4, #4]
 800bda6:	4620      	mov	r0, r4
 800bda8:	f000 f81c 	bl	800bde4 <__sfp>
 800bdac:	60a0      	str	r0, [r4, #8]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f000 f818 	bl	800bde4 <__sfp>
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	60e0      	str	r0, [r4, #12]
 800bdb8:	2104      	movs	r1, #4
 800bdba:	6860      	ldr	r0, [r4, #4]
 800bdbc:	f7ff ff82 	bl	800bcc4 <std>
 800bdc0:	68a0      	ldr	r0, [r4, #8]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	2109      	movs	r1, #9
 800bdc6:	f7ff ff7d 	bl	800bcc4 <std>
 800bdca:	68e0      	ldr	r0, [r4, #12]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	2112      	movs	r1, #18
 800bdd0:	f7ff ff78 	bl	800bcc4 <std>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	61a3      	str	r3, [r4, #24]
 800bdd8:	e7d2      	b.n	800bd80 <__sinit+0xc>
 800bdda:	bf00      	nop
 800bddc:	0801fb5c 	.word	0x0801fb5c
 800bde0:	0800bd0d 	.word	0x0800bd0d

0800bde4 <__sfp>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	4607      	mov	r7, r0
 800bde8:	f7ff ffac 	bl	800bd44 <__sfp_lock_acquire>
 800bdec:	4b1e      	ldr	r3, [pc, #120]	; (800be68 <__sfp+0x84>)
 800bdee:	681e      	ldr	r6, [r3, #0]
 800bdf0:	69b3      	ldr	r3, [r6, #24]
 800bdf2:	b913      	cbnz	r3, 800bdfa <__sfp+0x16>
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7ff ffbd 	bl	800bd74 <__sinit>
 800bdfa:	3648      	adds	r6, #72	; 0x48
 800bdfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be00:	3b01      	subs	r3, #1
 800be02:	d503      	bpl.n	800be0c <__sfp+0x28>
 800be04:	6833      	ldr	r3, [r6, #0]
 800be06:	b30b      	cbz	r3, 800be4c <__sfp+0x68>
 800be08:	6836      	ldr	r6, [r6, #0]
 800be0a:	e7f7      	b.n	800bdfc <__sfp+0x18>
 800be0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be10:	b9d5      	cbnz	r5, 800be48 <__sfp+0x64>
 800be12:	4b16      	ldr	r3, [pc, #88]	; (800be6c <__sfp+0x88>)
 800be14:	60e3      	str	r3, [r4, #12]
 800be16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be1a:	6665      	str	r5, [r4, #100]	; 0x64
 800be1c:	f000 f847 	bl	800beae <__retarget_lock_init_recursive>
 800be20:	f7ff ff96 	bl	800bd50 <__sfp_lock_release>
 800be24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be2c:	6025      	str	r5, [r4, #0]
 800be2e:	61a5      	str	r5, [r4, #24]
 800be30:	2208      	movs	r2, #8
 800be32:	4629      	mov	r1, r5
 800be34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be38:	f7fd fafa 	bl	8009430 <memset>
 800be3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800be44:	4620      	mov	r0, r4
 800be46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be48:	3468      	adds	r4, #104	; 0x68
 800be4a:	e7d9      	b.n	800be00 <__sfp+0x1c>
 800be4c:	2104      	movs	r1, #4
 800be4e:	4638      	mov	r0, r7
 800be50:	f7ff ff62 	bl	800bd18 <__sfmoreglue>
 800be54:	4604      	mov	r4, r0
 800be56:	6030      	str	r0, [r6, #0]
 800be58:	2800      	cmp	r0, #0
 800be5a:	d1d5      	bne.n	800be08 <__sfp+0x24>
 800be5c:	f7ff ff78 	bl	800bd50 <__sfp_lock_release>
 800be60:	230c      	movs	r3, #12
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	e7ee      	b.n	800be44 <__sfp+0x60>
 800be66:	bf00      	nop
 800be68:	0801fb5c 	.word	0x0801fb5c
 800be6c:	ffff0001 	.word	0xffff0001

0800be70 <_fwalk_reent>:
 800be70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be74:	4606      	mov	r6, r0
 800be76:	4688      	mov	r8, r1
 800be78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800be7c:	2700      	movs	r7, #0
 800be7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800be82:	f1b9 0901 	subs.w	r9, r9, #1
 800be86:	d505      	bpl.n	800be94 <_fwalk_reent+0x24>
 800be88:	6824      	ldr	r4, [r4, #0]
 800be8a:	2c00      	cmp	r4, #0
 800be8c:	d1f7      	bne.n	800be7e <_fwalk_reent+0xe>
 800be8e:	4638      	mov	r0, r7
 800be90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be94:	89ab      	ldrh	r3, [r5, #12]
 800be96:	2b01      	cmp	r3, #1
 800be98:	d907      	bls.n	800beaa <_fwalk_reent+0x3a>
 800be9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800be9e:	3301      	adds	r3, #1
 800bea0:	d003      	beq.n	800beaa <_fwalk_reent+0x3a>
 800bea2:	4629      	mov	r1, r5
 800bea4:	4630      	mov	r0, r6
 800bea6:	47c0      	blx	r8
 800bea8:	4307      	orrs	r7, r0
 800beaa:	3568      	adds	r5, #104	; 0x68
 800beac:	e7e9      	b.n	800be82 <_fwalk_reent+0x12>

0800beae <__retarget_lock_init_recursive>:
 800beae:	4770      	bx	lr

0800beb0 <__retarget_lock_acquire_recursive>:
 800beb0:	4770      	bx	lr

0800beb2 <__retarget_lock_release_recursive>:
 800beb2:	4770      	bx	lr

0800beb4 <__swhatbuf_r>:
 800beb4:	b570      	push	{r4, r5, r6, lr}
 800beb6:	460e      	mov	r6, r1
 800beb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bebc:	2900      	cmp	r1, #0
 800bebe:	b096      	sub	sp, #88	; 0x58
 800bec0:	4614      	mov	r4, r2
 800bec2:	461d      	mov	r5, r3
 800bec4:	da07      	bge.n	800bed6 <__swhatbuf_r+0x22>
 800bec6:	2300      	movs	r3, #0
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	89b3      	ldrh	r3, [r6, #12]
 800becc:	061a      	lsls	r2, r3, #24
 800bece:	d410      	bmi.n	800bef2 <__swhatbuf_r+0x3e>
 800bed0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bed4:	e00e      	b.n	800bef4 <__swhatbuf_r+0x40>
 800bed6:	466a      	mov	r2, sp
 800bed8:	f000 f902 	bl	800c0e0 <_fstat_r>
 800bedc:	2800      	cmp	r0, #0
 800bede:	dbf2      	blt.n	800bec6 <__swhatbuf_r+0x12>
 800bee0:	9a01      	ldr	r2, [sp, #4]
 800bee2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bee6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800beea:	425a      	negs	r2, r3
 800beec:	415a      	adcs	r2, r3
 800beee:	602a      	str	r2, [r5, #0]
 800bef0:	e7ee      	b.n	800bed0 <__swhatbuf_r+0x1c>
 800bef2:	2340      	movs	r3, #64	; 0x40
 800bef4:	2000      	movs	r0, #0
 800bef6:	6023      	str	r3, [r4, #0]
 800bef8:	b016      	add	sp, #88	; 0x58
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <__smakebuf_r>:
 800befc:	898b      	ldrh	r3, [r1, #12]
 800befe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf00:	079d      	lsls	r5, r3, #30
 800bf02:	4606      	mov	r6, r0
 800bf04:	460c      	mov	r4, r1
 800bf06:	d507      	bpl.n	800bf18 <__smakebuf_r+0x1c>
 800bf08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf0c:	6023      	str	r3, [r4, #0]
 800bf0e:	6123      	str	r3, [r4, #16]
 800bf10:	2301      	movs	r3, #1
 800bf12:	6163      	str	r3, [r4, #20]
 800bf14:	b002      	add	sp, #8
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	ab01      	add	r3, sp, #4
 800bf1a:	466a      	mov	r2, sp
 800bf1c:	f7ff ffca 	bl	800beb4 <__swhatbuf_r>
 800bf20:	9900      	ldr	r1, [sp, #0]
 800bf22:	4605      	mov	r5, r0
 800bf24:	4630      	mov	r0, r6
 800bf26:	f7ff f987 	bl	800b238 <_malloc_r>
 800bf2a:	b948      	cbnz	r0, 800bf40 <__smakebuf_r+0x44>
 800bf2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf30:	059a      	lsls	r2, r3, #22
 800bf32:	d4ef      	bmi.n	800bf14 <__smakebuf_r+0x18>
 800bf34:	f023 0303 	bic.w	r3, r3, #3
 800bf38:	f043 0302 	orr.w	r3, r3, #2
 800bf3c:	81a3      	strh	r3, [r4, #12]
 800bf3e:	e7e3      	b.n	800bf08 <__smakebuf_r+0xc>
 800bf40:	4b0d      	ldr	r3, [pc, #52]	; (800bf78 <__smakebuf_r+0x7c>)
 800bf42:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf44:	89a3      	ldrh	r3, [r4, #12]
 800bf46:	6020      	str	r0, [r4, #0]
 800bf48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf4c:	81a3      	strh	r3, [r4, #12]
 800bf4e:	9b00      	ldr	r3, [sp, #0]
 800bf50:	6163      	str	r3, [r4, #20]
 800bf52:	9b01      	ldr	r3, [sp, #4]
 800bf54:	6120      	str	r0, [r4, #16]
 800bf56:	b15b      	cbz	r3, 800bf70 <__smakebuf_r+0x74>
 800bf58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f000 f8d1 	bl	800c104 <_isatty_r>
 800bf62:	b128      	cbz	r0, 800bf70 <__smakebuf_r+0x74>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	f023 0303 	bic.w	r3, r3, #3
 800bf6a:	f043 0301 	orr.w	r3, r3, #1
 800bf6e:	81a3      	strh	r3, [r4, #12]
 800bf70:	89a0      	ldrh	r0, [r4, #12]
 800bf72:	4305      	orrs	r5, r0
 800bf74:	81a5      	strh	r5, [r4, #12]
 800bf76:	e7cd      	b.n	800bf14 <__smakebuf_r+0x18>
 800bf78:	0800bd0d 	.word	0x0800bd0d

0800bf7c <_malloc_usable_size_r>:
 800bf7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf80:	1f18      	subs	r0, r3, #4
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bfbc      	itt	lt
 800bf86:	580b      	ldrlt	r3, [r1, r0]
 800bf88:	18c0      	addlt	r0, r0, r3
 800bf8a:	4770      	bx	lr

0800bf8c <_raise_r>:
 800bf8c:	291f      	cmp	r1, #31
 800bf8e:	b538      	push	{r3, r4, r5, lr}
 800bf90:	4604      	mov	r4, r0
 800bf92:	460d      	mov	r5, r1
 800bf94:	d904      	bls.n	800bfa0 <_raise_r+0x14>
 800bf96:	2316      	movs	r3, #22
 800bf98:	6003      	str	r3, [r0, #0]
 800bf9a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfa2:	b112      	cbz	r2, 800bfaa <_raise_r+0x1e>
 800bfa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfa8:	b94b      	cbnz	r3, 800bfbe <_raise_r+0x32>
 800bfaa:	4620      	mov	r0, r4
 800bfac:	f000 f830 	bl	800c010 <_getpid_r>
 800bfb0:	462a      	mov	r2, r5
 800bfb2:	4601      	mov	r1, r0
 800bfb4:	4620      	mov	r0, r4
 800bfb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfba:	f000 b817 	b.w	800bfec <_kill_r>
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d00a      	beq.n	800bfd8 <_raise_r+0x4c>
 800bfc2:	1c59      	adds	r1, r3, #1
 800bfc4:	d103      	bne.n	800bfce <_raise_r+0x42>
 800bfc6:	2316      	movs	r3, #22
 800bfc8:	6003      	str	r3, [r0, #0]
 800bfca:	2001      	movs	r0, #1
 800bfcc:	e7e7      	b.n	800bf9e <_raise_r+0x12>
 800bfce:	2400      	movs	r4, #0
 800bfd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfd4:	4628      	mov	r0, r5
 800bfd6:	4798      	blx	r3
 800bfd8:	2000      	movs	r0, #0
 800bfda:	e7e0      	b.n	800bf9e <_raise_r+0x12>

0800bfdc <raise>:
 800bfdc:	4b02      	ldr	r3, [pc, #8]	; (800bfe8 <raise+0xc>)
 800bfde:	4601      	mov	r1, r0
 800bfe0:	6818      	ldr	r0, [r3, #0]
 800bfe2:	f7ff bfd3 	b.w	800bf8c <_raise_r>
 800bfe6:	bf00      	nop
 800bfe8:	20000010 	.word	0x20000010

0800bfec <_kill_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4d07      	ldr	r5, [pc, #28]	; (800c00c <_kill_r+0x20>)
 800bff0:	2300      	movs	r3, #0
 800bff2:	4604      	mov	r4, r0
 800bff4:	4608      	mov	r0, r1
 800bff6:	4611      	mov	r1, r2
 800bff8:	602b      	str	r3, [r5, #0]
 800bffa:	f7f6 fb55 	bl	80026a8 <_kill>
 800bffe:	1c43      	adds	r3, r0, #1
 800c000:	d102      	bne.n	800c008 <_kill_r+0x1c>
 800c002:	682b      	ldr	r3, [r5, #0]
 800c004:	b103      	cbz	r3, 800c008 <_kill_r+0x1c>
 800c006:	6023      	str	r3, [r4, #0]
 800c008:	bd38      	pop	{r3, r4, r5, pc}
 800c00a:	bf00      	nop
 800c00c:	2000307c 	.word	0x2000307c

0800c010 <_getpid_r>:
 800c010:	f7f6 bb42 	b.w	8002698 <_getpid>

0800c014 <__sread>:
 800c014:	b510      	push	{r4, lr}
 800c016:	460c      	mov	r4, r1
 800c018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c01c:	f000 f894 	bl	800c148 <_read_r>
 800c020:	2800      	cmp	r0, #0
 800c022:	bfab      	itete	ge
 800c024:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c026:	89a3      	ldrhlt	r3, [r4, #12]
 800c028:	181b      	addge	r3, r3, r0
 800c02a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c02e:	bfac      	ite	ge
 800c030:	6563      	strge	r3, [r4, #84]	; 0x54
 800c032:	81a3      	strhlt	r3, [r4, #12]
 800c034:	bd10      	pop	{r4, pc}

0800c036 <__swrite>:
 800c036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c03a:	461f      	mov	r7, r3
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	05db      	lsls	r3, r3, #23
 800c040:	4605      	mov	r5, r0
 800c042:	460c      	mov	r4, r1
 800c044:	4616      	mov	r6, r2
 800c046:	d505      	bpl.n	800c054 <__swrite+0x1e>
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	2302      	movs	r3, #2
 800c04e:	2200      	movs	r2, #0
 800c050:	f000 f868 	bl	800c124 <_lseek_r>
 800c054:	89a3      	ldrh	r3, [r4, #12]
 800c056:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c05a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	4628      	mov	r0, r5
 800c066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	f000 b817 	b.w	800c09c <_write_r>

0800c06e <__sseek>:
 800c06e:	b510      	push	{r4, lr}
 800c070:	460c      	mov	r4, r1
 800c072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c076:	f000 f855 	bl	800c124 <_lseek_r>
 800c07a:	1c43      	adds	r3, r0, #1
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	bf15      	itete	ne
 800c080:	6560      	strne	r0, [r4, #84]	; 0x54
 800c082:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c086:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c08a:	81a3      	strheq	r3, [r4, #12]
 800c08c:	bf18      	it	ne
 800c08e:	81a3      	strhne	r3, [r4, #12]
 800c090:	bd10      	pop	{r4, pc}

0800c092 <__sclose>:
 800c092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c096:	f000 b813 	b.w	800c0c0 <_close_r>
	...

0800c09c <_write_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_write_r+0x20>)
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	4608      	mov	r0, r1
 800c0a4:	4611      	mov	r1, r2
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	602a      	str	r2, [r5, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	f7f6 fb33 	bl	8002716 <_write>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_write_r+0x1e>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_write_r+0x1e>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	2000307c 	.word	0x2000307c

0800c0c0 <_close_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_close_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f6 fb3f 	bl	800274e <_close>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_close_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_close_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	2000307c 	.word	0x2000307c

0800c0e0 <_fstat_r>:
 800c0e0:	b538      	push	{r3, r4, r5, lr}
 800c0e2:	4d07      	ldr	r5, [pc, #28]	; (800c100 <_fstat_r+0x20>)
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	4604      	mov	r4, r0
 800c0e8:	4608      	mov	r0, r1
 800c0ea:	4611      	mov	r1, r2
 800c0ec:	602b      	str	r3, [r5, #0]
 800c0ee:	f7f6 fb3a 	bl	8002766 <_fstat>
 800c0f2:	1c43      	adds	r3, r0, #1
 800c0f4:	d102      	bne.n	800c0fc <_fstat_r+0x1c>
 800c0f6:	682b      	ldr	r3, [r5, #0]
 800c0f8:	b103      	cbz	r3, 800c0fc <_fstat_r+0x1c>
 800c0fa:	6023      	str	r3, [r4, #0]
 800c0fc:	bd38      	pop	{r3, r4, r5, pc}
 800c0fe:	bf00      	nop
 800c100:	2000307c 	.word	0x2000307c

0800c104 <_isatty_r>:
 800c104:	b538      	push	{r3, r4, r5, lr}
 800c106:	4d06      	ldr	r5, [pc, #24]	; (800c120 <_isatty_r+0x1c>)
 800c108:	2300      	movs	r3, #0
 800c10a:	4604      	mov	r4, r0
 800c10c:	4608      	mov	r0, r1
 800c10e:	602b      	str	r3, [r5, #0]
 800c110:	f7f6 fb39 	bl	8002786 <_isatty>
 800c114:	1c43      	adds	r3, r0, #1
 800c116:	d102      	bne.n	800c11e <_isatty_r+0x1a>
 800c118:	682b      	ldr	r3, [r5, #0]
 800c11a:	b103      	cbz	r3, 800c11e <_isatty_r+0x1a>
 800c11c:	6023      	str	r3, [r4, #0]
 800c11e:	bd38      	pop	{r3, r4, r5, pc}
 800c120:	2000307c 	.word	0x2000307c

0800c124 <_lseek_r>:
 800c124:	b538      	push	{r3, r4, r5, lr}
 800c126:	4d07      	ldr	r5, [pc, #28]	; (800c144 <_lseek_r+0x20>)
 800c128:	4604      	mov	r4, r0
 800c12a:	4608      	mov	r0, r1
 800c12c:	4611      	mov	r1, r2
 800c12e:	2200      	movs	r2, #0
 800c130:	602a      	str	r2, [r5, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	f7f6 fb32 	bl	800279c <_lseek>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_lseek_r+0x1e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_lseek_r+0x1e>
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	2000307c 	.word	0x2000307c

0800c148 <_read_r>:
 800c148:	b538      	push	{r3, r4, r5, lr}
 800c14a:	4d07      	ldr	r5, [pc, #28]	; (800c168 <_read_r+0x20>)
 800c14c:	4604      	mov	r4, r0
 800c14e:	4608      	mov	r0, r1
 800c150:	4611      	mov	r1, r2
 800c152:	2200      	movs	r2, #0
 800c154:	602a      	str	r2, [r5, #0]
 800c156:	461a      	mov	r2, r3
 800c158:	f7f6 fac0 	bl	80026dc <_read>
 800c15c:	1c43      	adds	r3, r0, #1
 800c15e:	d102      	bne.n	800c166 <_read_r+0x1e>
 800c160:	682b      	ldr	r3, [r5, #0]
 800c162:	b103      	cbz	r3, 800c166 <_read_r+0x1e>
 800c164:	6023      	str	r3, [r4, #0]
 800c166:	bd38      	pop	{r3, r4, r5, pc}
 800c168:	2000307c 	.word	0x2000307c

0800c16c <log10f>:
 800c16c:	b508      	push	{r3, lr}
 800c16e:	ed2d 8b02 	vpush	{d8}
 800c172:	eeb0 8a40 	vmov.f32	s16, s0
 800c176:	f000 f855 	bl	800c224 <__ieee754_log10f>
 800c17a:	4b14      	ldr	r3, [pc, #80]	; (800c1cc <log10f+0x60>)
 800c17c:	f993 3000 	ldrsb.w	r3, [r3]
 800c180:	3301      	adds	r3, #1
 800c182:	d014      	beq.n	800c1ae <log10f+0x42>
 800c184:	eeb4 8a48 	vcmp.f32	s16, s16
 800c188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18c:	d60f      	bvs.n	800c1ae <log10f+0x42>
 800c18e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c196:	d80a      	bhi.n	800c1ae <log10f+0x42>
 800c198:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c19c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a0:	d108      	bne.n	800c1b4 <log10f+0x48>
 800c1a2:	f7fd f91b 	bl	80093dc <__errno>
 800c1a6:	2322      	movs	r3, #34	; 0x22
 800c1a8:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800c1d0 <log10f+0x64>
 800c1ac:	6003      	str	r3, [r0, #0]
 800c1ae:	ecbd 8b02 	vpop	{d8}
 800c1b2:	bd08      	pop	{r3, pc}
 800c1b4:	f7fd f912 	bl	80093dc <__errno>
 800c1b8:	ecbd 8b02 	vpop	{d8}
 800c1bc:	2321      	movs	r3, #33	; 0x21
 800c1be:	6003      	str	r3, [r0, #0]
 800c1c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c1c4:	4803      	ldr	r0, [pc, #12]	; (800c1d4 <log10f+0x68>)
 800c1c6:	f000 b889 	b.w	800c2dc <nanf>
 800c1ca:	bf00      	nop
 800c1cc:	200001e0 	.word	0x200001e0
 800c1d0:	ff800000 	.word	0xff800000
 800c1d4:	0801fdd0 	.word	0x0801fdd0

0800c1d8 <sqrtf>:
 800c1d8:	b508      	push	{r3, lr}
 800c1da:	ed2d 8b02 	vpush	{d8}
 800c1de:	eeb0 8a40 	vmov.f32	s16, s0
 800c1e2:	f000 f877 	bl	800c2d4 <__ieee754_sqrtf>
 800c1e6:	4b0d      	ldr	r3, [pc, #52]	; (800c21c <sqrtf+0x44>)
 800c1e8:	f993 3000 	ldrsb.w	r3, [r3]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	d011      	beq.n	800c214 <sqrtf+0x3c>
 800c1f0:	eeb4 8a48 	vcmp.f32	s16, s16
 800c1f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f8:	d60c      	bvs.n	800c214 <sqrtf+0x3c>
 800c1fa:	eddf 8a09 	vldr	s17, [pc, #36]	; 800c220 <sqrtf+0x48>
 800c1fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c206:	d505      	bpl.n	800c214 <sqrtf+0x3c>
 800c208:	f7fd f8e8 	bl	80093dc <__errno>
 800c20c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c210:	2321      	movs	r3, #33	; 0x21
 800c212:	6003      	str	r3, [r0, #0]
 800c214:	ecbd 8b02 	vpop	{d8}
 800c218:	bd08      	pop	{r3, pc}
 800c21a:	bf00      	nop
 800c21c:	200001e0 	.word	0x200001e0
 800c220:	00000000 	.word	0x00000000

0800c224 <__ieee754_log10f>:
 800c224:	b508      	push	{r3, lr}
 800c226:	ee10 2a10 	vmov	r2, s0
 800c22a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800c22e:	ed2d 8b02 	vpush	{d8}
 800c232:	d108      	bne.n	800c246 <__ieee754_log10f+0x22>
 800c234:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c2bc <__ieee754_log10f+0x98>
 800c238:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c2c0 <__ieee754_log10f+0x9c>
 800c23c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c240:	ecbd 8b02 	vpop	{d8}
 800c244:	bd08      	pop	{r3, pc}
 800c246:	2a00      	cmp	r2, #0
 800c248:	da02      	bge.n	800c250 <__ieee754_log10f+0x2c>
 800c24a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c24e:	e7f3      	b.n	800c238 <__ieee754_log10f+0x14>
 800c250:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c254:	db02      	blt.n	800c25c <__ieee754_log10f+0x38>
 800c256:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c25a:	e7f1      	b.n	800c240 <__ieee754_log10f+0x1c>
 800c25c:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800c260:	bfbf      	itttt	lt
 800c262:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800c2c4 <__ieee754_log10f+0xa0>
 800c266:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c26a:	f06f 0118 	mvnlt.w	r1, #24
 800c26e:	ee17 2a90 	vmovlt	r2, s15
 800c272:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800c276:	bfa8      	it	ge
 800c278:	2100      	movge	r1, #0
 800c27a:	3b7f      	subs	r3, #127	; 0x7f
 800c27c:	440b      	add	r3, r1
 800c27e:	0fd9      	lsrs	r1, r3, #31
 800c280:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800c284:	ee07 3a90 	vmov	s15, r3
 800c288:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800c28c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800c290:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800c294:	ee00 3a10 	vmov	s0, r3
 800c298:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800c29c:	f000 f824 	bl	800c2e8 <__ieee754_logf>
 800c2a0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800c2c8 <__ieee754_log10f+0xa4>
 800c2a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c2a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c2cc <__ieee754_log10f+0xa8>
 800c2ac:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c2b0:	eddf 7a07 	vldr	s15, [pc, #28]	; 800c2d0 <__ieee754_log10f+0xac>
 800c2b4:	eea8 0a27 	vfma.f32	s0, s16, s15
 800c2b8:	e7c2      	b.n	800c240 <__ieee754_log10f+0x1c>
 800c2ba:	bf00      	nop
 800c2bc:	cc000000 	.word	0xcc000000
 800c2c0:	00000000 	.word	0x00000000
 800c2c4:	4c000000 	.word	0x4c000000
 800c2c8:	3ede5bd9 	.word	0x3ede5bd9
 800c2cc:	355427db 	.word	0x355427db
 800c2d0:	3e9a2080 	.word	0x3e9a2080

0800c2d4 <__ieee754_sqrtf>:
 800c2d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c2d8:	4770      	bx	lr
	...

0800c2dc <nanf>:
 800c2dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2e4 <nanf+0x8>
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	7fc00000 	.word	0x7fc00000

0800c2e8 <__ieee754_logf>:
 800c2e8:	ee10 3a10 	vmov	r3, s0
 800c2ec:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c2f0:	d106      	bne.n	800c300 <__ieee754_logf+0x18>
 800c2f2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c488 <__ieee754_logf+0x1a0>
 800c2f6:	eddf 7a65 	vldr	s15, [pc, #404]	; 800c48c <__ieee754_logf+0x1a4>
 800c2fa:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800c2fe:	4770      	bx	lr
 800c300:	2b00      	cmp	r3, #0
 800c302:	da02      	bge.n	800c30a <__ieee754_logf+0x22>
 800c304:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c308:	e7f5      	b.n	800c2f6 <__ieee754_logf+0xe>
 800c30a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c30e:	db02      	blt.n	800c316 <__ieee754_logf+0x2e>
 800c310:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c314:	4770      	bx	lr
 800c316:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c31a:	bfb8      	it	lt
 800c31c:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800c490 <__ieee754_logf+0x1a8>
 800c320:	485c      	ldr	r0, [pc, #368]	; (800c494 <__ieee754_logf+0x1ac>)
 800c322:	bfbe      	ittt	lt
 800c324:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c328:	f06f 0118 	mvnlt.w	r1, #24
 800c32c:	ee17 3a90 	vmovlt	r3, s15
 800c330:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800c334:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c338:	4418      	add	r0, r3
 800c33a:	bfa8      	it	ge
 800c33c:	2100      	movge	r1, #0
 800c33e:	3a7f      	subs	r2, #127	; 0x7f
 800c340:	440a      	add	r2, r1
 800c342:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800c346:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800c34a:	4319      	orrs	r1, r3
 800c34c:	ee00 1a10 	vmov	s0, r1
 800c350:	4951      	ldr	r1, [pc, #324]	; (800c498 <__ieee754_logf+0x1b0>)
 800c352:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800c356:	f103 000f 	add.w	r0, r3, #15
 800c35a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c35e:	4001      	ands	r1, r0
 800c360:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c364:	bb89      	cbnz	r1, 800c3ca <__ieee754_logf+0xe2>
 800c366:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800c36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c36e:	d10f      	bne.n	800c390 <__ieee754_logf+0xa8>
 800c370:	2a00      	cmp	r2, #0
 800c372:	f000 8085 	beq.w	800c480 <__ieee754_logf+0x198>
 800c376:	ee07 2a90 	vmov	s15, r2
 800c37a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800c49c <__ieee754_logf+0x1b4>
 800c37e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800c4a0 <__ieee754_logf+0x1b8>
 800c382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c386:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c38a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800c38e:	4770      	bx	lr
 800c390:	eddf 6a44 	vldr	s13, [pc, #272]	; 800c4a4 <__ieee754_logf+0x1bc>
 800c394:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c398:	eee0 7a66 	vfms.f32	s15, s0, s13
 800c39c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c3a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3a4:	b912      	cbnz	r2, 800c3ac <__ieee754_logf+0xc4>
 800c3a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c3aa:	4770      	bx	lr
 800c3ac:	ee07 2a90 	vmov	s15, r2
 800c3b0:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800c49c <__ieee754_logf+0x1b4>
 800c3b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3b8:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800c3bc:	ee37 0a40 	vsub.f32	s0, s14, s0
 800c3c0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800c4a0 <__ieee754_logf+0x1b8>
 800c3c4:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800c3c8:	4770      	bx	lr
 800c3ca:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800c3ce:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c3d2:	eddf 5a35 	vldr	s11, [pc, #212]	; 800c4a8 <__ieee754_logf+0x1c0>
 800c3d6:	eddf 4a35 	vldr	s9, [pc, #212]	; 800c4ac <__ieee754_logf+0x1c4>
 800c3da:	4935      	ldr	r1, [pc, #212]	; (800c4b0 <__ieee754_logf+0x1c8>)
 800c3dc:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800c3e0:	4419      	add	r1, r3
 800c3e2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800c3e6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800c3ea:	430b      	orrs	r3, r1
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	ee07 2a90 	vmov	s15, r2
 800c3f2:	ee26 5a06 	vmul.f32	s10, s12, s12
 800c3f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c3fa:	ee25 7a05 	vmul.f32	s14, s10, s10
 800c3fe:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800c4b4 <__ieee754_logf+0x1cc>
 800c402:	eee7 7a25 	vfma.f32	s15, s14, s11
 800c406:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800c4b8 <__ieee754_logf+0x1d0>
 800c40a:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c40e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c4bc <__ieee754_logf+0x1d4>
 800c412:	eee7 7a24 	vfma.f32	s15, s14, s9
 800c416:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800c4c0 <__ieee754_logf+0x1d8>
 800c41a:	eee7 4a87 	vfma.f32	s9, s15, s14
 800c41e:	eddf 7a29 	vldr	s15, [pc, #164]	; 800c4c4 <__ieee754_logf+0x1dc>
 800c422:	eee4 7a87 	vfma.f32	s15, s9, s14
 800c426:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c42a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800c42e:	dd1c      	ble.n	800c46a <__ieee754_logf+0x182>
 800c430:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c434:	ee20 7a07 	vmul.f32	s14, s0, s14
 800c438:	ee27 7a00 	vmul.f32	s14, s14, s0
 800c43c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c440:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c444:	b922      	cbnz	r2, 800c450 <__ieee754_logf+0x168>
 800c446:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c44a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c44e:	4770      	bx	lr
 800c450:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800c49c <__ieee754_logf+0x1b4>
 800c454:	eee6 7a86 	vfma.f32	s15, s13, s12
 800c458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c45c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c460:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800c4a0 <__ieee754_logf+0x1b8>
 800c464:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800c468:	4770      	bx	lr
 800c46a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800c46e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800c472:	2a00      	cmp	r2, #0
 800c474:	d0e9      	beq.n	800c44a <__ieee754_logf+0x162>
 800c476:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800c49c <__ieee754_logf+0x1b4>
 800c47a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800c47e:	e7ed      	b.n	800c45c <__ieee754_logf+0x174>
 800c480:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c48c <__ieee754_logf+0x1a4>
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	cc000000 	.word	0xcc000000
 800c48c:	00000000 	.word	0x00000000
 800c490:	4c000000 	.word	0x4c000000
 800c494:	004afb20 	.word	0x004afb20
 800c498:	007ffff0 	.word	0x007ffff0
 800c49c:	3717f7d1 	.word	0x3717f7d1
 800c4a0:	3f317180 	.word	0x3f317180
 800c4a4:	3eaaaaab 	.word	0x3eaaaaab
 800c4a8:	3e1cd04f 	.word	0x3e1cd04f
 800c4ac:	3e178897 	.word	0x3e178897
 800c4b0:	ffcf5c30 	.word	0xffcf5c30
 800c4b4:	3e638e29 	.word	0x3e638e29
 800c4b8:	3ecccccd 	.word	0x3ecccccd
 800c4bc:	3e3a3325 	.word	0x3e3a3325
 800c4c0:	3e924925 	.word	0x3e924925
 800c4c4:	3f2aaaab 	.word	0x3f2aaaab

0800c4c8 <_init>:
 800c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ca:	bf00      	nop
 800c4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4ce:	bc08      	pop	{r3}
 800c4d0:	469e      	mov	lr, r3
 800c4d2:	4770      	bx	lr

0800c4d4 <_fini>:
 800c4d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4d6:	bf00      	nop
 800c4d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c4da:	bc08      	pop	{r3}
 800c4dc:	469e      	mov	lr, r3
 800c4de:	4770      	bx	lr
